<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[做最好的自己]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.bestzhangjin.com/"/>
  <updated>2018-07-25T15:20:55.131Z</updated>
  <id>http://www.bestzhangjin.com/</id>
  
  <author>
    <name><![CDATA[Jin Zhang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Docker实践]]></title>
    <link href="http://www.bestzhangjin.com/2018/07/17/docker/"/>
    <id>http://www.bestzhangjin.com/2018/07/17/docker/</id>
    <published>2018-07-17T13:44:21.000Z</published>
    <updated>2018-07-25T15:20:55.131Z</updated>
    <content type="html"><![CDATA[<h2 id="1-1__u5B9E_u9A8C_u73AF_u5883"><a href="#1-1__u5B9E_u9A8C_u73AF_u5883" class="headerlink" title="1.1 实验环境"></a>1.1 实验环境</h2><p>本教程实验环境:ubuntu16.04 64位 。<br><a id="more"></a></p>
<h2 id="1-2_docker__u5B89_u88C5"><a href="#1-2_docker__u5B89_u88C5" class="headerlink" title="1.2 docker 安装"></a>1.2 docker 安装</h2><p>参考<a href="http://www.runoob.com/docker/ubuntu-docker-install.html" target="_blank" rel="external">菜鸟教程</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-1__u5B9E_u9A8C_u73AF_u5883"><a href="#1-1__u5B9E_u9A8C_u73AF_u5883" class="headerlink" title="1.1 实验环境"></a>1.1 实验环境</h2><p>本教程实验环境:ubuntu16.04 64位 。<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://www.bestzhangjin.com/tags/docker/"/>
    
      <category term="docker" scheme="http://www.bestzhangjin.com/categories/docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[tensorflow安装]]></title>
    <link href="http://www.bestzhangjin.com/2017/11/24/tensorflowinstall/"/>
    <id>http://www.bestzhangjin.com/2017/11/24/tensorflowinstall/</id>
    <published>2017-11-24T07:05:00.000Z</published>
    <updated>2017-11-24T07:37:55.138Z</updated>
    <content type="html"><![CDATA[<h1 id="1-_u4F7F_u7528Anaconda_u5B89_u88C5"><a href="#1-_u4F7F_u7528Anaconda_u5B89_u88C5" class="headerlink" title="1.使用Anaconda安装"></a>1.使用Anaconda安装</h1><h2 id="1-1Anaconda_u5B89_u88C5"><a href="#1-1Anaconda_u5B89_u88C5" class="headerlink" title="1.1Anaconda安装"></a>1.1Anaconda安装</h2><p>进入<a href="https://www.continuum.io/downloads#linux" target="_blank" rel="external">Anaconda官网</a>下载Anaconda.sh<br><a id="more"></a><br>下载gpu版tensorflow:tensorflow_gpu-1.2.0rc1-cp27-cp27mu-manylinux1_x86_64.whl<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chmod +x Anaconda2-<span class="number">5.0</span><span class="number">.1</span>-Linux-x86_64.sh</span><br><span class="line">./Anaconda2-<span class="number">5.0</span><span class="number">.1</span>-Linux-x86_64.sh</span><br><span class="line">./anaconda2/bin/conda create -n tensorflow python=<span class="number">2.7</span></span><br><span class="line">source ./anaconda2/bin/activate tensorflow</span><br><span class="line">./anaconda2/bin/pip install tensorflow_gpu-<span class="number">1.2</span><span class="number">.0</span>rc1-cp27-cp27mu-manylinux1_x86_64.whl</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="1-_u4F7F_u7528Anaconda_u5B89_u88C5"><a href="#1-_u4F7F_u7528Anaconda_u5B89_u88C5" class="headerlink" title="1.使用Anaconda安装"></a>1.使用Anaconda安装</h1><h2 id="1-1Anaconda_u5B89_u88C5"><a href="#1-1Anaconda_u5B89_u88C5" class="headerlink" title="1.1Anaconda安装"></a>1.1Anaconda安装</h2><p>进入<a href="https://www.continuum.io/downloads#linux">Anaconda官网</a>下载Anaconda.sh<br>]]>
    
    </summary>
    
      <category term="tensorflow" scheme="http://www.bestzhangjin.com/tags/tensorflow/"/>
    
      <category term="深度学习" scheme="http://www.bestzhangjin.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[深度学习之Mxnet--李沐视频]]></title>
    <link href="http://www.bestzhangjin.com/2017/10/13/deeplearn/"/>
    <id>http://www.bestzhangjin.com/2017/10/13/deeplearn/</id>
    <published>2017-10-13T11:44:22.000Z</published>
    <updated>2018-02-25T11:58:23.529Z</updated>
    <content type="html"><![CDATA[<h2 id="1-1-_u524D_u8A00"><a href="#1-1-_u524D_u8A00" class="headerlink" title="1.1.前言"></a>1.1.前言</h2><p>资料详见<a href="https://zh.gluon.ai/" target="_blank" rel="external">动手学深度学习</a><br><a id="more"></a></p>
<h2 id="1-2-_u4F7F_u7528NDArray_u6765_u5904_u7406_u6570_u636E"><a href="#1-2-_u4F7F_u7528NDArray_u6765_u5904_u7406_u6570_u636E" class="headerlink" title="1.2.使用NDArray来处理数据"></a>1.2.使用NDArray来处理数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># coding=utf-<span class="number">8</span></span></span><br><span class="line"></span><br><span class="line">from mxnet import ndarray as nd</span><br><span class="line">import numpy as np</span><br><span class="line"><span class="preprocessor">##具体看NDArray API</span></span><br><span class="line"></span><br><span class="line">nd.zeros((<span class="number">3</span>, <span class="number">4</span>))  <span class="preprocessor">#<span class="number">3</span>行和<span class="number">4</span>列的<span class="number">2</span>D数组 全<span class="number">0</span></span></span><br><span class="line">x=nd.ones((<span class="number">3</span>,<span class="number">4</span>)) <span class="preprocessor">#全<span class="number">1</span></span></span><br><span class="line"><span class="preprocessor">#或者从python的数组直接构造</span></span><br><span class="line">nd.<span class="built_in">array</span>([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>]]) <span class="preprocessor">#[[ <span class="number">1.</span>  <span class="number">2.</span>] [ <span class="number">2.</span>  <span class="number">3.</span>]]</span></span><br><span class="line"><span class="preprocessor">## 创建随机数 - 深度学习常用</span></span><br><span class="line">y = nd.random_normal(<span class="number">0</span>, <span class="number">1</span>, shape=(<span class="number">3</span>, <span class="number">4</span>)) <span class="preprocessor">#均值<span class="number">0</span>方差<span class="number">1</span>的正态分布<span class="number">3</span>x4矩阵</span></span><br><span class="line">print y.shape <span class="preprocessor"># (<span class="number">3L</span>, <span class="number">4L</span>)</span></span><br><span class="line">print y.size <span class="preprocessor"># <span class="number">12</span></span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">##数学操作  nd.dot(x,y)为矩阵乘法 区别于*对应元素相乘</span></span><br><span class="line">x+y</span><br><span class="line">x*y</span><br><span class="line">print nd.<span class="built_in">exp</span>(y) <span class="preprocessor">##指数</span></span><br><span class="line">print nd.dot(x,y.T) <span class="preprocessor">#x与y的转置进行矩阵乘法</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">##Numpy与NDArray转换</span></span><br><span class="line">x = np.ones((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">y = nd.<span class="built_in">array</span>(x)  <span class="preprocessor"># numpy -&gt; mxnet</span></span><br><span class="line">z = y.asnumpy()  <span class="preprocessor"># mxnet -&gt; numpy</span></span><br><span class="line">print([z, y])</span><br></pre></td></tr></table></figure>
<h2 id="1-3-_u4F7F_u7528autograd_u81EA_u52A8_u6C42_u5BFC"><a href="#1-3-_u4F7F_u7528autograd_u81EA_u52A8_u6C42_u5BFC" class="headerlink" title="1.3.使用autograd自动求导"></a>1.3.使用autograd自动求导</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> ndarray <span class="keyword">as</span> nd</span><br><span class="line"><span class="keyword">import</span> mxnet.autograd <span class="keyword">as</span> ag <span class="comment">##自动求导</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = nd.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="comment">#对需要求导的变量需要通过NDArray的方法`attach_grad()`来要求系统申请对应的空间</span></span><br><span class="line">x.attach_grad()</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认条件下，MXNet不会自动记录和构建用于求导的计算图，</span></span><br><span class="line"><span class="comment"># 我们需要使用autograd里的`record()`函数来显式的要求MXNet记录我们需要求导的程序。</span></span><br><span class="line"><span class="keyword">with</span> ag.record():</span><br><span class="line">    y = x * <span class="number">2</span></span><br><span class="line">    z = y * x  <span class="comment">##z=2乘以x的平方 [[  2.   8.] [ 18.  32.]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#接下来我们可以通过z.backward()来进行求导。</span></span><br><span class="line"><span class="comment"># 如果z不是一个标量，那么z.backward()等价于nd.sum(z).backward()</span></span><br><span class="line">z.backward() <span class="comment">## None</span></span><br><span class="line"><span class="keyword">print</span> x.grad  <span class="comment"># z针对x求导的结果 [[  4.   8.] [ 12.  16.]]</span></span><br><span class="line"><span class="comment">## x.grad == 4*x</span></span><br><span class="line"><span class="keyword">print</span> x.grad == <span class="number">4</span>*x  <span class="comment">## [[ 1.  1.] [ 1.  1.]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 对控制流求导</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a)</span>:</span></span><br><span class="line">    b = a * <span class="number">2</span></span><br><span class="line">    <span class="comment">## nd.norm(b)-b中所有数据的平方之和取根号 asscalar()--转换成标量</span></span><br><span class="line">    <span class="keyword">while</span> nd.norm(b).asscalar() &lt; <span class="number">1000</span>:</span><br><span class="line">        b = b * <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> nd.sum(b).asscalar() &gt; <span class="number">0</span>:</span><br><span class="line">        c = b</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c = <span class="number">100</span> * b</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">a = nd.random_normal(shape=<span class="number">3</span>)</span><br><span class="line">a.attach_grad()</span><br><span class="line"><span class="keyword">with</span> ag.record():</span><br><span class="line">    c = f(a)</span><br><span class="line">c.backward()</span><br><span class="line"><span class="keyword">print</span> a.grad <span class="comment"># [ 512.  512.  512.]</span></span><br><span class="line"><span class="keyword">print</span> a.grad==c/a <span class="comment"># [ 1.  1.  1.]</span></span><br></pre></td></tr></table></figure>
<h2 id="1-4-_u4ECE0_u5F00_u59CB_u7EBF_u6027_u56DE_u5F52"><a href="#1-4-_u4ECE0_u5F00_u59CB_u7EBF_u6027_u56DE_u5F52" class="headerlink" title="1.4.从0开始线性回归"></a>1.4.从0开始线性回归</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> ndarray <span class="keyword">as</span> nd</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> autograd</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">num_inputs = <span class="number">2</span></span><br><span class="line">num_examples = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">true_w = [<span class="number">2</span>, -<span class="number">3.4</span>]</span><br><span class="line">true_b = <span class="number">4.2</span></span><br><span class="line"></span><br><span class="line">X = nd.random_normal(shape=(num_examples, num_inputs))</span><br><span class="line">y = true_w[<span class="number">0</span>] * X[:, <span class="number">0</span>] + true_w[<span class="number">1</span>] * X[:, <span class="number">1</span>] + true_b</span><br><span class="line">y += <span class="number">.01</span> * nd.random_normal(shape=y.shape) <span class="comment">##加噪声</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意到`X`的每一行是一个长度为2的向量，而`y`的每一行是一个长度为1的向量（标量）。</span></span><br><span class="line"></span><br><span class="line">print(X[<span class="number">0</span>], y[<span class="number">0</span>]) <span class="comment"># [[ 2.21220636  1.16307867],[ 4.6620779]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当我们开始训练神经网络的时候，我们需要不断读取数据块。</span></span><br><span class="line"><span class="comment"># 这里我们定义一个函数它每次返回batch_size个随机的样本和对应的目标。</span></span><br><span class="line"><span class="comment"># 我们通过python的yield来构造一个迭代器。</span></span><br><span class="line">batch_size = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_iter</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 产生一个随机索引</span></span><br><span class="line">    idx = list(range(num_examples))</span><br><span class="line">    random.shuffle(idx) <span class="comment">##索引打乱顺序</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, num_examples, batch_size):</span><br><span class="line">        j = nd.array(idx[i:min(i+batch_size,num_examples)]) <span class="comment">#随机的batch个索引</span></span><br><span class="line">        <span class="keyword">yield</span> nd.take(X, j), nd.take(y, j) <span class="comment">#根据索引拿到数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data, label <span class="keyword">in</span> data_iter():</span><br><span class="line">    print(data, label)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">n=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> data, label <span class="keyword">in</span> data_iter():</span><br><span class="line">    n=n+<span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> n <span class="comment">## 100 每次拿10组数据 拿100次拿完</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#下面我们随机初始化模型参数</span></span><br><span class="line">w = nd.random_normal(shape=(num_inputs, <span class="number">1</span>))</span><br><span class="line">b = nd.zeros((<span class="number">1</span>,))</span><br><span class="line">params = [w, b]</span><br><span class="line"><span class="keyword">print</span> params <span class="comment"># [[ 0.72455114] [ 0.13263007]], [ 0.]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 之后训练时我们需要对这些参数求导来更新它们的值，所以我们需要创建它们的梯度</span></span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">    param.attach_grad()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 定义模型</span></span><br><span class="line"><span class="comment"># 线性模型就是将输入和模型做乘法再加上偏移：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">net</span><span class="params">(X)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> nd.dot(X, w) + b</span><br><span class="line"></span><br><span class="line"><span class="comment">## 损失函数</span></span><br><span class="line"><span class="comment">#我们使用常见的平方误差来衡量预测目标和真实目标之间的差距。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square_loss</span><span class="params">(yhat, y)</span>:</span></span><br><span class="line">    <span class="comment"># 注意这里我们把y变形成yhat的形状来避免自动广播</span></span><br><span class="line">    <span class="keyword">return</span> (yhat - y.reshape(yhat.shape)) ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#虽然线性回归有显试解，但绝大部分模型并没有。</span></span><br><span class="line"><span class="comment"># 所以我们这里通过随机梯度下降来求解。每一步，</span></span><br><span class="line"><span class="comment"># 我们将模型参数沿着梯度的反方向走特定距离，这个距离一般叫学习率。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SGD</span><span class="params">(params, lr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        param[:] = param - lr * param.grad</span><br><span class="line"></span><br><span class="line"><span class="comment">## 训练</span></span><br><span class="line"><span class="comment"># 现在我们可以开始训练了。训练通常需要迭代数据数次，</span></span><br><span class="line"><span class="comment"># 一次迭代里，我们每次随机读取固定数个数据点，计算梯度并更新模型参数。</span></span><br><span class="line">epochs = <span class="number">10</span></span><br><span class="line">learning_rate = <span class="number">.001</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> range(epochs):</span><br><span class="line">    total_loss = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> data, label <span class="keyword">in</span> data_iter():</span><br><span class="line">        <span class="keyword">with</span> autograd.record():</span><br><span class="line">            output = net(data)</span><br><span class="line">            loss = square_loss(output, label)</span><br><span class="line">        loss.backward()</span><br><span class="line">        SGD(params, learning_rate)</span><br><span class="line">        total_loss += nd.sum(loss).asscalar()</span><br><span class="line">    print(<span class="string">"Epoch %d, average loss: %f"</span> % (e, total_loss/num_examples))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> true_w,w  <span class="comment">#[2, -3.4]  [[ 1.99984801] [-3.40017033]]</span></span><br><span class="line"><span class="keyword">print</span> true_b,b  <span class="comment">#4.2  [ 4.19996023]</span></span><br></pre></td></tr></table></figure>
<h2 id="1-5-_u4F7F_u7528Gluon_u5B9E_u73B0_u7EBF_u6027_u56DE_u5F52"><a href="#1-5-_u4F7F_u7528Gluon_u5B9E_u73B0_u7EBF_u6027_u56DE_u5F52" class="headerlink" title="1.5.使用Gluon实现线性回归"></a>1.5.使用Gluon实现线性回归</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line">from mxnet import ndarray as nd</span><br><span class="line">from mxnet import autograd</span><br><span class="line">from mxnet import gluon</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">## 创建数据集</span></span><br><span class="line">num_inputs = <span class="number">2</span></span><br><span class="line">num_examples = <span class="number">1000</span></span><br><span class="line">true_w = [<span class="number">2</span>, -<span class="number">3.4</span>]</span><br><span class="line">true_b = <span class="number">4.2</span></span><br><span class="line"></span><br><span class="line">X = nd.random_normal(shape=(num_examples, num_inputs))</span><br><span class="line">y = true_w[<span class="number">0</span>] * X[:, <span class="number">0</span>] + true_w[<span class="number">1</span>] * X[:, <span class="number">1</span>] + true_b</span><br><span class="line">y += <span class="number">.01</span> * nd.random_normal(shape=y.shape)</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">## 数据读取</span></span><br><span class="line">batch_size = <span class="number">10</span></span><br><span class="line">dataset = gluon.data.ArrayDataset(X, y)</span><br><span class="line">data_iter = gluon.data.DataLoader(dataset, batch_size, shuffle=True)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data, label in data_iter:</span><br><span class="line">    print(data, label)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">## 定义模型</span></span><br><span class="line"><span class="preprocessor"># 当我们手写模型的时候，我们需要先声明模型参数，然后再使用它们来构建模型。</span></span><br><span class="line"><span class="preprocessor"># 但gluon提供大量提前定制好的层，使得我们只需要主要关注使用哪些层来构建模型。</span></span><br><span class="line"><span class="preprocessor"># 例如线性模型就是使用对应的Dense层。</span></span><br><span class="line"><span class="preprocessor">#虽然我们之后会介绍如何构造任意结构的神经网络，</span></span><br><span class="line"><span class="preprocessor"># 构建模型最简单的办法是利用Sequential来所有层串起来。</span></span><br><span class="line"><span class="preprocessor"># 首先我们定义一个空的模型：</span></span><br><span class="line">net = gluon.nn.Sequential()</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#然后我们加入一个Dense层，它唯一必须要定义的参数就是输出节点的个数，在线性模型里面是1.</span></span><br><span class="line"><span class="preprocessor">#这里我们并没有定义说这个层的输入节点是多少，这个在之后真正给数据的时候系统会自动赋值。</span></span><br><span class="line">net.add(gluon.nn.Dense(<span class="number">1</span>))</span><br><span class="line">print net  #Sequential((<span class="number">0</span>): Dense(<span class="number">1</span>, linear))</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 在使用前net我们必须要初始化模型权重，这里我们使用默认随机初始化方法</span></span><br><span class="line"><span class="preprocessor"># （之后我们会介绍更多的初始化方法）。</span></span><br><span class="line">net.initialize()</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">## 损失函数</span></span><br><span class="line"><span class="preprocessor"># gluon提供了平方误差函数：</span></span><br><span class="line">square_loss = gluon.loss.L2Loss()</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">## 优化</span></span><br><span class="line"><span class="preprocessor">#同样我们无需手动实现随机梯度下降，我们可以用创建一个Trainer的实例，</span></span><br><span class="line"><span class="preprocessor"># 并且将模型参数传递给它就行。</span></span><br><span class="line">trainer = gluon.Trainer(</span><br><span class="line">    net.collect_params(), <span class="string">'sgd'</span>, &#123;<span class="string">'learning_rate'</span>: <span class="number">0.1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">## 训练</span></span><br><span class="line"><span class="preprocessor"># 这里的训练跟前面没有太多区别，唯一的就是我们不再是调用SGD，</span></span><br><span class="line"><span class="preprocessor"># 而是trainer.step来更新模型。</span></span><br><span class="line">epochs = <span class="number">5</span></span><br><span class="line">batch_size = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> e in range(epochs):</span><br><span class="line">    total_loss = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> data, label in data_iter:</span><br><span class="line">        with autograd.record():</span><br><span class="line">            output = net(data)</span><br><span class="line">            loss = square_loss(output, label)</span><br><span class="line">        loss.backward()</span><br><span class="line">        trainer.step(batch_size) ##往前走一步</span><br><span class="line">        total_loss += nd.sum(loss).asscalar()</span><br><span class="line">    print(<span class="string">"Epoch %d, average loss: %f"</span> % (e, total_loss/num_examples))</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 比较学到的和真实模型。我们先从`net`拿到需要的层，然后访问其权重和位移。</span></span><br><span class="line">dense = net[<span class="number">0</span>]</span><br><span class="line">print true_w, dense.weight.data() ##[<span class="number">2</span>, -<span class="number">3.4</span>]  [[ <span class="number">1.99912584</span> -<span class="number">3.39986587</span>]]</span><br><span class="line">print true_b, dense.bias.data() ##<span class="number">4.2</span>  [ <span class="number">4.19950867</span>]</span><br></pre></td></tr></table></figure>
<h2 id="1-6-_u4ECE0_u5F00_u59CB_u591A_u7C7B_u903B_u8F91_u56DE_u5F52"><a href="#1-6-_u4ECE0_u5F00_u59CB_u591A_u7C7B_u903B_u8F91_u56DE_u5F52" class="headerlink" title="1.6.从0开始多类逻辑回归"></a>1.6.从0开始多类逻辑回归</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> ndarray <span class="keyword">as</span> nd</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里我们用MNIST分类数字</span></span><br><span class="line"><span class="comment"># 我们通过gluon的data.vision模块自动下载这个数据。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span><span class="params">(data, label)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> data.astype(<span class="string">'float32'</span>)/<span class="number">255</span>, label.astype(<span class="string">'float32'</span>)</span><br><span class="line">mnist_train = gluon.data.vision.MNIST(train=<span class="keyword">True</span>, transform=transform)</span><br><span class="line">mnist_test = gluon.data.vision.MNIST(train=<span class="keyword">False</span>, transform=transform)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印一个样本的形状和它的标号</span></span><br><span class="line">data, label = mnist_train[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'example shape: '</span>, data.shape, <span class="string">'label:'</span>, label) <span class="comment">##('example shape: ', (28L, 28L, 1L), 'label:', 5.0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 数据读取</span></span><br><span class="line"><span class="comment">#虽然我们可以像前面那样通过yield来定义获取批量数据函数，</span></span><br><span class="line"><span class="comment"># 这里我们直接使用gluon.data的DataLoader函数，它每次yield一个批量。</span></span><br><span class="line"><span class="comment"># 注意到这里我们要求每次从训练数据里读取一个由随机样本组成的批量，</span></span><br><span class="line"><span class="comment"># 但测试数据则不需要这个要求。</span></span><br><span class="line">batch_size = <span class="number">256</span></span><br><span class="line">train_data = gluon.data.DataLoader(mnist_train, batch_size, shuffle=<span class="keyword">True</span>)</span><br><span class="line">test_data = gluon.data.DataLoader(mnist_test, batch_size, shuffle=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 初始化模型参数</span></span><br><span class="line"><span class="comment"># 跟线性模型一样，每个样本会表示成一个向量。我们这里数据是 28 * 28 大小的图片，</span></span><br><span class="line"><span class="comment"># 所以输入向量的长度是 28 * 28 = 784。</span></span><br><span class="line"><span class="comment"># 因为我们要做多类分类，我们需要对每一个类预测这个样本属于此类的概率。</span></span><br><span class="line"><span class="comment"># 因为这个数据集有10个类型，所以输出应该是长为10的向量。</span></span><br><span class="line"><span class="comment"># 这样，我们需要的权重将是一个 784 * 10 的矩阵：</span></span><br><span class="line">num_inputs = <span class="number">784</span></span><br><span class="line">num_outputs = <span class="number">10</span></span><br><span class="line">W = nd.random_normal(shape=(num_inputs, num_outputs))</span><br><span class="line">b = nd.random_normal(shape=num_outputs)</span><br><span class="line">params = [W, b]</span><br><span class="line"></span><br><span class="line"><span class="comment">#同之前一样，我们要对模型参数附上梯度：</span></span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">    param.attach_grad()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 定义模型</span></span><br><span class="line"><span class="comment"># 在线性回归教程里，我们只需要输出一个标量yhat使得尽可能的靠近目标值。</span></span><br><span class="line"><span class="comment"># 但在这里的分类里，我们需要属于每个类别的概率。</span></span><br><span class="line"><span class="comment"># 这些概率需要值为正，而且加起来等于1.</span></span><br><span class="line"><span class="comment"># 而如果简单的使用 Y=WX,我们不能保证这一点。</span></span><br><span class="line"><span class="comment"># 一个通常的做法是通过softmax函数来将任意的输入归一化成合法的概率值。</span></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">softmax</span><span class="params">(X)</span>:</span></span><br><span class="line">    exp = nd.exp(X)  <span class="comment">##全部变为正的</span></span><br><span class="line">    <span class="comment"># 假设exp是矩阵，这里对行进行求和，并要求保留axis 1，</span></span><br><span class="line">    <span class="comment"># 就是返回 (nrows, 1) 形状的矩阵</span></span><br><span class="line">    partition = exp.sum(axis=<span class="number">1</span>, keepdims=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">return</span> exp / partition  <span class="comment">##每个行除以它的行的和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以看到，对于随机输入，我们将每个元素变成了非负数，而且每一行加起来为1。</span></span><br><span class="line">X = nd.random_normal(shape=(<span class="number">2</span>,<span class="number">5</span>))</span><br><span class="line"><span class="keyword">print</span> X</span><br><span class="line"><span class="comment"># [[ 0.79687113  0.85240501  0.61860603  0.47654876  0.74863517]</span></span><br><span class="line"><span class="comment"># [ 0.55032933 -0.22566749 -2.11320662 -0.95748073  0.32560727]]</span></span><br><span class="line">X_prob = softmax(X)</span><br><span class="line">print(X_prob)</span><br><span class="line"><span class="comment"># [[ 0.21869159  0.23117994  0.18298376  0.1587515   0.20839317]</span></span><br><span class="line"><span class="comment"># [ 0.39214477  0.1804826   0.02733301  0.08681861  0.31322101]]</span></span><br><span class="line">print(X_prob.sum(axis=<span class="number">1</span>)) <span class="comment"># [ 0.99999994  1.        ] ([1,1])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#现在我们可以定义模型了：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">net</span><span class="params">(X)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> softmax(nd.dot(X.reshape((-<span class="number">1</span>,num_inputs)), W) + b)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 交叉熵损失函数</span></span><br><span class="line"><span class="comment"># 我们需要定义一个针对预测为概率值的损失函数。其中最常见的是交叉熵损失函数，</span></span><br><span class="line"><span class="comment"># 它将两个概率分布的负交叉熵作为目标值，最小化这个值等价于最大化这两个概率的相似度。</span></span><br><span class="line"><span class="comment"># 具体来说，我们先将真实标号表示成一个概率分布，例如如果y=1，</span></span><br><span class="line"><span class="comment"># 那么其对应的分布就是一个除了第二个元素为1其他全为0的长为10的向量，</span></span><br><span class="line"><span class="comment"># 也就是 yvec=[0, 1, 0, 0, 0, 0, 0, 0, 0, 0]。</span></span><br><span class="line"><span class="comment"># 那么交叉熵就是yvec[0]*log(yhat[0])+...+yvec[n]*log(yhat[n])。</span></span><br><span class="line"><span class="comment"># 注意到yvec里面只有一个1，那么前面等价于log(yhat[y])。</span></span><br><span class="line"><span class="comment"># 所以我们可以定义这个损失函数了</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cross_entropy</span><span class="params">(yhat, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> - nd.pick(nd.log(yhat), y)</span><br><span class="line"></span><br><span class="line"><span class="comment">#给定一个概率输出，我们将预测概率最高的那个类作为预测的类，</span></span><br><span class="line"><span class="comment"># 然后通过比较真实标号我们可以计算精度：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accuracy</span><span class="params">(output, label)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> nd.mean(output.argmax(axis=<span class="number">1</span>)==label).asscalar()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#我们可以评估一个模型在这个数据上的精度。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_accuracy</span><span class="params">(data_iterator, net)</span>:</span></span><br><span class="line">    acc = <span class="number">0.</span></span><br><span class="line">    <span class="keyword">for</span> data, label <span class="keyword">in</span> data_iterator:</span><br><span class="line">        output = net(data)</span><br><span class="line">        acc += accuracy(output, label)</span><br><span class="line">    <span class="keyword">return</span> acc / len(data_iterator)</span><br><span class="line"></span><br><span class="line"><span class="comment">#因为我们随机初始化了模型，所以这个模型的精度应该大概是1/num_outputs = 0.1.</span></span><br><span class="line"><span class="keyword">print</span> evaluate_accuracy(test_data, net) <span class="comment">#0.09814453125</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SGD</span><span class="params">(params, lr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        param[:] = param - lr * param.grad</span><br><span class="line"></span><br><span class="line"><span class="comment">## 训练</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">'..'</span>)</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> autograd</span><br><span class="line"></span><br><span class="line">learning_rate = <span class="number">.1</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    train_loss = <span class="number">0.</span></span><br><span class="line">    train_acc = <span class="number">0.</span></span><br><span class="line">    <span class="keyword">for</span> data, label <span class="keyword">in</span> train_data:</span><br><span class="line">        <span class="keyword">with</span> autograd.record():</span><br><span class="line">            output = net(data)</span><br><span class="line">            loss = cross_entropy(output, label)</span><br><span class="line">        loss.backward()</span><br><span class="line">        <span class="comment"># 将梯度做平均，这样学习率会对batch size不那么敏感</span></span><br><span class="line">        SGD(params, learning_rate/batch_size)</span><br><span class="line"></span><br><span class="line">        train_loss += nd.mean(loss).asscalar()</span><br><span class="line">        train_acc += accuracy(output, label)</span><br><span class="line"></span><br><span class="line">    test_acc = evaluate_accuracy(test_data, net)</span><br><span class="line">    print(<span class="string">"Epoch %d. Loss: %f, Train acc %f, Test acc %f"</span> % (</span><br><span class="line">        epoch, train_loss/len(train_data), train_acc/len(train_data), test_acc))</span><br><span class="line"></span><br><span class="line"><span class="comment">## 预测</span></span><br><span class="line"><span class="comment">#训练完成后，现在我们可以演示对输入图片的标号的预测</span></span><br><span class="line"></span><br><span class="line">data, label = mnist_test[<span class="number">0</span>:<span class="number">9</span>]</span><br><span class="line">print(<span class="string">'true labels'</span>)</span><br><span class="line">print(label)</span><br><span class="line"></span><br><span class="line">predicted_labels = net(data).argmax(axis=<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'predicted labels'</span>)</span><br><span class="line">print(predicted_labels.asnumpy())</span><br></pre></td></tr></table></figure>
<p>尝试增大学习率，你会发现结果马上回变成很糟糕，精度基本徘徊在随机的0.1左右。这是为什么呢？提示：</p>
<ul>
<li>打印下output看看是不是有有什么异常</li>
<li>前面线性回归还好好的，这里我们在net()里加了什么呢？</li>
<li>如果给exp输入个很大的数会怎么样？</li>
<li>即使解决exp的问题，求出来的导数是不是还是不稳定？</li>
</ul>
<p>请仔细想想再去对比下小伙伴之一@<a href="https://github.com/pluskid" target="_blank" rel="external">pluskid</a>早年写的一篇<a href="http://freemind.pluskid.org/machine-learning/softmax-vs-softmax-loss-numerical-stability/" target="_blank" rel="external">blog解释这个问题</a>，看看你想的是不是不一样。</p>
<h2 id="1-7-Gluon_u7248_u591A_u7C7B_u903B_u8F91_u56DE_u5F52"><a href="#1-7-Gluon_u7248_u591A_u7C7B_u903B_u8F91_u56DE_u5F52" class="headerlink" title="1.7.Gluon版多类逻辑回归"></a>1.7.Gluon版多类逻辑回归</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> ndarray <span class="keyword">as</span> nd</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> autograd</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> image</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">256</span></span><br><span class="line"><span class="comment">#这里我们用MNIST分类数字</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data_fashion_mnist</span><span class="params">(batch_size, resize=None)</span>:</span></span><br><span class="line">    <span class="string">"""download the fashion mnist dataest and then load into memory"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transform_mnist</span><span class="params">(data, label)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> resize:</span><br><span class="line">            <span class="comment"># resize to resize x resize</span></span><br><span class="line">            data = image.imresize(data, resize, resize)</span><br><span class="line">        <span class="comment"># change data from height x weight x channel to channel x height x weight</span></span><br><span class="line">        <span class="keyword">return</span> nd.transpose(data.astype(<span class="string">'float32'</span>), (<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>))/<span class="number">255</span>, label.astype(<span class="string">'float32'</span>)</span><br><span class="line">    mnist_train = gluon.data.vision.MNIST(train=<span class="keyword">True</span>, transform=transform_mnist)</span><br><span class="line">    mnist_test = gluon.data.vision.MNIST(train=<span class="keyword">False</span>, transform=transform_mnist)</span><br><span class="line">    train_data = gluon.data.DataLoader(mnist_train, batch_size, shuffle=<span class="keyword">True</span>)</span><br><span class="line">    test_data = gluon.data.DataLoader(mnist_test, batch_size, shuffle=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">return</span> (train_data, test_data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span><span class="params">(data, label)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> data.astype(<span class="string">'float32'</span>)/<span class="number">255</span>, label.astype(<span class="string">'float32'</span>)</span><br><span class="line">mnist_train,mnist_test  = load_data_fashion_mnist(batch_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们先使用Flatten层将输入数据转成batch_size的矩阵?</span></span><br><span class="line"><span class="comment"># 然后输入到10个输出节点的全连接层。</span></span><br><span class="line"><span class="comment"># 照例我们不需要制定每层输入的大小，gluon会做自动推导。</span></span><br><span class="line">net = gluon.nn.Sequential()</span><br><span class="line"><span class="keyword">with</span> net.name_scope():</span><br><span class="line">    net.add(gluon.nn.Flatten())</span><br><span class="line">    net.add(gluon.nn.Dense(<span class="number">10</span>))</span><br><span class="line">net.initialize()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后通过比较真实标号我们可以计算精度：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accuracy</span><span class="params">(output, label)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> nd.mean(output.argmax(axis=<span class="number">1</span>)==label).asscalar()</span><br><span class="line"></span><br><span class="line"><span class="comment">#我们可以评估一个模型在这个数据上的精度。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_accuracy</span><span class="params">(data_iterator, net)</span>:</span></span><br><span class="line">    acc = <span class="number">0.</span></span><br><span class="line">    <span class="keyword">for</span> data, label <span class="keyword">in</span> data_iterator:</span><br><span class="line">        output = net(data)</span><br><span class="line">        acc += accuracy(output, label)</span><br><span class="line">    <span class="keyword">return</span> acc / len(data_iterator)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Softmax和交叉熵损失函数</span></span><br><span class="line"><span class="comment">#如果你做了上一章的练习，那么你可能意识到了分开定义Softmax和交叉熵会有数值不稳定性</span></span><br><span class="line">softmax_cross_entropy = gluon.loss.SoftmaxCrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 优化</span></span><br><span class="line">trainer = gluon.Trainer(net.collect_params(), <span class="string">'sgd'</span>, &#123;<span class="string">'learning_rate'</span>: <span class="number">0.1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 训练</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    train_loss = <span class="number">0.</span></span><br><span class="line">    train_acc = <span class="number">0.</span></span><br><span class="line">    <span class="keyword">for</span> data, label <span class="keyword">in</span> mnist_train:</span><br><span class="line">        <span class="keyword">with</span> autograd.record():</span><br><span class="line">            output = net(data)</span><br><span class="line">            loss = softmax_cross_entropy(output, label)</span><br><span class="line">        loss.backward()</span><br><span class="line">        trainer.step(batch_size)</span><br><span class="line"></span><br><span class="line">        train_loss += nd.mean(loss).asscalar()</span><br><span class="line">        train_acc += accuracy(output, label)</span><br><span class="line">    test_acc = evaluate_accuracy(mnist_test, net)</span><br><span class="line">    print(<span class="string">"Epoch %d. Loss: %f, Train acc %f, Test acc %f"</span> % (</span><br><span class="line">        epoch, train_loss/len(mnist_train), train_acc/len(mnist_train), test_acc))</span><br></pre></td></tr></table></figure>
<h2 id="2-1-_u4ECE0_u5F00_u59CB_u591A_u5C42_u611F_u77E5_u673A"><a href="#2-1-_u4ECE0_u5F00_u59CB_u591A_u5C42_u611F_u77E5_u673A" class="headerlink" title="2.1.从0开始多层感知机"></a>2.1.从0开始多层感知机</h2><p>前面我们介绍了包括线性回归和多类逻辑回归的数个模型，它们的一个共同点是全是只含有一个输入层，一个输出层。这一节我们将介绍多层神经网络，就是包含至少一个隐含层的网络。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> ndarray <span class="keyword">as</span> nd</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> autograd</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里我们用MNIST分类数字</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data_fashion_mnist</span><span class="params">(batch_size, resize=None)</span>:</span></span><br><span class="line">    <span class="string">"""download the fashion mnist dataest and then load into memory"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transform_mnist</span><span class="params">(data, label)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> resize:</span><br><span class="line">            <span class="comment"># resize to resize x resize</span></span><br><span class="line">            data = image.imresize(data, resize, resize)</span><br><span class="line">        <span class="comment"># change data from height x weight x channel to channel x height x weight</span></span><br><span class="line">        <span class="keyword">return</span> nd.transpose(data.astype(<span class="string">'float32'</span>), (<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>))/<span class="number">255</span>, label.astype(<span class="string">'float32'</span>)</span><br><span class="line">    mnist_train = gluon.data.vision.MNIST(train=<span class="keyword">True</span>, transform=transform_mnist)</span><br><span class="line">    mnist_test = gluon.data.vision.MNIST(train=<span class="keyword">False</span>, transform=transform_mnist)</span><br><span class="line">    train_data = gluon.data.DataLoader(mnist_train, batch_size, shuffle=<span class="keyword">True</span>)</span><br><span class="line">    test_data = gluon.data.DataLoader(mnist_test, batch_size, shuffle=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">return</span> (train_data, test_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">256</span></span><br><span class="line">train_data, test_data = load_data_fashion_mnist(batch_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里我们定义一个只有一个隐含层的模型，这个隐含层输出256个节点。</span></span><br><span class="line">num_inputs = <span class="number">28</span>*<span class="number">28</span></span><br><span class="line">num_outputs = <span class="number">10</span></span><br><span class="line">num_hidden = <span class="number">256</span></span><br><span class="line">weight_scale = <span class="number">.01</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##定义两层</span></span><br><span class="line">W1 = nd.random_normal(shape=(num_inputs, num_hidden), scale=weight_scale)</span><br><span class="line">b1 = nd.zeros(num_hidden)</span><br><span class="line">W2 = nd.random_normal(shape=(num_hidden, num_outputs), scale=weight_scale)</span><br><span class="line">b2 = nd.zeros(num_outputs)</span><br><span class="line"></span><br><span class="line">params = [W1, b1, W2, b2]</span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">    param.attach_grad()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 激活函数</span></span><br><span class="line"><span class="comment">#如果我们就用线性操作符来构造多层神经网络，那么整个模型仍然只是一个线性函数。</span></span><br><span class="line"><span class="comment"># 为了让我们的模型可以拟合非线性函数，我们需要在层之间插入非线性的激活函数。这里我们使用ReLU</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">relu</span><span class="params">(X)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> nd.maximum(X, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 定义模型</span></span><br><span class="line"><span class="comment">#我们的模型就是将层（全连接）和激活函数（Relu）串起来：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">net</span><span class="params">(X)</span>:</span></span><br><span class="line">    X = X.reshape((-<span class="number">1</span>, num_inputs))</span><br><span class="line">    h = relu(nd.dot(X, W1) + b1)</span><br><span class="line">    output = nd.dot(h, W2) + b2</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="comment">## Softmax和交叉熵损失函数</span></span><br><span class="line"><span class="comment">#在多类Logistic回归里我们提到分开实现Softmax和交叉熵损失函数可能导致数值不稳定。</span></span><br><span class="line"><span class="comment"># 这里我们直接使用Gluon提供的函数</span></span><br><span class="line">softmax_cross_entropy = gluon.loss.SoftmaxCrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后通过比较真实标号我们可以计算精度：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accuracy</span><span class="params">(output, label)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> nd.mean(output.argmax(axis=<span class="number">1</span>)==label).asscalar()</span><br><span class="line"></span><br><span class="line"><span class="comment">#我们可以评估一个模型在这个数据上的精度。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_accuracy</span><span class="params">(data_iterator, net)</span>:</span></span><br><span class="line">    acc = <span class="number">0.</span></span><br><span class="line">    <span class="keyword">for</span> data, label <span class="keyword">in</span> data_iterator:</span><br><span class="line">        output = net(data)</span><br><span class="line">        acc += accuracy(output, label)</span><br><span class="line">    <span class="keyword">return</span> acc / len(data_iterator)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SGD</span><span class="params">(params, lr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        param[:] = param - lr * param.grad</span><br><span class="line"></span><br><span class="line"><span class="comment">## 训练</span></span><br><span class="line">learning_rate = <span class="number">.5</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    train_loss = <span class="number">0.</span></span><br><span class="line">    train_acc = <span class="number">0.</span></span><br><span class="line">    <span class="keyword">for</span> data, label <span class="keyword">in</span> train_data:</span><br><span class="line">        <span class="keyword">with</span> autograd.record():</span><br><span class="line">            output = net(data)</span><br><span class="line">            loss = softmax_cross_entropy(output, label)</span><br><span class="line">        loss.backward()</span><br><span class="line">        SGD(params, learning_rate/batch_size)</span><br><span class="line"></span><br><span class="line">        train_loss += nd.mean(loss).asscalar()</span><br><span class="line">        train_acc += accuracy(output, label)</span><br><span class="line"></span><br><span class="line">    test_acc = evaluate_accuracy(test_data, net)</span><br><span class="line">    print(<span class="string">"Epoch %d. Loss: %f, Train acc %f, Test acc %f"</span> % (</span><br><span class="line">        epoch, train_loss/len(train_data),</span><br><span class="line">        train_acc/len(train_data), test_acc))</span><br></pre></td></tr></table></figure></p>
<p>可以看到，加入一个隐含层后我们将精度提升了不少。</p>
<p> 练习</p>
<ul>
<li>我们使用了 <code>weight_scale</code> 来控制权重的初始化值大小，增大或者变小这个值会怎么样？</li>
<li>尝试改变 <code>num_hiddens</code> 来控制模型的复杂度</li>
<li>尝试加入一个新的隐含层<br>注意：针对不同的数据，模型可能并非越复杂越好<br>测试结果：加大num_hiddens得到了更好的结果，添加隐藏层后更加容易过拟合</li>
</ul>
<h2 id="2-2-_u4F7F_u7528Gluon_u591A_u5C42_u611F_u77E5_u673A"><a href="#2-2-_u4F7F_u7528Gluon_u591A_u5C42_u611F_u77E5_u673A" class="headerlink" title="2.2.使用Gluon多层感知机"></a>2.2.使用Gluon多层感知机</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> ndarray <span class="keyword">as</span> nd</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> autograd</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> image</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里我们用MNIST分类数字</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data_fashion_mnist</span><span class="params">(batch_size, resize=None)</span>:</span></span><br><span class="line">    <span class="string">"""download the fashion mnist dataest and then load into memory"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transform_mnist</span><span class="params">(data, label)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> resize:</span><br><span class="line">            <span class="comment"># resize to resize x resize</span></span><br><span class="line">            data = image.imresize(data, resize, resize)</span><br><span class="line">        <span class="comment"># change data from height x weight x channel to channel x height x weight</span></span><br><span class="line">        <span class="keyword">return</span> nd.transpose(data.astype(<span class="string">'float32'</span>), (<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>))/<span class="number">255</span>, label.astype(<span class="string">'float32'</span>)</span><br><span class="line">    mnist_train = gluon.data.vision.MNIST(train=<span class="keyword">True</span>, transform=transform_mnist)</span><br><span class="line">    mnist_test = gluon.data.vision.MNIST(train=<span class="keyword">False</span>, transform=transform_mnist)</span><br><span class="line">    train_data = gluon.data.DataLoader(mnist_train, batch_size, shuffle=<span class="keyword">True</span>)</span><br><span class="line">    test_data = gluon.data.DataLoader(mnist_test, batch_size, shuffle=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">return</span> (train_data, test_data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accuracy</span><span class="params">(output, label)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> nd.mean(output.argmax(axis=<span class="number">1</span>)==label).asscalar()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_accuracy</span><span class="params">(data_iterator, net)</span>:</span></span><br><span class="line">    acc = <span class="number">0.</span></span><br><span class="line">    <span class="keyword">for</span> data, label <span class="keyword">in</span> data_iterator:</span><br><span class="line">        output = net(data)</span><br><span class="line">        acc += accuracy(output, label)</span><br><span class="line">    <span class="keyword">return</span> acc / len(data_iterator)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 定义模型</span></span><br><span class="line"><span class="comment">#唯一的区别在这里，我们加了一行进来。</span></span><br><span class="line">net = gluon.nn.Sequential()</span><br><span class="line"><span class="keyword">with</span> net.name_scope():</span><br><span class="line">    net.add(gluon.nn.Flatten())</span><br><span class="line">    net.add(gluon.nn.Dense(<span class="number">256</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">    net.add(gluon.nn.Dense(<span class="number">10</span>))</span><br><span class="line">net.initialize()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 读取数据并训练</span></span><br><span class="line">batch_size = <span class="number">256</span></span><br><span class="line">train_data, test_data = load_data_fashion_mnist(batch_size)</span><br><span class="line"></span><br><span class="line">softmax_cross_entropy = gluon.loss.SoftmaxCrossEntropyLoss()</span><br><span class="line">trainer = gluon.Trainer(net.collect_params(), <span class="string">'sgd'</span>, &#123;<span class="string">'learning_rate'</span>: <span class="number">0.5</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    train_loss = <span class="number">0.</span></span><br><span class="line">    train_acc = <span class="number">0.</span></span><br><span class="line">    <span class="keyword">for</span> data, label <span class="keyword">in</span> train_data:</span><br><span class="line">        <span class="keyword">with</span> autograd.record():</span><br><span class="line">            output = net(data)</span><br><span class="line">            loss = softmax_cross_entropy(output, label)</span><br><span class="line">        loss.backward()</span><br><span class="line">        trainer.step(batch_size)</span><br><span class="line"></span><br><span class="line">        train_loss += nd.mean(loss).asscalar()</span><br><span class="line">        train_acc += accuracy(output, label)</span><br><span class="line"></span><br><span class="line">    test_acc = evaluate_accuracy(test_data, net)</span><br><span class="line">    print(<span class="string">"Epoch %d. Loss: %f, Train acc %f, Test acc %f"</span> % (</span><br><span class="line">        epoch, train_loss/len(train_data), train_acc/len(train_data), test_acc))</span><br></pre></td></tr></table></figure>
<p>通过Gluon我们可以更方便地构造多层神经网络。<br> 练习</p>
<ul>
<li>尝试多加入几个隐含层，对比从0开始的实现。</li>
<li>尝试使用一个另外的激活函数，可以使用<code>help(nd.Activation)</code>或者<a href="https://mxnet.apache.org/api/python/ndarray.html#mxnet.ndarray.Activation" target="_blank" rel="external">线上文档</a>查看提供的选项。</li>
</ul>
<h2 id="2-3-_u4ECE0_u5F00_u59CB_u6B63_u5219_u5316"><a href="#2-3-_u4ECE0_u5F00_u59CB_u6B63_u5219_u5316" class="headerlink" title="2.3.从0开始正则化"></a>2.3.从0开始正则化</h2><p>本章从0开始介绍如何的正则化来应对过拟合问题。<br>L2范数正则化<br>这里我们引入$L_2$范数正则化。不同于在训练时仅仅最小化损失函数(Loss)，我们在训练时其实在最小化<br><img src="/img/deeplearn/img1.png" alt="img1"><br>直观上，L2范数正则化试图惩罚较大绝对值的参数值。训练模型时，如果λ=0则没有正则化，需要注意的是，测试模型时，λ必须为0。</p>
<p>高维线性回归<br>我们使用高维线性回归为例来引入一个过拟合问题。<br><img src="/img/deeplearn/img2.png" alt="img2"><br>需要注意的是，我们用以上相同的数据生成函数来生成训练数据集和测试数据集。为了观察过拟合，我们特意把训练数据样本数设低，例如n=20，同时把维度升高，例如p=200.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> ndarray <span class="keyword">as</span> nd</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> autograd</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"></span><br><span class="line">num_train = <span class="number">20</span></span><br><span class="line">num_test = <span class="number">100</span></span><br><span class="line">num_inputs = <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 生成数据集</span></span><br><span class="line"><span class="comment"># 这里定义模型真实参数。</span></span><br><span class="line">true_w = nd.ones((num_inputs, <span class="number">1</span>)) * <span class="number">0.01</span></span><br><span class="line">true_b = <span class="number">0.05</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#我们接着生成训练和测试数据集。</span></span><br><span class="line">X = nd.random.normal(shape=(num_train + num_test, num_inputs))</span><br><span class="line">y = nd.dot(X, true_w)</span><br><span class="line">y += <span class="number">.01</span> * nd.random.normal(shape=y.shape)</span><br><span class="line"></span><br><span class="line">X_train, X_test = X[:num_train, :], X[num_train:, :]</span><br><span class="line">y_train, y_test = y[:num_train], y[num_train:]</span><br><span class="line"></span><br><span class="line"><span class="comment">#当我们开始训练神经网络的时候，我们需要不断读取数据块。</span></span><br><span class="line"><span class="comment"># 这里我们定义一个函数它每次返回batch_size个随机的样本和对应的目标。</span></span><br><span class="line"><span class="comment"># 我们通过python的yield来构造一个迭代器。</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">batch_size = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_iter</span><span class="params">(num_examples)</span>:</span></span><br><span class="line">    idx = list(range(num_examples))</span><br><span class="line">    random.shuffle(idx)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, num_examples, batch_size):</span><br><span class="line">        j = nd.array(idx[i:min(i+batch_size,num_examples)])</span><br><span class="line">        <span class="keyword">yield</span> X.take(j), y.take(j)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 初始化模型参数</span></span><br><span class="line"><span class="comment"># 下面我们随机初始化模型参数。</span></span><br><span class="line"><span class="comment"># 之后训练时我们需要对这些参数求导来更新它们的值，所以我们需要创建它们的梯度。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_params</span><span class="params">()</span>:</span></span><br><span class="line">    w = nd.random.normal(shape=(num_inputs, <span class="number">1</span>))*<span class="number">0.1</span></span><br><span class="line">    b = nd.zeros((<span class="number">1</span>,))</span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> (w, b):</span><br><span class="line">        param.attach_grad()</span><br><span class="line">    <span class="keyword">return</span> (w, b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#下面我们定义L2正则化。注意有些时候大家对偏移加罚，有时候不加罚。</span></span><br><span class="line"><span class="comment"># 通常结果上两者区别不大。这里我们演示对偏移也加罚的情况：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">L2_penalty</span><span class="params">(w, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (w**<span class="number">2</span>).sum() + b**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 定义训练和测试</span></span><br><span class="line"><span class="comment">#下面我们定义剩下的所需要的函数。这个跟之前的教程大致一样，</span></span><br><span class="line"><span class="comment"># 主要是区别在于计算`loss`的时候我们加上了L2正则化，以及我们将训练和测试损失都画了出来。</span></span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line">mpl.rcParams[<span class="string">'figure.dpi'</span>]= <span class="number">120</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">net</span><span class="params">(X, lambd, w, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> nd.dot(X, w) + b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square_loss</span><span class="params">(yhat, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (yhat - y.reshape(yhat.shape)) ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SGD</span><span class="params">(params, lr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        param[:] = param - lr * param.grad</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(params, X, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> square_loss(net(X, <span class="number">0</span>, *params), y).mean().asscalar()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(lambd)</span>:</span></span><br><span class="line">    epochs = <span class="number">10</span></span><br><span class="line">    learning_rate = <span class="number">0.002</span></span><br><span class="line">    params = get_params()</span><br><span class="line">    train_loss = []</span><br><span class="line">    test_loss = []</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(epochs):</span><br><span class="line">        <span class="keyword">for</span> data, label <span class="keyword">in</span> data_iter(num_train):</span><br><span class="line">            <span class="keyword">with</span> autograd.record():</span><br><span class="line">                output = net(data, lambd, *params)</span><br><span class="line">                loss = square_loss(<span class="comment">##loss加上了正则化</span></span><br><span class="line">                    output, label) + lambd * L2_penalty(*params)</span><br><span class="line">            loss.backward()</span><br><span class="line">            SGD(params, learning_rate)</span><br><span class="line">        train_loss.append(test(params, X_train, y_train))</span><br><span class="line">        test_loss.append(test(params, X_test, y_test))</span><br><span class="line">    plt.plot(train_loss)</span><br><span class="line">    plt.plot(test_loss)</span><br><span class="line">    plt.legend([<span class="string">'train'</span>, <span class="string">'test'</span>])</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'learned w[:10]:'</span>, params[<span class="number">0</span>][:<span class="number">10</span>], <span class="string">'learend b:'</span>, params[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">##过拟合</span></span><br><span class="line"><span class="comment"># train(0)</span></span><br><span class="line"><span class="comment">##使用正则</span></span><br><span class="line">train(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p>
<p>过拟合<br><img src="/img/deeplearn/img3.png" alt="img3"><br>使用正则<br><img src="/img/deeplearn/img4.png" alt="img4"></p>
<h2 id="2-3-_u4F7F_u7528Gluon_u6B63_u5219_u5316"><a href="#2-3-_u4F7F_u7528Gluon_u6B63_u5219_u5316" class="headerlink" title="2.3.使用Gluon正则化"></a>2.3.使用Gluon正则化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> ndarray <span class="keyword">as</span> nd</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> autograd</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"></span><br><span class="line">num_train = <span class="number">20</span></span><br><span class="line">num_test = <span class="number">100</span></span><br><span class="line">num_inputs = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">true_w = nd.ones((num_inputs, <span class="number">1</span>)) * <span class="number">0.01</span></span><br><span class="line">true_b = <span class="number">0.05</span></span><br><span class="line">X = nd.random.normal(shape=(num_train + num_test, num_inputs))</span><br><span class="line">y = nd.dot(X, true_w)</span><br><span class="line">y += <span class="number">.01</span> * nd.random.normal(shape=y.shape)</span><br><span class="line">X_train, X_test = X[:num_train, :], X[num_train:, :]</span><br><span class="line">y_train, y_test = y[:num_train], y[num_train:]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 定义训练和测试</span></span><br><span class="line"><span class="comment">#跟前一样定义训练模块。你也许发现了主要区别，`Trainer`</span></span><br><span class="line"><span class="comment">#有一个新参数</span></span><br><span class="line"><span class="comment">#wd。我们通过优化算法的wd参数(weightdecay)实现对模型的正则化。这相当于L2范数正则化。</span></span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"></span><br><span class="line">mpl.rcParams[<span class="string">'figure.dpi'</span>] = <span class="number">120</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">1</span></span><br><span class="line">dataset_train = gluon.data.ArrayDataset(X_train, y_train)</span><br><span class="line">data_iter_train = gluon.data.DataLoader(dataset_train, batch_size, shuffle=<span class="keyword">True</span>)</span><br><span class="line">square_loss = gluon.loss.L2Loss()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(net, X, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> square_loss(net(X), y).mean().asscalar()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(weight_decay)</span>:</span></span><br><span class="line">    learning_rate = <span class="number">0.005</span></span><br><span class="line">    epochs = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    net = gluon.nn.Sequential()</span><br><span class="line">    <span class="keyword">with</span> net.name_scope():</span><br><span class="line">        net.add(gluon.nn.Dense(<span class="number">1</span>))</span><br><span class="line">    net.initialize()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注意到这里 'wd'</span></span><br><span class="line">    trainer = gluon.Trainer(net.collect_params(), <span class="string">'sgd'</span>, &#123;</span><br><span class="line">        <span class="string">'learning_rate'</span>: learning_rate, <span class="string">'wd'</span>: weight_decay&#125;)<span class="comment">###参数wd</span></span><br><span class="line"></span><br><span class="line">    train_loss = []</span><br><span class="line">    test_loss = []</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(epochs):</span><br><span class="line">        <span class="keyword">for</span> data, label <span class="keyword">in</span> data_iter_train:</span><br><span class="line">            <span class="keyword">with</span> autograd.record():</span><br><span class="line">                output = net(data)</span><br><span class="line">                loss = square_loss(output, label)</span><br><span class="line">            loss.backward()</span><br><span class="line">            trainer.step(batch_size)</span><br><span class="line">        train_loss.append(test(net, X_train, y_train))</span><br><span class="line">        test_loss.append(test(net, X_test, y_test))</span><br><span class="line">    plt.plot(train_loss)</span><br><span class="line">    plt.plot(test_loss)</span><br><span class="line">    plt.legend([<span class="string">'train'</span>, <span class="string">'test'</span>])</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="string">'learned w[:10]:'</span>, net[<span class="number">0</span>].weight.data()[:, :<span class="number">10</span>],</span><br><span class="line">            <span class="string">'learned b:'</span>, net[<span class="number">0</span>].bias.data())</span><br><span class="line"></span><br><span class="line">train(<span class="number">0</span>)</span><br><span class="line">train(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<h2 id="2-4-_u4F7F_u7528GPU_u6765_u8BA1_u7B97"><a href="#2-4-_u4F7F_u7528GPU_u6765_u8BA1_u7B97" class="headerlink" title="2.4.使用GPU来计算"></a>2.4.使用GPU来计算</h2><p>MXNet使用Context来指定使用哪个设备来存储和计算。默认会将数据开在主内存，然后利用CPU来计算，这个由<code>mx.cpu()</code>来表示。GPU则由<code>mx.gpu()</code>来表示。注意<code>mx.cpu()</code>表示所有的物理CPU和内存，意味着计算上会尽量使用多有的CPU核。但<code>mx.gpu()</code>只代表一块显卡和其对应的显卡内存。如果有多块GPU，我们用<code>mx.gpu(i)</code>来表示第<em>i</em>块GPU（<em>i</em>从0开始）。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> [mx.cpu(), mx.gpu(), mx.gpu(<span class="number">1</span>)]  <span class="comment">#[cpu(0), gpu(0), gpu(1)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#每个NDArray都有一个`context`属性来表示它存在哪个设备上，默认会是`cpu`。</span></span><br><span class="line"><span class="comment"># 这是为什么前面每次我们打印NDArray的时候都会看到`@cpu(0)`这个标识。</span></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line">x = nd.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="keyword">print</span> x.context  <span class="comment">#cpu(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### GPU上创建内存</span></span><br><span class="line"><span class="comment">#我们可以在创建的时候指定创建在哪个设备上</span></span><br><span class="line"><span class="comment"># （如果GPU不能用或者没有装MXNet GPU版本，这里会有error）：</span></span><br><span class="line">a = nd.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], ctx=mx.gpu())</span><br><span class="line">b = nd.zeros((<span class="number">3</span>,<span class="number">2</span>), ctx=mx.gpu())</span><br><span class="line">c = nd.random.uniform(shape=(<span class="number">2</span>,<span class="number">3</span>), ctx=mx.gpu())</span><br><span class="line"><span class="keyword">print</span> (a,b,c) <span class="comment">##a,b,c都在gpu上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#我们可以通过`copyto`和`as_in_context`来在设备直接传输数据。</span></span><br><span class="line"></span><br><span class="line">y = x.copyto(mx.gpu())</span><br><span class="line">z = x.as_in_context(mx.gpu())</span><br><span class="line"><span class="keyword">print</span> (y, z)</span><br><span class="line"></span><br><span class="line"><span class="comment">#这两个函数的主要区别是，如果源和目标的context一致（都在gpu上）</span></span><br><span class="line"><span class="comment"># `as_in_context`不复制，而`copyto`总是会新建内存：</span></span><br><span class="line">yy = y.as_in_context(mx.gpu())</span><br><span class="line">zz = z.copyto(mx.gpu())</span><br><span class="line"><span class="keyword">print</span> (yy <span class="keyword">is</span> y, zz <span class="keyword">is</span> z) <span class="comment">#(True, False)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算会在数据的`context`上执行。所以为了使用GPU，我们只需要事先将数据放在上面就行了。</span></span><br><span class="line"><span class="comment"># 结果会自动保存在对应的设备上：</span></span><br><span class="line"><span class="keyword">print</span> nd.exp(z + <span class="number">2</span>) * y <span class="comment">##gpu上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意所有计算要求输入数据在同一个设备上。不一致的时候系统不进行自动复制。</span></span><br><span class="line"><span class="comment"># 这个设计的目的是因为设备之间的数据交互通常比较昂贵，</span></span><br><span class="line"><span class="comment"># 我们希望用户确切的知道数据放在哪里，而不是隐藏这个细节。</span></span><br><span class="line"><span class="comment"># 下面代码尝试将CPU上`x`和GPU上的`y`做运算。</span></span><br><span class="line"><span class="comment"># #异常require all inputs live on the same context.</span></span><br><span class="line"><span class="comment">#     # But the first argument is on cpu(0) while the 2-th argument is on gpu(0)</span></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"><span class="comment">#     x + y</span></span><br><span class="line"><span class="comment"># except mx.MXNetError as err:</span></span><br><span class="line"><span class="comment">#     sys.stderr.write(str(err))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 默认会复制回CPU的操作</span></span><br><span class="line"><span class="comment">#如果某个操作需要将NDArray里面的内容转出来，例如打印或变成numpy格式，</span></span><br><span class="line"><span class="comment"># 如果需要的话系统都会自动将数据copy到主内存。</span></span><br><span class="line">print(y)</span><br><span class="line">print(y.asnumpy())</span><br><span class="line">print(y.sum().asscalar())</span><br><span class="line"></span><br><span class="line"><span class="comment">## Gluon的GPU计算</span></span><br><span class="line"><span class="comment">#同NDArray类似，Gluon的大部分函数可以通过`ctx`指定设备。</span></span><br><span class="line"><span class="comment"># 下面代码将模型参数初始化在GPU上：</span></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line">net = gluon.nn.Sequential()</span><br><span class="line">net.add(gluon.nn.Dense(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">net.initialize(ctx=mx.gpu())  <span class="comment">####gpu,不给默认cpu</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入GPU上的数据，会在GPU上计算结果</span></span><br><span class="line">data = nd.random.uniform(shape=[<span class="number">3</span>,<span class="number">2</span>], ctx=mx.gpu())</span><br><span class="line"><span class="keyword">print</span> net(data)  <span class="comment">##gpu(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#确认下权重：</span></span><br><span class="line"><span class="keyword">print</span> net[<span class="number">0</span>].weight.data()</span><br></pre></td></tr></table></figure>
<p>通过<code>context</code>我们可以很容易在不同的设备上计算。<br>练习</p>
<ul>
<li>试试大一点的计算任务，例如大矩阵的乘法，看看CPU和GPU的速度区别。如果是计算量很小的任务呢？</li>
<li>试试CPU和GPU之间传递数据的速度</li>
<li>GPU上如何读写模型呢？</li>
</ul>
<h2 id="2-5-_u4ECE0_u5F00_u59CB_u5377_u79EF_u795E_u7ECF_u7F51_u7EDC"><a href="#2-5-_u4ECE0_u5F00_u59CB_u5377_u79EF_u795E_u7ECF_u7F51_u7EDC" class="headerlink" title="2.5.从0开始卷积神经网络"></a>2.5.从0开始卷积神经网络</h2><p>前面讲的把图片拉成了一个向量，行相关像素间信息保留了，但是列信息丢失啦，本节用卷积。<br>之前的教程里，在输入神经网络前我们将输入图片直接转成了向量。这样做有两个不好的地方：</p>
<ul>
<li>在图片里相近的像素在向量表示里可能很远，从而模型很难捕获他们的空间关系。</li>
<li>对于大图片输入，模型可能会很大。例如输入是256x256x3的照片（仍然远比手机拍的小），输入层是1000，那么这一层的模型大小是将近1GB.</li>
</ul>
<p>这一节我们介绍卷积神经网络，其有效了解决了上述两个问题。</p>
<p>卷积神经网络是指主要由卷积层构成的神经网络。<br>卷积层跟前面的全连接层类似，但输入和权重不是做简单的矩阵乘法，而是使用每次作用在一个窗口上的卷积。下图演示了输入是一个4x4矩阵，使用一个3x3的权重，计算得到2x2结果的过程。每次我们采样一个跟权重一样大小的窗口，让它跟权重做按元素的乘法然后相加。通常我们也是用卷积的术语把这个权重叫kernel或者filter。<br><img src="/img/deeplearn/img4.gif" alt="img4"><br>我们可以控制如何移动窗口，和在边缘的时候如何填充窗口。下图演示了<code>stride=2</code>和<code>pad=1</code>。<br><img src="/img/deeplearn/img5.gif" alt="img5"><br>utils.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> ndarray <span class="keyword">as</span> nd</span><br><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SGD</span><span class="params">(params, lr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        param[:] = param - lr * param.grad</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accuracy</span><span class="params">(output, label)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> nd.mean(output.argmax(axis=<span class="number">1</span>)==label).asscalar()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_accuracy</span><span class="params">(data_iterator, net, ctx=mx.cpu<span class="params">()</span>)</span>:</span></span><br><span class="line">    acc = <span class="number">0.</span></span><br><span class="line">    <span class="keyword">for</span> data, label <span class="keyword">in</span> data_iterator:</span><br><span class="line">        output = net(data.as_in_context(ctx))</span><br><span class="line">        acc += accuracy(output, label.as_in_context(ctx))</span><br><span class="line">    <span class="keyword">return</span> acc / len(data_iterator)</span><br></pre></td></tr></table></figure></p>
<p>cnnscratch.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> autograd</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入输出数据格式是 batch x channel x height x width，这里batch和channel都是1</span></span><br><span class="line"><span class="comment"># 权重格式是 output_channels x in_channels x height x width，这里input_filter和output_filter都是1。</span></span><br><span class="line">w = nd.arange(<span class="number">4</span>).reshape((<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">b = nd.array([<span class="number">1</span>])</span><br><span class="line">data = nd.arange(<span class="number">9</span>).reshape((<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment">## kernel为后面两个维度大小 这里是2x2</span></span><br><span class="line">out = nd.Convolution(data, w, b, kernel=w.shape[<span class="number">2</span>:], num_filter=w.shape[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">print(<span class="string">'input:'</span>, data, <span class="string">'\n\nweight:'</span>, w, <span class="string">'\n\nbias:'</span>, b, <span class="string">'\n\noutput:'</span>, out)</span><br><span class="line"><span class="comment">## input: [[[[ 0.  1.  2.][ 3.  4.  5.][ 6.  7.  8.]]]]</span></span><br><span class="line"><span class="comment">## weight:[[[[ 0.  1.][ 2.  3.]]]] bias:', [ 1.]</span></span><br><span class="line"><span class="comment">## output:', [[[[ 20.  26.][ 38.  44.]]]]</span></span><br><span class="line"><span class="comment">##计算： 20=0x0+1x1+3x2+4x3+b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们可以控制如何移动窗口，和在边缘的时候如何填充窗口。如stride=2和pad=1。</span></span><br><span class="line"><span class="comment"># stride=(2,2)每次移动两格  pad=(1,1)边缘补充0</span></span><br><span class="line">out = nd.Convolution(data, w, b, kernel=w.shape[<span class="number">2</span>:], num_filter=w.shape[<span class="number">1</span>],</span><br><span class="line">                     stride=(<span class="number">2</span>,<span class="number">2</span>), pad=(<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">print(<span class="string">'input:'</span>, data, <span class="string">'\n\nweight:'</span>, w, <span class="string">'\n\nbias:'</span>, b, <span class="string">'\n\noutput:'</span>, out)</span><br><span class="line"><span class="comment">#输出:[[[[  1.   9.] [ 22.  44.]]]] 因为周围填充了0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当输入数据有多个通道的时候，每个通道会有对应的权重，然后会对每个通道做卷积之后在通道之间求和</span></span><br><span class="line"><span class="comment">#两个通道情况</span></span><br><span class="line">w = nd.arange(<span class="number">8</span>).reshape((<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">data = nd.arange(<span class="number">18</span>).reshape((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">out = nd.Convolution(data, w, b, kernel=w.shape[<span class="number">2</span>:], num_filter=w.shape[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">'input:'</span>, data, <span class="string">'\n\nweight:'</span>, w, <span class="string">'\n\nbias:'</span>, b, <span class="string">'\n\noutput:'</span>, out)</span><br><span class="line"><span class="comment">## ('input:',</span></span><br><span class="line"><span class="comment"># [[[[  0.   1.   2.][  3.   4.   5.][  6.   7.   8.]]</span></span><br><span class="line"><span class="comment">#   [[  9.  10.  11.][ 12.  13.  14.][ 15.  16.  17.]]]]</span></span><br><span class="line"><span class="comment"># weight:[[[[ 0.  1.][ 2.  3.]]  [[ 4.  5.] [ 6.  7.]]]]</span></span><br><span class="line"><span class="comment"># bias:[ 1.]</span></span><br><span class="line"><span class="comment">#output [[[[ 269.  297.] [ 353.  381.]]]]</span></span><br><span class="line"><span class="comment"># 输出为两个通道卷积之后取和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######### 下一层输入需要?</span></span><br><span class="line"><span class="comment"># 当输入需要多通道时，每个输出通道有对应权重，然后每个通道上做卷积。</span></span><br><span class="line">w = nd.arange(<span class="number">16</span>).reshape((<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">data = nd.arange(<span class="number">18</span>).reshape((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">b = nd.array([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">out = nd.Convolution(data, w, b, kernel=w.shape[<span class="number">2</span>:], num_filter=w.shape[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">'input:'</span>, data, <span class="string">'\n\nweight:'</span>, w, <span class="string">'\n\nbias:'</span>, b, <span class="string">'\n\noutput:'</span>, out)</span><br><span class="line"><span class="comment">## input: [[[[  0.   1.   2.][  3.   4.   5.][  6.   7.   8.]]</span></span><br><span class="line"><span class="comment">#           [[  9.  10.  11.][ 12.  13.  14.][ 15.  16.  17.]]]]</span></span><br><span class="line"><span class="comment"># weight: [[[[  0.   1.][  2.   3.]][[  4.   5.][  6.   7.]]]</span></span><br><span class="line"><span class="comment">#          [[[  8.   9.][ 10.  11.]][[ 12.  13.][ 14.  15.]]]]</span></span><br><span class="line"><span class="comment"># bias: [ 1.  2.]</span></span><br><span class="line"><span class="comment"># output: [[[[  269.   297.][  353.   381.]]</span></span><br><span class="line"><span class="comment">#          [[  686.   778.] [  962.  1054.]]]]</span></span><br><span class="line"><span class="comment"># 输出为 多个输出（这里为2个是不同weight（这里2个）分别与input卷积得到</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 池化层（pooling）</span></span><br><span class="line"><span class="comment"># 因为卷积层每次作用在一个窗口，它对位置很敏感。池化层能够很好的缓解这个问题。</span></span><br><span class="line"><span class="comment"># 它跟卷积类似每次看一个小窗口，然后选出窗口里面最大的元素，或者平均元素作为输出。</span></span><br><span class="line">data = nd.arange(<span class="number">18</span>).reshape((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">max_pool = nd.Pooling(data=data, pool_type=<span class="string">"max"</span>, kernel=(<span class="number">2</span>,<span class="number">2</span>)) <span class="comment">#kernel=(2,2)每次作2x2矩阵</span></span><br><span class="line">avg_pool = nd.Pooling(data=data, pool_type=<span class="string">"avg"</span>, kernel=(<span class="number">2</span>,<span class="number">2</span>)) <span class="comment">#max/avg去最大或者平均</span></span><br><span class="line">print(<span class="string">'data:'</span>, data, <span class="string">'\n\nmax pooling:'</span>, max_pool, <span class="string">'\n\navg pooling:'</span>, avg_pool)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################</span></span><br><span class="line"><span class="comment">#下面我们可以开始使用这些层构建模型了。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data_fashion_mnist</span><span class="params">(batch_size, resize=None)</span>:</span></span><br><span class="line">    <span class="string">"""download the fashion mnist dataest and then load into memory"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transform_mnist</span><span class="params">(data, label)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> resize:</span><br><span class="line">            <span class="comment"># resize to resize x resize</span></span><br><span class="line">            data = image.imresize(data, resize, resize)</span><br><span class="line">        <span class="comment"># change data from height x weight x channel to channel x height x weight</span></span><br><span class="line">        <span class="keyword">return</span> nd.transpose(data.astype(<span class="string">'float32'</span>), (<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>))/<span class="number">255</span>, label.astype(<span class="string">'float32'</span>)</span><br><span class="line">    mnist_train = gluon.data.vision.MNIST(train=<span class="keyword">True</span>, transform=transform_mnist)</span><br><span class="line">    mnist_test = gluon.data.vision.MNIST(train=<span class="keyword">False</span>, transform=transform_mnist)</span><br><span class="line">    train_data = gluon.data.DataLoader(mnist_train, batch_size, shuffle=<span class="keyword">True</span>)</span><br><span class="line">    test_data = gluon.data.DataLoader(mnist_test, batch_size, shuffle=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">return</span> (train_data, test_data)</span><br><span class="line">batch_size = <span class="number">256</span></span><br><span class="line">train_data, test_data = load_data_fashion_mnist(batch_size)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 定义模型</span></span><br><span class="line"><span class="comment"># 因为卷积网络计算比全连接要复杂，这里我们默认使用GPU来计算。</span></span><br><span class="line"><span class="comment"># 如果GPU不能用，默认使用CPU。</span></span><br><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ctx = mx.gpu()</span><br><span class="line">    _ = nd.zeros((<span class="number">1</span>,), ctx=ctx)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    ctx = mx.cpu()</span><br><span class="line"><span class="keyword">print</span> ctx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们使用MNIST常用的LeNet，它有两个卷积层，之后是两个全连接层。</span></span><br><span class="line"><span class="comment"># 注意到我们将权重全部创建在ctx上：</span></span><br><span class="line">weight_scale = <span class="number">.01</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># output channels = 20, kernel = (5,5) ##卷积1</span></span><br><span class="line">W1 = nd.random_normal(shape=(<span class="number">20</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>), scale=weight_scale, ctx=ctx)</span><br><span class="line">b1 = nd.zeros(W1.shape[<span class="number">0</span>], ctx=ctx)</span><br><span class="line"><span class="comment"># output channels = 50, kernel = (3,3)  ##卷积2</span></span><br><span class="line">W2 = nd.random_normal(shape=(<span class="number">50</span>,<span class="number">20</span>,<span class="number">3</span>,<span class="number">3</span>), scale=weight_scale, ctx=ctx)</span><br><span class="line">b2 = nd.zeros(W2.shape[<span class="number">0</span>], ctx=ctx)</span><br><span class="line"><span class="comment"># output dim = 128</span></span><br><span class="line">W3 = nd.random_normal(shape=(<span class="number">1250</span>, <span class="number">128</span>), scale=weight_scale, ctx=ctx)</span><br><span class="line">b3 = nd.zeros(W3.shape[<span class="number">1</span>], ctx=ctx)</span><br><span class="line"><span class="comment"># output dim = 10</span></span><br><span class="line">W4 = nd.random_normal(shape=(W3.shape[<span class="number">1</span>], <span class="number">10</span>), scale=weight_scale, ctx=ctx)</span><br><span class="line">b4 = nd.zeros(W4.shape[<span class="number">1</span>], ctx=ctx)</span><br><span class="line"></span><br><span class="line">params = [W1, b1, W2, b2, W3, b3, W4, b4]</span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">    param.attach_grad()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卷积模块通常是“卷积层-激活层-池化层”。然后转成2D矩阵输出给后面的全连接层。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">net</span><span class="params">(X, verbose=False)</span>:</span></span><br><span class="line">    X = X.as_in_context(W1.context) <span class="comment">########数据都放在与W1相同的设备(cpu/gpu)</span></span><br><span class="line">    <span class="comment"># 第一层卷积</span></span><br><span class="line">    h1_conv = nd.Convolution(data=X, weight=W1, bias=b1, kernel=W1.shape[<span class="number">2</span>:], num_filter=W1.shape[<span class="number">0</span>])</span><br><span class="line">    h1_activation = nd.relu(h1_conv)</span><br><span class="line">    h1 = nd.Pooling(data=h1_activation, pool_type=<span class="string">"max"</span>, kernel=(<span class="number">2</span>,<span class="number">2</span>), stride=(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">    <span class="comment"># 第二层卷积</span></span><br><span class="line">    h2_conv = nd.Convolution(data=h1, weight=W2, bias=b2, kernel=W2.shape[<span class="number">2</span>:], num_filter=W2.shape[<span class="number">0</span>])</span><br><span class="line">    h2_activation = nd.relu(h2_conv)</span><br><span class="line">    h2 = nd.Pooling(data=h2_activation, pool_type=<span class="string">"max"</span>, kernel=(<span class="number">2</span>,<span class="number">2</span>), stride=(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">    h = nd.flatten(h2)</span><br><span class="line">    <span class="comment"># 第一层全连接</span></span><br><span class="line">    h3_linear = nd.dot(h, W3) + b3</span><br><span class="line">    h3 = nd.relu(h3_linear)</span><br><span class="line">    <span class="comment"># 第二层全连接</span></span><br><span class="line">    h4_linear = nd.dot(h3, W4) + b4</span><br><span class="line">    <span class="keyword">if</span> verbose:</span><br><span class="line">        print(<span class="string">'1st conv block:'</span>, h1.shape)</span><br><span class="line">        print(<span class="string">'2nd conv block:'</span>, h2.shape)</span><br><span class="line">        print(<span class="string">'flatten:'</span>, h.shape)</span><br><span class="line">        print(<span class="string">'1st dense:'</span>, h3.shape)</span><br><span class="line">        print(<span class="string">'2nd dense:'</span>, h4_linear.shape)</span><br><span class="line">        print(<span class="string">'output:'</span>, h4_linear)</span><br><span class="line">        <span class="comment"># ('1st conv block:', (256L, 20L, 12L, 12L))</span></span><br><span class="line">        <span class="comment"># ('2nd conv block:', (256L, 50L, 5L, 5L))</span></span><br><span class="line">        <span class="comment"># ('flatten:', (256L, 1250L))</span></span><br><span class="line">        <span class="comment"># ('1st dense:', (256L, 128L))</span></span><br><span class="line">        <span class="comment"># ('2nd dense:', (256L, 10L))</span></span><br><span class="line">        <span class="comment"># ('output:', ##256x10</span></span><br><span class="line">        <span class="comment">#  [[-1.40773540e-04 - 3.10097334e-06   2.64148621e-05..., 1.76987160e-04</span></span><br><span class="line">        <span class="comment">#    7.64008873e-05   9.32873518e-05]...]</span></span><br><span class="line">    <span class="keyword">return</span> h4_linear</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试一下，输出中间结果形状（当然可以直接打印结果)和最终结果。</span></span><br><span class="line"><span class="keyword">for</span> data, _ <span class="keyword">in</span> train_data:</span><br><span class="line">    net(data, verbose=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 训练</span></span><br><span class="line"><span class="comment"># 跟前面没有什么不同的，除了这里我们使用`as_in_context`将`data`和`label`都放置在需要的设备上。</span></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> autograd <span class="keyword">as</span> autograd</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> SGD, accuracy, evaluate_accuracy</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"></span><br><span class="line">softmax_cross_entropy = gluon.loss.SoftmaxCrossEntropyLoss()</span><br><span class="line">learning_rate = <span class="number">.2</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    train_loss = <span class="number">0.</span></span><br><span class="line">    train_acc = <span class="number">0.</span></span><br><span class="line">    <span class="keyword">for</span> data, label <span class="keyword">in</span> train_data:</span><br><span class="line">        label = label.as_in_context(ctx)</span><br><span class="line">        <span class="keyword">with</span> autograd.record():</span><br><span class="line">            output = net(data)</span><br><span class="line">            loss = softmax_cross_entropy(output, label)</span><br><span class="line">        loss.backward()</span><br><span class="line">        SGD(params, learning_rate/batch_size)</span><br><span class="line"></span><br><span class="line">        train_loss += nd.mean(loss).asscalar()</span><br><span class="line">        train_acc += accuracy(output, label)</span><br><span class="line"></span><br><span class="line">    test_acc = evaluate_accuracy(test_data, net, ctx)</span><br><span class="line">    print(<span class="string">"Epoch %d. Loss: %f, Train acc %f, Test acc %f"</span> % (</span><br><span class="line">        epoch, train_loss/len(train_data),</span><br><span class="line">        train_acc/len(train_data), test_acc))</span><br></pre></td></tr></table></figure></p>
<p>结论<br>可以看到卷积神经网络比前面的多层感知的分类精度更好。事实上，如果你看懂了这一章，那你基本知道了计算视觉里最重要的几个想法。LeNet早在90年代就提出来了。不管你相信不相信，如果你5年前懂了这个而且开了家公司，那么你很可能现在已经把公司作价几千万卖个某大公司了。幸运的是，或者不幸的是，现在的算法已经更加高级些了，接下来我们会看到一些更加新的想法。</p>
<p>练习</p>
<ul>
<li>试试改改卷积层设定，例如filter数量，kernel大小</li>
<li>试试把池化层从<code>max</code>改到<code>avg</code></li>
<li>如果你有GPU，那么尝试用CPU来跑一下看看</li>
<li>你可能注意到比前面的多层感知机慢了很多，那么尝试计算下这两个模型分别需要多少浮点计算。例如nxm和mxk的矩阵乘法需要浮点运算2nmk。</li>
</ul>
<h2 id="2-6-_u4F7F_u7528gluon_u5377_u79EF_u795E_u7ECF_u7F51_u7EDC"><a href="#2-6-_u4F7F_u7528gluon_u5377_u79EF_u795E_u7ECF_u7F51_u7EDC" class="headerlink" title="2.6.使用gluon卷积神经网络"></a>2.6.使用gluon卷积神经网络</h2><p>utils.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> autograd</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> image</span><br><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SGD</span><span class="params">(params, lr)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        param[:] = param - lr * param.grad</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accuracy</span><span class="params">(output, label)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> nd.mean(output.argmax(axis=<span class="number">1</span>)==label).asscalar()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_accuracy</span><span class="params">(data_iterator, net, ctx=mx.cpu<span class="params">()</span>)</span>:</span></span><br><span class="line">    acc = <span class="number">0.</span></span><br><span class="line">    <span class="keyword">for</span> data, label <span class="keyword">in</span> data_iterator:</span><br><span class="line">        output = net(data.as_in_context(ctx))</span><br><span class="line">        acc += accuracy(output, label.as_in_context(ctx))</span><br><span class="line">    <span class="keyword">return</span> acc / len(data_iterator)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data_fashion_mnist</span><span class="params">(batch_size, resize=None)</span>:</span></span><br><span class="line">    <span class="string">"""download the fashion mnist dataest and then load into memory"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transform_mnist</span><span class="params">(data, label)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> resize:</span><br><span class="line">            <span class="comment"># resize to resize x resize</span></span><br><span class="line">            data = image.imresize(data, resize, resize)</span><br><span class="line">        <span class="comment"># change data from height x weight x channel to channel x height x weight</span></span><br><span class="line">        <span class="keyword">return</span> nd.transpose(data.astype(<span class="string">'float32'</span>), (<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>))/<span class="number">255</span>, label.astype(<span class="string">'float32'</span>)</span><br><span class="line">    mnist_train = gluon.data.vision.MNIST(</span><br><span class="line">        train=<span class="keyword">True</span>, transform=transform_mnist)</span><br><span class="line">    mnist_test = gluon.data.vision.MNIST(</span><br><span class="line">        train=<span class="keyword">False</span>, transform=transform_mnist)</span><br><span class="line">    train_data = gluon.data.DataLoader(</span><br><span class="line">        mnist_train, batch_size, shuffle=<span class="keyword">True</span>)</span><br><span class="line">    test_data = gluon.data.DataLoader(</span><br><span class="line">        mnist_test, batch_size, shuffle=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">return</span> (train_data, test_data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(train_data, test_data, net, loss, trainer, ctx, num_epochs, print_batches=None)</span>:</span></span><br><span class="line">    <span class="string">"""Train a network"""</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(num_epochs):</span><br><span class="line">        train_loss = <span class="number">0.</span></span><br><span class="line">        train_acc = <span class="number">0.</span></span><br><span class="line">        batch = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> data, label <span class="keyword">in</span> train_data:</span><br><span class="line">            label = label.as_in_context(ctx)</span><br><span class="line">            <span class="keyword">with</span> autograd.record():</span><br><span class="line">                output = net(data.as_in_context(ctx))</span><br><span class="line">                L = loss(output, label)</span><br><span class="line">            L.backward()</span><br><span class="line"></span><br><span class="line">            trainer.step(data.shape[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">            train_loss += nd.mean(L).asscalar()</span><br><span class="line">            train_acc += accuracy(output, label)</span><br><span class="line"></span><br><span class="line">            batch += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> print_batches <span class="keyword">and</span> batch % print_batches == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">"Batch %d. Loss: %f, Train acc %f"</span> % (</span><br><span class="line">                    batch, train_loss/batch, train_acc/batch</span><br><span class="line">                ))</span><br><span class="line"></span><br><span class="line">        test_acc = evaluate_accuracy(test_data, net, ctx)</span><br><span class="line">        print(<span class="string">"Epoch %d. Loss: %f, Train acc %f, Test acc %f"</span> % (</span><br><span class="line">            epoch, train_loss/batch, train_acc/batch, test_acc</span><br><span class="line">        ))</span><br></pre></td></tr></table></figure></p>
<p>cnngluon.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> image</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> autograd</span><br><span class="line"><span class="keyword">import</span> utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型</span></span><br><span class="line"><span class="comment"># 下面是LeNet在Gluon里的实现，注意到我们不再需要实现去计算每层的输入大小，</span></span><br><span class="line"><span class="comment"># 尤其是接在卷积后面的那个全连接层。</span></span><br><span class="line">net = nn.Sequential()</span><br><span class="line"><span class="keyword">with</span> net.name_scope():</span><br><span class="line">    net.add(</span><br><span class="line">        nn.Conv2D(channels=<span class="number">20</span>, kernel_size=<span class="number">5</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">        nn.MaxPool2D(pool_size=<span class="number">2</span>, strides=<span class="number">2</span>),</span><br><span class="line">        nn.Conv2D(channels=<span class="number">50</span>, kernel_size=<span class="number">3</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">        nn.MaxPool2D(pool_size=<span class="number">2</span>, strides=<span class="number">2</span>),</span><br><span class="line">        nn.Flatten(),</span><br><span class="line">        nn.Dense(<span class="number">128</span>, activation=<span class="string">"relu"</span>),</span><br><span class="line">        nn.Dense(<span class="number">10</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取数据和训练</span></span><br><span class="line"><span class="comment"># 剩下的跟上一章没什么不同，我们重用`utils.py`里定义的函数。</span></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">ctx = mx.gpu()</span><br><span class="line">net.initialize(ctx=ctx)</span><br><span class="line">print(<span class="string">'initialize weight on'</span>, ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">batch_size = <span class="number">256</span></span><br><span class="line">train_data, test_data = utils.load_data_fashion_mnist(batch_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练</span></span><br><span class="line">loss = gluon.loss.SoftmaxCrossEntropyLoss()</span><br><span class="line">trainer = gluon.Trainer(net.collect_params(),</span><br><span class="line">                        <span class="string">'sgd'</span>, &#123;<span class="string">'learning_rate'</span>: <span class="number">0.1</span>&#125;)</span><br><span class="line">utils.train(train_data, test_data, net, loss,</span><br><span class="line">            trainer, ctx, num_epochs=<span class="number">10</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="3-1-_u521B_u5EFA_u795E_u7ECF_u7F51_u7EDC"><a href="#3-1-_u521B_u5EFA_u795E_u7ECF_u7F51_u7EDC" class="headerlink" title="3.1.创建神经网络"></a>3.1.创建神经网络</h2><p>前面的教程我们教了大家如何实现线性回归，多类Logistic回归和多层感知机。我们既展示了如何从0开始实现，也提供使用<code>gluon</code>的更紧凑的实现。因为前面我们主要关注在模型本身，所以只解释了如何使用<code>gluon</code>，但没说明他们是如何工作的。我们使用了<code>nn.Sequential</code>，它是<code>nn.Block</code>的一个简单形式，但没有深入了解它们。<br>本教程和接下来几个教程，我们将详细解释如何使用这两个类来定义神经网络、初始化参数、以及保存和读取模型。<br>我们重新把使用Gluon多层感知机里的网络定义搬到这里作为开始的例子（为了简单起见，这里我们丢掉了Flatten层）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">net = nn.Sequential()</span><br><span class="line"><span class="keyword">with</span> net.name_scope():</span><br><span class="line">    net.add(nn.Dense(<span class="number">256</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">    net.add(nn.Dense(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">print(net)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 使用 `nn.Block` 来定义</span></span><br><span class="line"><span class="comment">#事实上，`nn.Sequential`是`nn.Block`的简单形式。</span></span><br><span class="line"><span class="comment"># 我们先来看下如何使用`nn.Block`来实现同样的网络。</span></span><br><span class="line"><span class="comment">## 使用nn.block定义更加灵活</span></span><br><span class="line"><span class="comment"># 可以看到`nn.Block`的使用是通过创建一个它子类的类，其中至少包含了两个函数。</span></span><br><span class="line"><span class="comment"># `__init__`：创建参数。上面例子我们使用了包含了参数的`dense`层</span></span><br><span class="line"><span class="comment"># `forward()`：定义网络的计算</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MLP</span><span class="params">(nn.Block)</span>:</span><span class="comment">## 定义MLP为nn.block的一个子class</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span><span class="comment">##初始化函数 self相当与自己的一个class</span></span><br><span class="line">        super(MLP, self).__init__(**kwargs)<span class="comment">##调用父类nn.block的初始化函数</span></span><br><span class="line">        <span class="keyword">with</span> self.name_scope():</span><br><span class="line">            self.dense0 = nn.Dense(<span class="number">256</span>) <span class="comment">##创建dense layer</span></span><br><span class="line">            self.dense1 = nn.Dense(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注意：这里必须为foreard函数，不能改 调用forward会自动调用backward求导</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span><span class="comment">##创建一个forward函数  输入x时如下操作</span></span><br><span class="line">        <span class="keyword">return</span> self.dense1(nd.relu(self.dense0(x)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们所创建的类的使用跟前面`net`没有太多不一样。</span></span><br><span class="line">net2 = MLP()</span><br><span class="line">print(net2)</span><br><span class="line">net2.initialize()</span><br><span class="line">x = nd.random.uniform(shape=(<span class="number">4</span>,<span class="number">20</span>))</span><br><span class="line">y = net2(x)</span><br><span class="line"><span class="keyword">print</span> y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如何定义创建和使用`nn.Dense`比较好理解。接下来我们仔细看下`MLP`里面用的其他命令：</span></span><br><span class="line"><span class="comment"># `super(MLP, self).__init__(**kwargs)`：这句话调用`nn.Block`的 `__init__`函数，</span></span><br><span class="line"><span class="comment"># 它提供了`prefix`（指定名字）和`params`（指定模型参数）两个参数。我们会之后详细解释如何使用。</span></span><br><span class="line"><span class="comment"># `self.name_scope()`：调用`nn.Block`提供的`name_scope()`函数。</span></span><br><span class="line"><span class="comment"># `nn.Dense`的定义放在这个`scope`里面。</span></span><br><span class="line"><span class="comment"># 它的作用是给里面的所有层和参数的名字加上前缀（prefix）使得他们在系统里面</span></span><br><span class="line"><span class="comment"># 独一无二。默认自动会自动生成前缀，我们也可以在创建的时候手动指定。</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'default prefix:'</span>, net2.dense0.name) <span class="comment">#('default prefix:', 'mlp0_dense0')</span></span><br><span class="line">net3 = MLP(prefix=<span class="string">'another_mlp_'</span>)</span><br><span class="line">print(<span class="string">'customized prefix:'</span>, net3.dense0.name) <span class="comment">#('customized prefix:', 'another_mlp_dense0')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大家会发现这里并没有定义如何求导，或者是`backward()`函数。</span></span><br><span class="line"><span class="comment"># 事实上，系统会使用`autograd`对`forward()`自动生成对应的`backward()`函数。</span></span><br><span class="line"><span class="comment"># 在`gluon`里，`nn.Block`是一个一般化的部件。整个神经网络可以是一个`nn.Block`，单个层也是一个`nn.Block`。我们可以（近似）无限地嵌套`nn.Block`来构建新的`nn.Block`。</span></span><br><span class="line"><span class="comment"># `nn.Block`主要提供这个东西</span></span><br><span class="line"><span class="comment"># 1. 存储参数</span></span><br><span class="line"><span class="comment"># 2. 描述`forward`如何执行</span></span><br><span class="line"><span class="comment"># 3. 自动求导</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 那么现在可以解释`nn.Sequential`了吧</span></span><br><span class="line"><span class="comment"># `nn.Sequential`是一个`nn.Block`容器，它通过`add`来添加`nn.Block`。</span></span><br><span class="line"><span class="comment"># 它自动生成`forward()`函数，其就是把加进来的`nn.Block`逐一运行。</span></span><br><span class="line"><span class="comment"># 一个简单的实现是这样的：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sequential</span><span class="params">(nn.Block)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        super(Sequential, self).__init__(**kwargs)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, block)</span>:</span></span><br><span class="line">        self._children.append(block)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> block <span class="keyword">in</span> self._children:</span><br><span class="line">            x = block(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以跟`nn.Sequential`一样的使用这个自定义的类：</span></span><br><span class="line">net4 = Sequential()</span><br><span class="line"><span class="keyword">with</span> net4.name_scope():</span><br><span class="line">    net4.add(nn.Dense(<span class="number">256</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">    net4.add(nn.Dense(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">net4.initialize()</span><br><span class="line">y = net4(x)</span><br><span class="line"><span class="keyword">print</span> y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到，`nn.Sequential`的主要好处是定义网络起来更加简单。</span></span><br><span class="line"><span class="comment"># 但`nn.Block`可以提供更加灵活的网络定义。考虑下面这个例子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FancyMLP</span><span class="params">(nn.Block)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        super(FancyMLP, self).__init__(**kwargs)</span><br><span class="line">        <span class="keyword">with</span> self.name_scope():</span><br><span class="line">            self.dense = nn.Dense(<span class="number">256</span>)</span><br><span class="line">            self.weight = nd.random_uniform(shape=(<span class="number">256</span>,<span class="number">20</span>))<span class="comment">##创建weight</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = nd.relu(self.dense(x))</span><br><span class="line">        x = nd.relu(nd.dot(x, self.weight)+<span class="number">1</span>) <span class="comment">##手动添加一个乘法</span></span><br><span class="line">        x = nd.relu(self.dense(x))</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 看到这里我们直接手动创建和初始了权重`weight`，并重复用了`dense`的层。测试一下：</span></span><br><span class="line">fancy_mlp = FancyMLP()</span><br><span class="line">fancy_mlp.initialize()</span><br><span class="line">y = fancy_mlp(x)</span><br><span class="line">print(y.shape)<span class="comment">##(4L, 256L)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## `nn.Block`和`nn.Sequential`的嵌套使用</span></span><br><span class="line"><span class="comment"># 现在我们知道了`nn`下面的类基本都是`nn.Block`的子类，他们可以很方便地嵌套使用。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecMLP</span><span class="params">(nn.Block)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        super(RecMLP, self).__init__(**kwargs)</span><br><span class="line">        self.net = nn.Sequential()</span><br><span class="line">        <span class="keyword">with</span> self.name_scope():</span><br><span class="line">            self.net.add(nn.Dense(<span class="number">256</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">            self.net.add(nn.Dense(<span class="number">128</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">            self.dense = nn.Dense(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> nd.relu(self.dense(self.net(x)))</span><br><span class="line"></span><br><span class="line">rec_mlp = nn.Sequential()</span><br><span class="line">rec_mlp.add(RecMLP())</span><br><span class="line">rec_mlp.add(nn.Dense(<span class="number">10</span>))</span><br><span class="line">print(rec_mlp)</span><br></pre></td></tr></table></figure></p>
<h2 id="3-2-_u521D_u59CB_u5316_u6A21_u578B_u53C2_u6570"><a href="#3-2-_u521D_u59CB_u5316_u6A21_u578B_u53C2_u6570" class="headerlink" title="3.2.初始化模型参数"></a>3.2.初始化模型参数</h2><p>我们仍然用MLP这个例子来详细解释如何初始化模型参数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_net</span><span class="params">()</span>:</span></span><br><span class="line">    net = nn.Sequential()</span><br><span class="line">    <span class="keyword">with</span> net.name_scope():</span><br><span class="line">        net.add(nn.Dense(<span class="number">4</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">        net.add(nn.Dense(<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> net</span><br><span class="line"></span><br><span class="line">x = nd.random.uniform(shape=(<span class="number">3</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 我们知道如果不`initialize()`直接跑forward，那么系统会抱怨说参数没有初始化。</span></span><br><span class="line"><span class="comment"># import sys</span></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"><span class="comment">#     net = get_net()</span></span><br><span class="line"><span class="comment">#     net(x)</span></span><br><span class="line"><span class="comment"># except RuntimeError as err:</span></span><br><span class="line"><span class="comment">#     sys.stderr.write(str(err))</span></span><br><span class="line"><span class="comment"># ## Parameter sequential0_dense0_bias has not been initialized.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确的打开方式是这样</span></span><br><span class="line">net = get_net()</span><br><span class="line">net.initialize()</span><br><span class="line"><span class="keyword">print</span> net(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 访问模型参数</span></span><br><span class="line"><span class="comment"># 之前我们提到过可以通过`weight`和`bias`访问`Dense`的参数，他们是`Parameter`这个类：</span></span><br><span class="line">w = net[<span class="number">0</span>].weight</span><br><span class="line">b = net[<span class="number">0</span>].bias</span><br><span class="line">print(<span class="string">'name: '</span>, net[<span class="number">0</span>].name, <span class="string">'\nweight: '</span>, w, <span class="string">'\nbias: '</span>, b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后我们可以通过`data`来访问参数，`grad`来访问对应的梯度</span></span><br><span class="line">print(<span class="string">'weight:'</span>, w.data()) <span class="comment">##w的数值</span></span><br><span class="line">print(<span class="string">'weight gradient'</span>, w.grad()) <span class="comment">#w的梯度</span></span><br><span class="line">print(<span class="string">'bias:'</span>, b.data())</span><br><span class="line">print(<span class="string">'bias gradient'</span>, b.grad())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们也可以通过`collect_params`来访问Block里面所有的参数（这个会包括所有的子Block）。</span></span><br><span class="line"><span class="comment"># 它会返回一个名字到对应Parameter的dict。既可以用正常`[]`来访问参数，也可以用`get()`，它不需要填写名字的前缀。</span></span><br><span class="line">params = net.collect_params()</span><br><span class="line">print(params)</span><br><span class="line">print(params[<span class="string">'sequential0_dense0_bias'</span>].data())</span><br><span class="line">print(params.get(<span class="string">'dense0_weight'</span>).data())</span><br><span class="line"></span><br><span class="line"><span class="comment">## 使用不同的初始函数来初始化</span></span><br><span class="line"><span class="comment"># 我们一直在使用默认的`initialize`来初始化权重（除了指定GPU `ctx`外）。它会把所有权重初始化成在`[-0.07, 0.07]`之间均匀分布的随机数。</span></span><br><span class="line"><span class="comment"># 我们可以使用别的初始化方法。例如使用均值为0，方差为0.02的正态分布</span></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> init</span><br><span class="line">params.initialize(init=init.Normal(sigma=<span class="number">0.02</span>), force_reinit=<span class="keyword">True</span>) <span class="comment">##为了防止误操作初始化覆盖参数 需要force_reinit=True强制初始化</span></span><br><span class="line">print(net[<span class="number">0</span>].weight.data(), net[<span class="number">0</span>].bias.data())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 看得更加清楚点：  全部初始化为1</span></span><br><span class="line">params.initialize(init=init.One(), force_reinit=<span class="keyword">True</span>)</span><br><span class="line">print(net[<span class="number">0</span>].weight.data(), net[<span class="number">0</span>].bias.data())</span><br><span class="line"><span class="comment"># [[ 1.  1.  1.  1.  1.]</span></span><br><span class="line"><span class="comment">#  [ 1.  1.  1.  1.  1.]</span></span><br><span class="line"><span class="comment">#  [ 1.  1.  1.  1.  1.]</span></span><br><span class="line"><span class="comment">#  [ 1.  1.  1.  1.  1.]]</span></span><br><span class="line"><span class="comment"># [ 0.  0.  0.  0.]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更多的方法参见[init的API](https://mxnet.incubator.apache.org/api/python/optimization.html#the-mxnet-initializer-package).</span></span><br><span class="line"><span class="comment"># 下面我们自定义一个初始化方法。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInit</span><span class="params">(init.Initializer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(MyInit, self).__init__()</span><br><span class="line">        self._verbose = <span class="keyword">True</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_weight</span><span class="params">(self, _, arr)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化权重，使用out=arr后我们不需指定形状</span></span><br><span class="line">        print(<span class="string">'init weight'</span>, arr.shape)</span><br><span class="line">        nd.random.uniform(low=<span class="number">5</span>, high=<span class="number">10</span>, out=arr)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_bias</span><span class="params">(self, _, arr)</span>:</span></span><br><span class="line">        print(<span class="string">'init bias'</span>, arr.shape)</span><br><span class="line">        <span class="comment"># 初始化偏移</span></span><br><span class="line">        arr[:] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">FIXME:</span> init_bias doesn't work</span></span><br><span class="line">params.initialize(init=MyInit(), force_reinit=<span class="keyword">True</span>)</span><br><span class="line">print(net[<span class="number">0</span>].weight.data(), net[<span class="number">0</span>].bias.data())</span><br><span class="line"></span><br><span class="line"><span class="comment">## 延后的初始化</span></span><br><span class="line"><span class="comment"># 我们之前提到过Gluon的一个便利的地方是模型定义的时候不需要指定输入的大小，在之后做forward的时候会自动推测参数的大小。我们具体来看这是怎么工作的。</span></span><br><span class="line"><span class="comment"># 新创建一个网络，然后打印参数。你会发现两个全连接层的权重的形状里都有0。 这是因为在不知道输入数据的情况下，我们无法判断它们的形状。</span></span><br><span class="line">net = get_net()</span><br><span class="line">print(net.collect_params())</span><br><span class="line"><span class="comment"># Parameter sequential1_dense0_weight(shape=(4, 0), dtype= &lt; type 'numpy.float32' &gt;)</span></span><br><span class="line"><span class="comment"># Parameter sequential1_dense0_bias(shape=(4,), dtype= &lt; type 'numpy.float32' &gt;)</span></span><br><span class="line"><span class="comment"># Parameter sequential1_dense1_weight(shape=(2, 0), dtype= &lt; type 'numpy.float32' &gt;)</span></span><br><span class="line"><span class="comment"># Parameter sequential1_dense1_bias(shape=(2,), dtype= &lt; type 'numpy.float32' &gt;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后我们初始化</span></span><br><span class="line">net.initialize(init=MyInit())</span><br><span class="line"><span class="comment"># 你会看到我们并没有看到MyInit打印的东西，这是因为我们仍然不知道形状。真正的初始化发生在我们看到数据时。</span></span><br><span class="line"><span class="keyword">print</span> net(x)</span><br><span class="line"><span class="comment"># 这时候我们看到shape里面的0被填上正确的值了。</span></span><br><span class="line">print(net.collect_params())</span><br><span class="line"><span class="comment"># Parameter sequential1_dense0_weight(shape=(4L, 5L), dtype= &lt; type 'numpy.float32' &gt;)</span></span><br><span class="line"><span class="comment"># Parameter sequential1_dense0_bias(shape=(4L,), dtype= &lt; type 'numpy.float32' &gt;)</span></span><br><span class="line"><span class="comment"># Parameter sequential1_dense1_weight(shape=(2L, 4L), dtype= &lt; type 'numpy.float32' &gt;)</span></span><br><span class="line"><span class="comment"># Parameter sequential1_dense1_bias(shape=(2L,), dtype= &lt; type 'numpy.float32' &gt;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 避免延后初始化</span></span><br><span class="line"><span class="comment"># 有时候我们不想要延后初始化，这时候可以在创建网络的时候指定输入大小。</span></span><br><span class="line">net = nn.Sequential()</span><br><span class="line"><span class="keyword">with</span> net.name_scope():</span><br><span class="line">    net.add(nn.Dense(<span class="number">4</span>, in_units=<span class="number">5</span>, activation=<span class="string">"relu"</span>)) <span class="comment">##输入input 5</span></span><br><span class="line">    net.add(nn.Dense(<span class="number">2</span>, in_units=<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">net.initialize(MyInit())</span><br><span class="line"><span class="comment"># ('init weight', (4L, 5L))</span></span><br><span class="line"><span class="comment"># ('init weight', (2L, 4L))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 共享模型参数</span></span><br><span class="line"><span class="comment"># 有时候我们想在层之间共享同一份参数，我们可以通过Block的`params`输出参数来手动指定参数，而不是让系统自动生成。</span></span><br><span class="line">net = nn.Sequential()</span><br><span class="line"><span class="keyword">with</span> net.name_scope():</span><br><span class="line">    net.add(nn.Dense(<span class="number">4</span>, in_units=<span class="number">4</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">    <span class="comment">## 参数与最后一层共用 即与上一层参数相同</span></span><br><span class="line">    net.add(nn.Dense(<span class="number">4</span>, in_units=<span class="number">4</span>, activation=<span class="string">"relu"</span>, params=net[-<span class="number">1</span>].params)) <span class="comment">#net[-1].params net最后一层的参数</span></span><br><span class="line">    net.add(nn.Dense(<span class="number">2</span>, in_units=<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化然后打印</span></span><br><span class="line">net.initialize(MyInit())</span><br><span class="line"><span class="comment">## 如下两个参数相同</span></span><br><span class="line">print(net[<span class="number">0</span>].weight.data())</span><br><span class="line">print(net[<span class="number">1</span>].weight.data())</span><br></pre></td></tr></table></figure></p>
<p>我们可以很灵活地访问和修改模型参数。</p>
<p>练习</p>
<ol>
<li>研究下<code>net.collect_params()</code>返回的是什么？<code>net.params</code>呢？</li>
<li>如何对每个层使用不同的初始化函数</li>
<li>如果两个层共用一个参数，那么求梯度的时候会发生什么？</li>
</ol>
<h2 id="3-3-_u5E8F_u5217_u5316_u8BFB_u5199_u6A21_u578B"><a href="#3-3-_u5E8F_u5217_u5316_u8BFB_u5199_u6A21_u578B" class="headerlink" title="3.3.序列化读写模型"></a>3.3.序列化读写模型</h2><p>但即使知道了所有这些，我们还没有完全准备好来构建一个真正的机器学习系统。这是因为我们还没有讲如何读和写模型。因为现实中，我们通常在一个地方训练好模型，然后部署到很多不同的地方。我们需要把内存中的训练好的模型存在硬盘上好下次使用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 读写NDArrays</span></span><br><span class="line"><span class="comment"># 作为开始，我们先看看如何读写NDArray。虽然我们可以使用Python的序列化包例如`Pickle`，不过我们更倾向直接`save`和`load`，</span></span><br><span class="line"><span class="comment"># 通常这样更快，而且别的语言，例如R和Scala也能用到。</span></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"></span><br><span class="line">x = nd.ones(<span class="number">3</span>)</span><br><span class="line">y = nd.zeros(<span class="number">4</span>)</span><br><span class="line">filename = <span class="string">"../data/test1.params"</span></span><br><span class="line">nd.save(filename, [x, y])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读回来</span></span><br><span class="line">a, b = nd.load(filename)</span><br><span class="line">print(a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不仅可以读写单个NDArray，NDArray list，dict也是可以的：</span></span><br><span class="line">mydict = &#123;<span class="string">"x"</span>: x, <span class="string">"y"</span>: y&#125;</span><br><span class="line">filename = <span class="string">"../data/test2.params"</span></span><br><span class="line">nd.save(filename, mydict)</span><br><span class="line">c = nd.load(filename)</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 读写Gluon模型的参数</span></span><br><span class="line"><span class="comment"># 跟NDArray类似，Gluon的模型（就是`nn.Block`）提供便利的`save_params`和`load_params`函数来读写数据。</span></span><br><span class="line"><span class="comment"># 我们同前一样创建一个简单的多层感知机</span></span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_net</span><span class="params">()</span>:</span></span><br><span class="line">    net = nn.Sequential()</span><br><span class="line">    <span class="keyword">with</span> net.name_scope():</span><br><span class="line">        net.add(nn.Dense(<span class="number">10</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">        net.add(nn.Dense(<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> net</span><br><span class="line"></span><br><span class="line">net = get_net()</span><br><span class="line">net.initialize()</span><br><span class="line">x = nd.random.uniform(shape=(<span class="number">2</span>,<span class="number">10</span>))</span><br><span class="line">print(net(x))</span><br><span class="line"><span class="comment">#[[ 0.00205935 -0.00979935]</span></span><br><span class="line"> <span class="comment"># [ 0.00107034 -0.00423382]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面我们把模型参数存起来</span></span><br><span class="line">filename = <span class="string">"../data/mlp.params"</span></span><br><span class="line">net.save_params(filename)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 之后我们构建一个一样的多层感知机，但不像前面那样随机初始化，我们直接读取前面的模型参数。</span></span><br><span class="line"><span class="comment"># 这样给定同样的输入，新的模型应该会输出同样的结果。</span></span><br><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line">net2 = get_net()</span><br><span class="line">net2.load_params(filename, mx.cpu())  <span class="comment"># FIXME, gluon will support default ctx later</span></span><br><span class="line">print(net2(x))</span><br><span class="line"><span class="comment">#[[ 0.00205935 -0.00979935]</span></span><br><span class="line"> <span class="comment"># [ 0.00107034 -0.00423382]]</span></span><br></pre></td></tr></table></figure></p>
<p>通过<code>load_params</code>和<code>save_params</code>可以很方便的读写模型参数。</p>
<h2 id="3-4-_u8BBE_u8BA1_u81EA_u5B9A_u4E49_u5C42"><a href="#3-4-_u8BBE_u8BA1_u81EA_u5B9A_u4E49_u5C42" class="headerlink" title="3.4.设计自定义层"></a>3.4.设计自定义层</h2><p>神经网络的一个魅力是它有大量的层，例如全连接、卷积、循环、激活，和各式花样的连接方式。我们之前学到了如何使用Gluon提供的层来构建新的层(<code>nn.Block</code>)继而得到神经网络。虽然Gluon提供了大量的<a href="https://mxnet.incubator.apache.org/versions/master/api/python/gluon/gluon.html#neural-network-layers" target="_blank" rel="external">层的定义</a>，但我们仍然会遇到现有层不够用的情况。</p>
<p>这时候的一个自然的想法是，我们不是学习了如何只使用基础数值运算包<code>NDArray</code>来实现各种的模型吗？它提供了大量的<a href="https://mxnet.incubator.apache.org/versions/master/api/python/ndarray/ndarray.html" target="_blank" rel="external">底层计算函数</a>足以实现即使不是100%那也是95%的神经网络吧。</p>
<p>但每次都从头写容易写到怀疑人生。实际上，即使在纯研究的领域里，我们也很少发现纯新的东西，大部分时候是在现有模型的基础上做一些改进。所以很可能大部分是可以沿用前面的而只有一部分是需要自己来实现。</p>
<p>这个教程我们将介绍如何使用底层的<code>NDArray</code>接口来实现一个<code>Gluon</code>的层，从而可以以后被重复调用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们先来看如何定义一个简单层，它不需要维护模型参数。事实上这个跟前面介绍的如何使用nn.Block没什么区别。</span></span><br><span class="line"><span class="comment"># 下面代码定义一个层将输入减掉均值。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CenteredLayer</span><span class="params">(nn.Block)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        super(CenteredLayer, self).__init__(**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x - x.mean()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们可以马上实例化这个层用起来。</span></span><br><span class="line">layer = CenteredLayer()</span><br><span class="line"><span class="keyword">print</span> layer(nd.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])) <span class="comment">##[-2. -1.  0.  1.  2.]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们也可以用它来构造更复杂的神经网络：</span></span><br><span class="line">net = nn.Sequential()</span><br><span class="line"><span class="keyword">with</span> net.name_scope():</span><br><span class="line">    net.add(nn.Dense(<span class="number">128</span>))</span><br><span class="line">    net.add(nn.Dense(<span class="number">10</span>))</span><br><span class="line">    net.add(CenteredLayer())</span><br><span class="line"><span class="comment"># 确认下输出的均值确实是0：</span></span><br><span class="line">net.initialize()</span><br><span class="line">y = net(nd.random.uniform(shape=(<span class="number">4</span>, <span class="number">8</span>)))</span><br><span class="line"><span class="keyword">print</span> y.mean() <span class="comment">##[  2.32830647e-11] (因为用的浮点32为约等于0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 带模型参数的自定义层</span></span><br><span class="line"><span class="comment"># 虽然`CenteredLayer`可能会告诉实现自定义层大概是什么样子，但它缺少了重要的一块，就是它没有可以学习的模型参数。</span></span><br><span class="line"><span class="comment"># 记得我们之前访问`Dense`的权重的时候是通过`dense.weight.data()`，这里`weight`是一个`Parameter`的类型。</span></span><br><span class="line"><span class="comment"># 我们可以显示的构建这样的一个参数。</span></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line">my_param = gluon.Parameter(<span class="string">"exciting_parameter_yay"</span>, shape=(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 这里我们创建一个3x3大小的参数并取名为"exciting_parameter_yay"。然后用默认方法初始化打印结果。</span></span><br><span class="line">my_param.initialize()</span><br><span class="line"><span class="keyword">print</span> (my_param.data(), my_param.grad())</span><br><span class="line"><span class="comment"># [[ 0.02332029  0.04696382  0.03078182]</span></span><br><span class="line"><span class="comment">#  [ 0.00755873  0.03193929 -0.0059346 ]</span></span><br><span class="line"><span class="comment">#  [-0.00809445  0.01710822 -0.03057443]]</span></span><br><span class="line"><span class="comment"># [[ 0.  0.  0.]</span></span><br><span class="line"><span class="comment">#  [ 0.  0.  0.]</span></span><br><span class="line"><span class="comment">#  [ 0.  0.  0.]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通常自定义层的时候我们不会直接创建Parameter，而是用过Block自带的一个ParamterDict类型的成员变量`params`，顾名思义，</span></span><br><span class="line"><span class="comment"># 这是一个由字符串名字映射到Parameter的字典。</span></span><br><span class="line">pd = gluon.ParameterDict(prefix=<span class="string">"block1_"</span>)</span><br><span class="line">pd.get(<span class="string">"exciting_parameter_yay"</span>, shape=(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="keyword">print</span> pd</span><br><span class="line"><span class="comment">#block1_ (Parameter block1_exciting_parameter_yay (shape=(3, 3), dtype=&lt;type 'numpy.float32'&gt;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在我们看下如果如果实现一个跟`Dense`一样功能的层，它概念跟前面的`CenteredLayer`的主要区别是我们</span></span><br><span class="line"><span class="comment"># 在初始函数里通过`params`创建了参数：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDense</span><span class="params">(nn.Block)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, units, in_units, **kwargs)</span>:</span><span class="comment">#in_units输入大小 units输出大小</span></span><br><span class="line">        super(MyDense, self).__init__(**kwargs)</span><br><span class="line">        <span class="keyword">with</span> self.name_scope():</span><br><span class="line">            self.weight = self.params.get(</span><br><span class="line">                <span class="string">'weight'</span>, shape=(in_units, units))</span><br><span class="line">            self.bias = self.params.get(<span class="string">'bias'</span>, shape=(units,))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        linear = nd.dot(x, self.weight.data()) + self.bias.data() <span class="comment">##WX+b</span></span><br><span class="line">        <span class="keyword">return</span> nd.relu(linear)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们创建实例化一个对象来看下它的参数，这里我们特意加了前缀`prefix`，这是`nn.Block`初始化函数自带的参数。</span></span><br><span class="line">dense = MyDense(<span class="number">5</span>, in_units=<span class="number">10</span>, prefix=<span class="string">'o_my_dense_'</span>)</span><br><span class="line"><span class="keyword">print</span> dense.params</span><br><span class="line"></span><br><span class="line"><span class="comment"># 它的使用跟前面没有什么不一致：</span></span><br><span class="line">dense.initialize()</span><br><span class="line"><span class="keyword">print</span> dense(nd.random.uniform(shape=(<span class="number">2</span>,<span class="number">10</span>))) <span class="comment">#batch=2 长度=10输入 输出为batch不变 长度=5</span></span><br><span class="line"><span class="comment"># [[ 0.          0.          0.05519049  0.01345633  0.07244172]</span></span><br><span class="line"><span class="comment">#  [ 0.          0.          0.06741175  0.01634707  0.0257601 ]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们构造的层跟Gluon提供的层用起来没太多区别：</span></span><br><span class="line">net = nn.Sequential()</span><br><span class="line"><span class="keyword">with</span> net.name_scope():</span><br><span class="line">    net.add(MyDense(<span class="number">32</span>, in_units=<span class="number">64</span>))</span><br><span class="line">    net.add(MyDense(<span class="number">2</span>, in_units=<span class="number">32</span>))</span><br><span class="line">net.initialize()</span><br><span class="line"><span class="keyword">print</span> net(nd.random.uniform(shape=(<span class="number">2</span>,<span class="number">64</span>)))</span><br><span class="line"><span class="comment"># [[ 0.          0.        ]</span></span><br><span class="line"><span class="comment">#  [ 0.02434103  0.        ]]</span></span><br></pre></td></tr></table></figure></p>
<p>仔细的你可能还是注意到了，我们这里指定了输入的大小，而Gluon自带的<code>Dense</code>则无需如此。我们已经在前面节介绍过了这个延迟初始化如何使用。但如果实现一个这样的层我们将留到后面介绍了hybridize后。<br>现在我们知道了如何把前面手写过的层全部包装了Gluon能用的Block，之后再用到的时候就可以飞起来了！</p>
<p>练习</p>
<ol>
<li>怎么修改自定义层里参数的默认初始化函数。</li>
<li>(这个比较难），在一个代码Cell里面输入<code>nn.Dense??</code>，看看它是怎么实现的。为什么它就可以支持延迟初始化了。</li>
</ol>
<h2 id="3-5-dropout"><a href="#3-5-dropout" class="headerlink" title="3.5.dropout"></a>3.5.dropout</h2><p>丢弃法（Dropout）— 从0开始<br>前面我们介绍了多层神经网络，就是包含至少一个隐含层的网络。我们也介绍了正则法来应对过拟合问题。在深度学习中，一个常用的应对过拟合问题的方法叫做丢弃法（Dropout）。本节以多层神经网络为例，从0开始介绍丢弃法。<br>由于丢弃法的概念和实现非常容易，在本节中，我们先介绍丢弃法的概念以及它在现代神经网络中是如何实现的。然后我们一起探讨丢弃法的本质。</p>
<p>丢弃法的概念<br>在现代神经网络中，我们所指的丢弃法，通常是对输入层或者隐含层做以下操作：</p>
<ul>
<li>随机选择一部分该层的输出作为丢弃元素；</li>
<li>把丢弃元素乘以0；</li>
<li>把非丢弃元素拉伸。</li>
</ul>
<p>丢弃法的本质<br>了解了丢弃法的概念与实现，那你可能对它的本质产生了好奇。<br>如果你了解集成学习，你可能知道它在提升弱分类器准确率上的威力。一般来说，在集成学习里，我们可以对训练数据集有放回地采样若干次并分别训练若干个不同的分类器；测试时，把这些分类器的结果集成一下作为最终分类结果。<br>事实上，丢弃法在模拟集成学习。试想，一个使用了丢弃法的多层神经网络本质上是原始网络的子集（节点和边）。举个例子，它可能长这个样子。<br><img src="/../img/deeplearn/dropout.png" alt="img"></p>
<p>丢弃法的实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 丢弃法的实现很容易，例如像下面这样。这里的标量`drop_probability`</span></span><br><span class="line"><span class="comment"># 定义了一个`X`（`NDArray`类）中任何一个元素被丢弃的概率。-----元素置0</span></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropout</span><span class="params">(X, drop_probability)</span>:</span></span><br><span class="line">    keep_probability = <span class="number">1</span> - drop_probability</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">0</span> &lt;= keep_probability &lt;= <span class="number">1</span></span><br><span class="line">    <span class="comment"># 这种情况下把全部元素都丢弃,全部元素置0。</span></span><br><span class="line">    <span class="keyword">if</span> keep_probability == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> X.zeros_like()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机选择一部分该层的输出作为丢弃元素。</span></span><br><span class="line">    <span class="comment">##随机产生产生0~1之间的数，小于keep_probability变1 大于keep_probability变0 之后乘以X就会随机将某些值变0</span></span><br><span class="line">    mask=nd.random.uniform(<span class="number">0</span>, <span class="number">1.0</span>, X.shape, ctx=X.context)&gt;<span class="number">1</span>-keep_probability  <span class="comment">#&gt;1-keep_probability等效于小于keep_probability</span></span><br><span class="line">	<span class="comment"># 保证 E[dropout(X)] == X 期望值不变</span></span><br><span class="line">    scale = <span class="number">1</span> / keep_probability</span><br><span class="line">    <span class="keyword">return</span> mask * X * scale</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们运行几个实例来验证一下。</span></span><br><span class="line">A = nd.arange(<span class="number">8</span>).reshape((<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line"><span class="keyword">print</span> dropout(A, <span class="number">0.0</span>) <span class="comment">#[[ 0.  1.  2.  3.][ 4.  5.  6.  7.]]</span></span><br><span class="line"><span class="keyword">print</span> dropout(A, <span class="number">0.5</span>) <span class="comment">#[[  0.   2.   4.   6.][  8.  10.   0.   0.]]</span></span><br><span class="line"><span class="keyword">print</span> dropout(A, <span class="number">1.0</span>) <span class="comment"># [[ 0.  0.  0.  0.] [ 0.  0.  0.  0.]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们在训练神经网络模型时一般随机采样一个批量的训练数据。丢弃法实质上是对每一个这样的数据集分别训练一个原神经网络子集的分类器。</span></span><br><span class="line"><span class="comment"># 与一般的集成学习不同，这里每个原神经网络子集的分类器用的是同一套参数。因此丢弃法只是在模拟集成学习。</span></span><br><span class="line"><span class="comment"># 我们刚刚强调了，原神经网络子集的分类器在不同的训练数据批量上训练并使用同一套参数。因此，使用丢弃法的神经网络实质上是对输入层和</span></span><br><span class="line"><span class="comment"># 隐含层的参数做了正则化：学到的参数使得原神经网络不同子集在训练数据上都尽可能表现良好。</span></span><br><span class="line"><span class="comment"># 下面我们动手实现一下在多层神经网络里加丢弃层。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 数据获取</span></span><br><span class="line"><span class="keyword">import</span> utils</span><br><span class="line">batch_size = <span class="number">256</span></span><br><span class="line">train_data, test_data = utils.load_data_fashion_mnist(batch_size)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 含两个隐藏层的多层感知机</span></span><br><span class="line"><span class="comment"># 这里我们定义一个包含两个隐含层的模型，两个隐含层都输出256个节点。我们定义激活函数Relu并直接使用Gluon提供的交叉熵损失函数。</span></span><br><span class="line">num_inputs = <span class="number">28</span>*<span class="number">28</span></span><br><span class="line">num_outputs = <span class="number">10</span></span><br><span class="line">num_hidden1 = <span class="number">256</span></span><br><span class="line">num_hidden2 = <span class="number">256</span></span><br><span class="line">weight_scale = <span class="number">.01</span></span><br><span class="line"></span><br><span class="line">W1 = nd.random_normal(shape=(num_inputs, num_hidden1), scale=weight_scale)</span><br><span class="line">b1 = nd.zeros(num_hidden1)</span><br><span class="line">W2 = nd.random_normal(shape=(num_hidden1, num_hidden2), scale=weight_scale)</span><br><span class="line">b2 = nd.zeros(num_hidden2)</span><br><span class="line">W3 = nd.random_normal(shape=(num_hidden2, num_outputs), scale=weight_scale)</span><br><span class="line">b3 = nd.zeros(num_outputs)</span><br><span class="line">params = [W1, b1, W2, b2, W3, b3]</span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">    param.attach_grad()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 定义包含丢弃层的模型</span></span><br><span class="line"><span class="comment"># 我们的模型就是将层（全连接）和激活函数（Relu）串起来，并在应用激活函数后添加丢弃层。每个丢弃层的元素丢弃概率可以分别设置。</span></span><br><span class="line"><span class="comment"># 一般情况下，我们推荐把更靠近输入层的元素丢弃概率设的更小一点。这个试验中，我们把第一层全连接后的元素丢弃概率设为0.2，</span></span><br><span class="line"><span class="comment"># 把第二层全连接后的元素丢弃概率设为0.5。</span></span><br><span class="line">drop_prob1 = <span class="number">0.1</span></span><br><span class="line">drop_prob2 = <span class="number">0.4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">net</span><span class="params">(X)</span>:</span></span><br><span class="line">    X = X.reshape((-<span class="number">1</span>, num_inputs))</span><br><span class="line">    <span class="comment"># 第一层全连接。</span></span><br><span class="line">    h1 = nd.relu(nd.dot(X, W1) + b1)</span><br><span class="line">    <span class="comment"># 在第一层全连接后添加丢弃层。</span></span><br><span class="line">    h1 = dropout(h1, drop_prob1)</span><br><span class="line">    <span class="comment"># 第二层全连接。</span></span><br><span class="line">    h2 = nd.relu(nd.dot(h1, W2) + b2)</span><br><span class="line">    <span class="comment"># 在第二层全连接后添加丢弃层。</span></span><br><span class="line">    h2 = dropout(h2, drop_prob2)</span><br><span class="line">    <span class="keyword">return</span> nd.dot(h2, W3) + b3</span><br><span class="line"></span><br><span class="line"><span class="comment">## 训练</span></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> autograd</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"></span><br><span class="line">softmax_cross_entropy = gluon.loss.SoftmaxCrossEntropyLoss()</span><br><span class="line">learning_rate = <span class="number">.5</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    train_loss = <span class="number">0.</span></span><br><span class="line">    train_acc = <span class="number">0.</span></span><br><span class="line">    <span class="keyword">for</span> data, label <span class="keyword">in</span> train_data:</span><br><span class="line">        <span class="keyword">with</span> autograd.record():</span><br><span class="line">            output = net(data)</span><br><span class="line">            loss = softmax_cross_entropy(output, label)</span><br><span class="line">        loss.backward()</span><br><span class="line">        utils.SGD(params, learning_rate/batch_size)</span><br><span class="line"></span><br><span class="line">        train_loss += nd.mean(loss).asscalar()</span><br><span class="line">        train_acc += utils.accuracy(output, label)</span><br><span class="line"></span><br><span class="line">    test_acc = utils.evaluate_accuracy(test_data, net)</span><br><span class="line">    print(<span class="string">"Epoch %d. Loss: %f, Train acc %f, Test acc %f"</span> % (</span><br><span class="line">        epoch, train_loss/len(train_data),</span><br><span class="line">        train_acc/len(train_data), test_acc)</span><br></pre></td></tr></table></figure></p>
<p>我们可以通过使用丢弃法对神经网络正则化。<br>练习</p>
<ul>
<li>尝试不使用丢弃法，看看这个包含两个隐含层的多层感知机可以得到什么结果。</li>
<li>我们推荐把更靠近输入层的元素丢弃概率设的更小一点。想想这是为什么？如果把本节教程中的两个元素丢弃参数对调会有什么结果？</li>
</ul>
<h2 id="3-6-_u4F7F_u7528Gluon_u4E22_u5F03_u6CD5_uFF08Dropout_uFF09"><a href="#3-6-_u4F7F_u7528Gluon_u4E22_u5F03_u6CD5_uFF08Dropout_uFF09" class="headerlink" title="3.6.使用Gluon丢弃法（Dropout）"></a>3.6.使用Gluon丢弃法（Dropout）</h2><p>本章介绍如何使用<code>Gluon</code>在训练和测试深度学习模型中使用丢弃法(Dropout)。<br>定义模型并添加丢弃层<br>有了<code>Gluon</code>，我们模型的定义工作变得简单了许多。我们只需要在全连接层后添加<code>gluon.nn.Dropout</code>层并指定元素丢弃概率。一般情况下，我们推荐把<br>更靠近输入层的元素丢弃概率设的更小一点。这个试验中，我们把第一层全连接后的元素丢弃概率设为0.2，把第二层全连接后的元素丢弃概率设为0.5。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">from</span> mxnet.gluon import nn</span><br><span class="line"></span><br><span class="line">net = nn.Sequential()</span><br><span class="line">drop_prob1 = <span class="number">0.2</span></span><br><span class="line">drop_prob2 = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line"><span class="operator">with</span> net.name_scope():</span><br><span class="line">    net.<span class="built_in">add</span>(nn.Flatten())</span><br><span class="line">    <span class="comment"># 第一层全连接。</span></span><br><span class="line">    net.<span class="built_in">add</span>(nn.Dense(<span class="number">256</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">    <span class="comment"># 在第一层全连接后添加丢弃层。</span></span><br><span class="line">    net.<span class="built_in">add</span>(nn.Dropout(drop_prob1))<span class="comment">########通过`Gluon`我们可以更方便地构造多层神经网络并使用丢弃法</span></span><br><span class="line">    <span class="comment"># 第二层全连接。</span></span><br><span class="line">    net.<span class="built_in">add</span>(nn.Dense(<span class="number">256</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">    <span class="comment"># 在第二层全连接后添加丢弃层。</span></span><br><span class="line">    net.<span class="built_in">add</span>(nn.Dropout(drop_prob2))</span><br><span class="line">    net.<span class="built_in">add</span>(nn.Dense(<span class="number">10</span>))</span><br><span class="line">net.initialize()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 读取数据并训练</span></span><br><span class="line">import utils</span><br><span class="line"><span class="built_in">from</span> mxnet import nd</span><br><span class="line"><span class="built_in">from</span> mxnet import autograd</span><br><span class="line"><span class="built_in">from</span> mxnet import gluon</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">256</span></span><br><span class="line">train_data, test_data = utils.load_data_fashion_mnist(batch_size)</span><br><span class="line">softmax_cross_entropy = gluon.loss.SoftmaxCrossEntropyLoss()</span><br><span class="line">trainer = gluon.Trainer(net.collect_params(), <span class="string">'sgd'</span>, &#123;<span class="string">'learning_rate'</span>: <span class="number">0.5</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="operator">in</span> range(<span class="number">5</span>):</span><br><span class="line">    train_loss = <span class="number">0.</span></span><br><span class="line">    train_acc = <span class="number">0.</span></span><br><span class="line">    <span class="keyword">for</span> data, label <span class="operator">in</span> train_data:</span><br><span class="line">        <span class="operator">with</span> autograd.record():</span><br><span class="line">            output = net(data)</span><br><span class="line">            loss = softmax_cross_entropy(output, label)</span><br><span class="line">        loss.backward()</span><br><span class="line">        trainer.step(batch_size)</span><br><span class="line"></span><br><span class="line">        train_loss += nd.mean(loss).asscalar()</span><br><span class="line">        train_acc += utils.accuracy(output, label)</span><br><span class="line"></span><br><span class="line">    test_acc = utils.evaluate_accuracy(test_data, net)</span><br><span class="line">    print(<span class="string">"Epoch %d. Loss: %f, Train acc %f, Test acc %f"</span> % (</span><br><span class="line">        epoch, train_loss/<span class="built_in">len</span>(train_data),</span><br><span class="line">        train_acc/<span class="built_in">len</span>(train_data), test_acc))</span><br></pre></td></tr></table></figure></p>
<p>效果比3.5好！</p>
<h2 id="3-7-_u6DF1_u5EA6_u5377_u79EF_u795E_u7ECF_u7F51_u7EDC_u548CAlexNet"><a href="#3-7-_u6DF1_u5EA6_u5377_u79EF_u795E_u7ECF_u7F51_u7EDC_u548CAlexNet" class="headerlink" title="3.7.深度卷积神经网络和AlexNet"></a>3.7.深度卷积神经网络和AlexNet</h2><p>原版的AlexNet有每层大小为4096个节点的全连接层们。这两个巨大的全连接层带来将近1GB的模型大小。由于早期GPU显存的限制，最早的AlexNet包括了双数据流的设计，以让网络中一半的节点能存入一个GPU。这两个数据流，也就是说两个GPU只在一部分层进行通信，这样达到限制GPU同步时的额外开销的效果。有幸的是，GPU在过去几年得到了长足的发展，除了一些特殊的结构外，我们也就不再需要这样的特别设计了。<br>下面的Gluon代码定义了（稍微简化过的）Alexnet<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">net = nn.Sequential()</span><br><span class="line"><span class="keyword">with</span> net.name_scope():</span><br><span class="line">    net.add(</span><br><span class="line">        <span class="comment"># 第一阶段</span></span><br><span class="line">        nn.Conv2D(channels=<span class="number">96</span>, kernel_size=<span class="number">11</span>,strides=<span class="number">4</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">        nn.MaxPool2D(pool_size=<span class="number">3</span>, strides=<span class="number">2</span>),</span><br><span class="line">        <span class="comment"># 第二阶段</span></span><br><span class="line">        nn.Conv2D(channels=<span class="number">256</span>, kernel_size=<span class="number">5</span>,padding=<span class="number">2</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">        nn.MaxPool2D(pool_size=<span class="number">3</span>, strides=<span class="number">2</span>),</span><br><span class="line">        <span class="comment"># 第三阶段</span></span><br><span class="line">        nn.Conv2D(channels=<span class="number">384</span>, kernel_size=<span class="number">3</span>,padding=<span class="number">1</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">        nn.Conv2D(channels=<span class="number">384</span>, kernel_size=<span class="number">3</span>,padding=<span class="number">1</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">        nn.Conv2D(channels=<span class="number">256</span>, kernel_size=<span class="number">3</span>,padding=<span class="number">1</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">        nn.MaxPool2D(pool_size=<span class="number">3</span>, strides=<span class="number">2</span>),</span><br><span class="line">        <span class="comment"># 第四阶段</span></span><br><span class="line">        nn.Flatten(),</span><br><span class="line">        nn.Dense(<span class="number">4096</span>, activation=<span class="string">"relu"</span>),</span><br><span class="line">        nn.Dropout(<span class="number">.5</span>),</span><br><span class="line">        <span class="comment"># 第五阶段</span></span><br><span class="line">        nn.Dense(<span class="number">4096</span>, activation=<span class="string">"relu"</span>),</span><br><span class="line">        nn.Dropout(<span class="number">.5</span>),</span><br><span class="line">        <span class="comment"># 第六阶段</span></span><br><span class="line">        nn.Dense(<span class="number">10</span>) <span class="comment">##当时是1000</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment">## 读取数据</span></span><br><span class="line"><span class="comment"># Alexnet使用Imagenet数据，其中输入图片大小一般是224x224。因为Imagenet数据训练时间过长，</span></span><br><span class="line"><span class="comment"># 我们还是用前面的MNIST来演示。读取数据的时候我们额外做了一步将数据扩大到原版Alexnet使用的224x224。</span></span><br><span class="line"><span class="keyword">import</span> utils</span><br><span class="line">train_data, test_data = utils.load_data_fashion_mnist(batch_size=<span class="number">64</span>, resize=<span class="number">224</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 训练</span></span><br><span class="line"><span class="comment"># 这时候我们可以开始训练。相对于前面的LeNet，我们做了如下三个改动：</span></span><br><span class="line"><span class="comment"># 1. 我们使用`Xavier`来初始化参数</span></span><br><span class="line"><span class="comment"># 2. 使用了更小的学习率</span></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> init</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"></span><br><span class="line">ctx = mx.gpu()</span><br><span class="line">net.initialize(ctx=ctx, init=init.Xavier()) <span class="comment">##初始化用了Xavier()而不是默认的随机初始化</span></span><br><span class="line"></span><br><span class="line">loss = gluon.loss.SoftmaxCrossEntropyLoss()</span><br><span class="line">trainer = gluon.Trainer(net.collect_params(), <span class="string">'sgd'</span>, &#123;<span class="string">'learning_rate'</span>: <span class="number">0.01</span>&#125;)</span><br><span class="line">utils.train(train_data, test_data, net, loss,trainer, ctx, num_epochs=<span class="number">5</span>)</span><br></pre></td></tr></table></figure></p>
<p>效果比以前的好些!</p>
<h2 id="3-8-VGGNet"><a href="#3-8-VGGNet" class="headerlink" title="3.8.VGGNet"></a>3.8.VGGNet</h2><p>我们从Alexnet看到网络的层数的激增。这个意味着即使是用Gluon手动写代码一层一层的堆每一层也很麻烦，更不用说从0开始了。幸运的是编程语言提供了很好的方法来解决这个问题：函数和循环。如果网络结构里面有大量重复结构，那么我们可以很紧凑来构造这些网络。第一个使用这种结构的深度网络是VGG。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># VGG的一个关键是使用很多有着相对小的kernel（3x3）的卷积层然后接上一个池化层，</span></span><br><span class="line"><span class="comment"># 之后再将这个模块重复多次。下面我们先定义一个这样的块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vgg_block</span><span class="params">(num_convs, channels)</span>:</span></span><br><span class="line">    out = nn.Sequential()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(num_convs):</span><br><span class="line">        out.add(nn.Conv2D(channels=channels, kernel_size=<span class="number">3</span>,padding=<span class="number">1</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">    out.add(nn.MaxPool2D(pool_size=<span class="number">2</span>, strides=<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们实例化一个这样的块，里面有两个卷积层，每个卷积层输出通道是128：</span></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"></span><br><span class="line">blk = vgg_block(<span class="number">2</span>, <span class="number">128</span>)</span><br><span class="line">blk.initialize()</span><br><span class="line">x = nd.random.uniform(shape=(<span class="number">2</span>,<span class="number">3</span>,<span class="number">16</span>,<span class="number">16</span>))</span><br><span class="line">y = blk(x)</span><br><span class="line"><span class="keyword">print</span> y.shape  <span class="comment">##(2L, 128L, 8L, 8L)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到经过一个这样的块后，长宽会减半，通道也会改变。然后我们定义如何将这些块堆起来：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vgg_stack</span><span class="params">(architecture)</span>:</span></span><br><span class="line">    out = nn.Sequential()</span><br><span class="line">    <span class="keyword">for</span> (num_convs, channels) <span class="keyword">in</span> architecture:</span><br><span class="line">        out.add(vgg_block(num_convs, channels))</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里我们定义一个最简单的一个VGG结构，它有8个卷积层，和跟Alexnet一样的3个全连接层。这个网络又称VGG 11.</span></span><br><span class="line">num_outputs = <span class="number">10</span></span><br><span class="line">architecture = ((<span class="number">1</span>,<span class="number">64</span>), (<span class="number">1</span>,<span class="number">128</span>), (<span class="number">2</span>,<span class="number">256</span>), (<span class="number">2</span>,<span class="number">512</span>), (<span class="number">2</span>,<span class="number">512</span>))</span><br><span class="line">net = nn.Sequential()</span><br><span class="line"><span class="keyword">with</span> net.name_scope():</span><br><span class="line">    net.add(</span><br><span class="line">        vgg_stack(architecture),</span><br><span class="line">        nn.Flatten(),</span><br><span class="line">        nn.Dense(<span class="number">4096</span>, activation=<span class="string">"relu"</span>),</span><br><span class="line">        nn.Dropout(<span class="number">.5</span>),</span><br><span class="line">        nn.Dense(<span class="number">4096</span>, activation=<span class="string">"relu"</span>),</span><br><span class="line">        nn.Dropout(<span class="number">.5</span>),</span><br><span class="line">        nn.Dense(num_outputs))</span><br><span class="line"><span class="keyword">print</span> net</span><br><span class="line"><span class="comment"># Sequential(</span></span><br><span class="line"><span class="comment">#   (0): Sequential(</span></span><br><span class="line"><span class="comment">#     (0): Sequential(</span></span><br><span class="line"><span class="comment">#       (0): Conv2D(64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span></span><br><span class="line"><span class="comment">#       (1): MaxPool2D(size=(2, 2), stride=(2, 2), padding=(0, 0), ceil_mode=False)</span></span><br><span class="line"><span class="comment">#     )</span></span><br><span class="line"><span class="comment">#     (1): Sequential(</span></span><br><span class="line"><span class="comment">#       (0): Conv2D(128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span></span><br><span class="line"><span class="comment">#       (1): MaxPool2D(size=(2, 2), stride=(2, 2), padding=(0, 0), ceil_mode=False)</span></span><br><span class="line"><span class="comment">#     )</span></span><br><span class="line"><span class="comment">#     (2): Sequential(</span></span><br><span class="line"><span class="comment">#       (0): Conv2D(256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span></span><br><span class="line"><span class="comment">#       (1): Conv2D(256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span></span><br><span class="line"><span class="comment">#       (2): MaxPool2D(size=(2, 2), stride=(2, 2), padding=(0, 0), ceil_mode=False)</span></span><br><span class="line"><span class="comment">#     )</span></span><br><span class="line"><span class="comment">#     (3): Sequential(</span></span><br><span class="line"><span class="comment">#       (0): Conv2D(512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span></span><br><span class="line"><span class="comment">#       (1): Conv2D(512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span></span><br><span class="line"><span class="comment">#       (2): MaxPool2D(size=(2, 2), stride=(2, 2), padding=(0, 0), ceil_mode=False)</span></span><br><span class="line"><span class="comment">#     )</span></span><br><span class="line"><span class="comment">#     (4): Sequential(</span></span><br><span class="line"><span class="comment">#       (0): Conv2D(512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span></span><br><span class="line"><span class="comment">#       (1): Conv2D(512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span></span><br><span class="line"><span class="comment">#       (2): MaxPool2D(size=(2, 2), stride=(2, 2), padding=(0, 0), ceil_mode=False)</span></span><br><span class="line"><span class="comment">#     )</span></span><br><span class="line"><span class="comment">#   )</span></span><br><span class="line"><span class="comment">#   (1): Flatten</span></span><br><span class="line"><span class="comment">#   (2): Dense(4096, Activation(relu))</span></span><br><span class="line"><span class="comment">#   (3): Dropout(p = 0.5)</span></span><br><span class="line"><span class="comment">#   (4): Dense(4096, Activation(relu))</span></span><br><span class="line"><span class="comment">#   (5): Dropout(p = 0.5)</span></span><br><span class="line"><span class="comment">#   (6): Dense(10, linear)</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 模型训练</span></span><br><span class="line"><span class="comment"># 这里跟Alexnet的训练代码一样除了我们只将图片扩大到96x96来节省些计算，和默认使用稍微大点的学习率。</span></span><br><span class="line"><span class="keyword">import</span> utils</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> init</span><br><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"></span><br><span class="line">train_data, test_data = utils.load_data_fashion_mnist(batch_size=<span class="number">64</span>, resize=<span class="number">96</span>)</span><br><span class="line">ctx = mx.gpu()</span><br><span class="line">net.initialize(ctx=ctx, init=init.Xavier())</span><br><span class="line">loss = gluon.loss.SoftmaxCrossEntropyLoss()</span><br><span class="line">trainer = gluon.Trainer(net.collect_params(), <span class="string">'sgd'</span>, &#123;<span class="string">'learning_rate'</span>: <span class="number">0.05</span>&#125;)</span><br><span class="line">utils.train(train_data, test_data, net, loss,trainer, ctx, num_epochs=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p>
<p>#通过使用重复的元素，我们可以通过循环和函数来定义模型。使用不同的配置(<code>architecture</code>)可以得到一系列不同的模型。<br>练习</p>
<ul>
<li>尝试多跑几轮，看看跟LeNet/Alexnet比怎么样？</li>
<li>尝试下构造VGG其他常用模型，例如VGG16， VGG19. （提示：可以参考<a href="https://arxiv.org/abs/1409.1556" target="_blank" rel="external">VGG论文</a>里的表1。）</li>
<li>把图片从默认的224x224降到96x96有什么影响？</li>
</ul>
<h2 id="4-1-__u4ECE0_u5F00_u59CB_u6279_u91CF_u5F52_u4E00_u5316BatchNorm"><a href="#4-1-__u4ECE0_u5F00_u59CB_u6279_u91CF_u5F52_u4E00_u5316BatchNorm" class="headerlink" title="4.1. 从0开始批量归一化BatchNorm"></a>4.1. 从0开始批量归一化BatchNorm</h2><p>在实际应用中，我们通常将输入数据的每个样本或者每个特征进行归一化，就是将均值变为0方差变为1，来使得数值更稳定。<br>它对很深的神经网络能够训练，对learningrate不那么敏感。<br>批量归一化对每层都归一化。<br>批量归一化试图对深度学习模型的某一层所使用的激活函数的输入进行归一化：使批量呈标准正态分布（均值为0，标准差为1）。<br>批量归一化通常应用于输入层或任意中间层。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们现在来动手实现一个简化的批量归一化层。实现时对全连接层和二维卷积层两种情况做了区分。</span></span><br><span class="line"><span class="comment"># 对于全连接层，很明显我们要对每个批量进行归一化。然而这里需要注意的是，对于二维卷积，我们要对每个通道进行归一化，</span></span><br><span class="line"><span class="comment"># 并需要保持四维形状使得可以正确地广播。</span></span><br><span class="line"><span class="comment">#均值变0 方差变1</span></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pure_batch_norm</span><span class="params">(X, gamma, beta, eps=<span class="number">1e-5</span>)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(X.shape) <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="comment"># 全连接: batch_size x feature</span></span><br><span class="line">    <span class="keyword">if</span> len(X.shape) == <span class="number">2</span>:<span class="comment">#全连接情况</span></span><br><span class="line">        <span class="comment"># 每个输入维度在样本上的平均和方差</span></span><br><span class="line">        mean = X.mean(axis=<span class="number">0</span>)</span><br><span class="line">        variance = ((X - mean)**<span class="number">2</span>).mean(axis=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 2D卷积: batch_size x channel x height x width</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment">#卷积情况</span></span><br><span class="line">        <span class="comment"># 对每个通道算均值和方差，需要保持4D形状使得可以正确地广播</span></span><br><span class="line">        mean = X.mean(axis=(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>), keepdims=<span class="keyword">True</span>)</span><br><span class="line">        variance = ((X - mean)**<span class="number">2</span>).mean(axis=(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>), keepdims=<span class="keyword">True</span>) <span class="comment">##rgb的话通道为3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 均一化</span></span><br><span class="line">    X_hat = (X - mean) / nd.sqrt(variance + eps)</span><br><span class="line">    <span class="comment"># reshape 拉升和偏移</span></span><br><span class="line">    <span class="comment">##Y=gamma*X（均一化后的数据）+beta 不想归一化时可以利用训练的gamma，beta还原数据</span></span><br><span class="line">    <span class="keyword">return</span> gamma.reshape(mean.shape) * X_hat + beta.reshape(mean.shape)</span><br><span class="line"></span><br><span class="line">X=mx.ndarray.random_normal(shape=(<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line"><span class="keyword">print</span> X</span><br><span class="line"><span class="keyword">print</span> X.mean(axis=(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>),keepdims=<span class="keyword">True</span>) <span class="comment">#[[[[ 0.04687225]] [[-0.05943033]] [[-0.2027849 ]]]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面我们检查一下。我们先定义全连接层的输入是这样的。每一行是批量中的一个实例。</span></span><br><span class="line">A = nd.arange(<span class="number">6</span>).reshape((<span class="number">3</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">print</span> A <span class="comment">#[[ 0.  1.][ 2.  3.][ 4.  5.]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们希望批量中的  每一列  都被归一化。结果符合预期。</span></span><br><span class="line"><span class="comment">## ？？？？全部一起均一化呢？？？</span></span><br><span class="line"><span class="keyword">print</span> pure_batch_norm(A, gamma=nd.array([<span class="number">1</span>,<span class="number">1</span>]), beta=nd.array([<span class="number">0</span>,<span class="number">0</span>]))</span><br><span class="line"><span class="comment">#[[-1.22474265 -1.22474265][ 0.          0.        ] [ 1.22474265  1.22474265]]##均值0 方差1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面我们定义二维卷积网络层的输入是这样的。</span></span><br><span class="line">B = nd.arange(<span class="number">18</span>).reshape((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="keyword">print</span> B</span><br><span class="line"><span class="comment"># 结果也如预期那样，我们对每个通道做了归一化。</span></span><br><span class="line"><span class="keyword">print</span> pure_batch_norm(B, gamma=nd.array([<span class="number">1</span>,<span class="number">1</span>]), beta=nd.array([<span class="number">0</span>,<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 批量归一化层</span></span><br><span class="line"><span class="comment"># 你可能会想，既然训练时用了批量归一化，那么测试时也该用批量归一化吗？其实这个问题乍一想不是很好回答，因为：</span></span><br><span class="line"><span class="comment"># * 不用的话，训练出的模型参数很可能在测试时就不准确了；</span></span><br><span class="line"><span class="comment"># * 用的话，万一测试的数据就只有一个数据实例就不好办了。</span></span><br><span class="line"><span class="comment"># 事实上，在测试时我们还是需要继续使用批量归一化的，只是需要做些改动。</span></span><br><span class="line"><span class="comment"># 在测试时，我们需要把原先训练时用到的批量均值和方差替换成**整个**训练数据的均值和方差。</span></span><br><span class="line"><span class="comment"># 但是当训练数据极大时，这个计算开销很大。因此，我们用移动平均的方法来近似计算</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了方便讨论批量归一化层的实现，我们先看下面这段代码来理解``Python``变量可以如何修改。</span></span><br><span class="line"><span class="comment">## 拿到全部训练数据的均值方差供测试数据用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_norm</span><span class="params">(X, gamma, beta, is_training, moving_mean, moving_variance,</span><br><span class="line">               eps = <span class="number">1e-5</span>, moving_momentum = <span class="number">0.9</span>)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(X.shape) <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="comment"># 全连接: batch_size x feature</span></span><br><span class="line">    <span class="keyword">if</span> len(X.shape) == <span class="number">2</span>:</span><br><span class="line">        <span class="comment"># 每个输入维度在样本上的平均和方差</span></span><br><span class="line">        mean = X.mean(axis=<span class="number">0</span>)</span><br><span class="line">        variance = ((X - mean)**<span class="number">2</span>).mean(axis=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 2D卷积: batch_size x channel x height x width</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 对每个通道算均值和方差，需要保持4D形状使得可以正确的广播</span></span><br><span class="line">        mean = X.mean(axis=(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>), keepdims=<span class="keyword">True</span>)</span><br><span class="line">        variance = ((X - mean)**<span class="number">2</span>).mean(axis=(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>), keepdims=<span class="keyword">True</span>)</span><br><span class="line">        <span class="comment"># 变形使得可以正确的广播</span></span><br><span class="line">        moving_mean = moving_mean.reshape(mean.shape)</span><br><span class="line">        moving_variance = moving_variance.reshape(mean.shape)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 均一化</span></span><br><span class="line">    <span class="keyword">if</span> is_training:</span><br><span class="line">        X_hat = (X - mean) / nd.sqrt(variance + eps)</span><br><span class="line">        <span class="comment">#!!! 更新全局的均值和方差</span></span><br><span class="line">        moving_mean[:] = moving_momentum * moving_mean + (</span><br><span class="line">            <span class="number">1.0</span> - moving_momentum) * mean</span><br><span class="line">        moving_variance[:] = moving_momentum * moving_variance + (</span><br><span class="line">            <span class="number">1.0</span> - moving_momentum) * variance</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#!!! 测试阶段使用全局的均值和方差</span></span><br><span class="line">        X_hat = (X - moving_mean) / nd.sqrt(moving_variance + eps)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拉升和偏移</span></span><br><span class="line">    <span class="keyword">return</span> gamma.reshape(mean.shape) * X_hat + beta.reshape(mean.shape)</span><br><span class="line"></span><br><span class="line">ctx = mx.gpu()</span><br><span class="line">weight_scale = <span class="number">.01</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># output channels = 20, kernel = (5,5)</span></span><br><span class="line">c1 = <span class="number">20</span></span><br><span class="line">W1 = nd.random.normal(shape=(c1,<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>), scale=weight_scale, ctx=ctx)</span><br><span class="line">b1 = nd.zeros(c1, ctx=ctx)</span><br><span class="line"><span class="comment"># batch norm 1  gamma beta也是需要学</span></span><br><span class="line">gamma1 = nd.random.normal(shape=c1, scale=weight_scale, ctx=ctx)</span><br><span class="line">beta1 = nd.random.normal(shape=c1, scale=weight_scale, ctx=ctx)</span><br><span class="line">moving_mean1 = nd.zeros(c1, ctx=ctx)</span><br><span class="line">moving_variance1 = nd.zeros(c1, ctx=ctx)</span><br><span class="line"><span class="comment"># output channels = 50, kernel = (3,3)</span></span><br><span class="line">c2 = <span class="number">50</span></span><br><span class="line">W2 = nd.random_normal(shape=(c2,c1,<span class="number">3</span>,<span class="number">3</span>), scale=weight_scale, ctx=ctx)</span><br><span class="line">b2 = nd.zeros(c2, ctx=ctx)</span><br><span class="line"><span class="comment"># batch norm 2</span></span><br><span class="line">gamma2 = nd.random.normal(shape=c2, scale=weight_scale, ctx=ctx)</span><br><span class="line">beta2 = nd.random.normal(shape=c2, scale=weight_scale, ctx=ctx)</span><br><span class="line">moving_mean2 = nd.zeros(c2, ctx=ctx)</span><br><span class="line">moving_variance2 = nd.zeros(c2, ctx=ctx)</span><br><span class="line"><span class="comment"># output dim = 128</span></span><br><span class="line">o3 = <span class="number">128</span></span><br><span class="line">W3 = nd.random.normal(shape=(<span class="number">1250</span>, o3), scale=weight_scale, ctx=ctx)</span><br><span class="line">b3 = nd.zeros(o3, ctx=ctx)</span><br><span class="line"><span class="comment"># output dim = 10</span></span><br><span class="line">W4 = nd.random_normal(shape=(W3.shape[<span class="number">1</span>], <span class="number">10</span>), scale=weight_scale, ctx=ctx)</span><br><span class="line">b4 = nd.zeros(W4.shape[<span class="number">1</span>], ctx=ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意这里moving_*是不需要更新的</span></span><br><span class="line">params = [W1, b1, gamma1, beta1,</span><br><span class="line">          W2, b2, gamma2, beta2,</span><br><span class="line">          W3, b3, W4, b4]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">    param.attach_grad()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面定义模型。我们添加了批量归一化层。特别要注意我们添加的位置：在卷积层后，在激活函数前。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">net</span><span class="params">(X, is_training=False, verbose=False)</span>:</span></span><br><span class="line">    X = X.as_in_context(W1.context) <span class="comment">##GPU or CPU</span></span><br><span class="line">    <span class="comment"># 第一层卷积</span></span><br><span class="line">    h1_conv = nd.Convolution(data=X, weight=W1, bias=b1, kernel=W1.shape[<span class="number">2</span>:], num_filter=c1)</span><br><span class="line">    <span class="comment">### 添加了批量归一化层</span></span><br><span class="line">    h1_bn = batch_norm(h1_conv, gamma1, beta1, is_training,moving_mean1, moving_variance1)</span><br><span class="line">    h1_activation = nd.relu(h1_bn)</span><br><span class="line">    h1 = nd.Pooling(data=h1_activation, pool_type=<span class="string">"max"</span>, kernel=(<span class="number">2</span>,<span class="number">2</span>), stride=(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">    <span class="comment"># 第二层卷积</span></span><br><span class="line">    h2_conv = nd.Convolution(data=h1, weight=W2, bias=b2, kernel=W2.shape[<span class="number">2</span>:], num_filter=c2)</span><br><span class="line">    <span class="comment">### 添加了批量归一化层</span></span><br><span class="line">    h2_bn = batch_norm(h2_conv, gamma2, beta2, is_training,moving_mean2, moving_variance2)</span><br><span class="line">    h2_activation = nd.relu(h2_bn)</span><br><span class="line">    h2 = nd.Pooling(data=h2_activation, pool_type=<span class="string">"max"</span>, kernel=(<span class="number">2</span>,<span class="number">2</span>), stride=(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">    h2 = nd.flatten(h2)</span><br><span class="line">    <span class="comment"># 第一层全连接</span></span><br><span class="line">    h3_linear = nd.dot(h2, W3) + b3</span><br><span class="line">    h3 = nd.relu(h3_linear)</span><br><span class="line">    <span class="comment"># 第二层全连接</span></span><br><span class="line">    h4_linear = nd.dot(h3, W4) + b4</span><br><span class="line">    <span class="keyword">if</span> verbose:</span><br><span class="line">        print(<span class="string">'1st conv block:'</span>, h1.shape)</span><br><span class="line">        print(<span class="string">'2nd conv block:'</span>, h2.shape)</span><br><span class="line">        print(<span class="string">'1st dense:'</span>, h3.shape)</span><br><span class="line">        print(<span class="string">'2nd dense:'</span>, h4_linear.shape)</span><br><span class="line">        print(<span class="string">'output:'</span>, h4_linear)</span><br><span class="line">    <span class="keyword">return</span> h4_linear</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面我们训练并测试模型。</span></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> autograd</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"><span class="keyword">import</span> utils</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">256</span></span><br><span class="line">train_data, test_data = utils.load_data_fashion_mnist(batch_size)</span><br><span class="line">softmax_cross_entropy = gluon.loss.SoftmaxCrossEntropyLoss()</span><br><span class="line">learning_rate = <span class="number">0.2</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    train_loss = <span class="number">0.</span></span><br><span class="line">    train_acc = <span class="number">0.</span></span><br><span class="line">    <span class="keyword">for</span> data, label <span class="keyword">in</span> train_data:</span><br><span class="line">        label = label.as_in_context(ctx)</span><br><span class="line">        <span class="keyword">with</span> autograd.record():</span><br><span class="line">            output = net(data, is_training=<span class="keyword">True</span>)</span><br><span class="line">            loss = softmax_cross_entropy(output, label)</span><br><span class="line">        loss.backward()</span><br><span class="line">        utils.SGD(params, learning_rate/batch_size)</span><br><span class="line"></span><br><span class="line">        train_loss += nd.mean(loss).asscalar()</span><br><span class="line">        train_acc += utils.accuracy(output, label)</span><br><span class="line"></span><br><span class="line">    test_acc = utils.evaluate_accuracy(test_data, net, ctx)</span><br><span class="line">    print(<span class="string">"Epoch %d. Loss: %f, Train acc %f, Test acc %f"</span> % (</span><br><span class="line">            epoch, train_loss/len(train_data), train_acc/len(train_data), test_acc))</span><br></pre></td></tr></table></figure></p>
<h2 id="4-2-gluon_u7248batchnorm"><a href="#4-2-gluon_u7248batchnorm" class="headerlink" title="4.2.gluon版batchnorm"></a>4.2.gluon版batchnorm</h2><p>使用Gluon我们可以很轻松地添加批量归一化层。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有了`Gluon`，我们模型的定义工作变得简单了许多。我们只需要添加`nn.BatchNorm`层并指定对二维卷积的通道(`axis=1`)进行批量归一化。</span></span><br><span class="line"><span class="built_in">from</span> mxnet.gluon import nn</span><br><span class="line"></span><br><span class="line">net = nn.Sequential()</span><br><span class="line"><span class="operator">with</span> net.name_scope():</span><br><span class="line">    <span class="comment"># 第一层卷积</span></span><br><span class="line">    net.<span class="built_in">add</span>(nn.Conv2D(channels=<span class="number">20</span>, kernel_size=<span class="number">5</span>))</span><br><span class="line">    <span class="comment">### 添加了批量归一化层</span></span><br><span class="line">    net.<span class="built_in">add</span>(nn.BatchNorm(axis=<span class="number">1</span>))<span class="comment">##########################</span></span><br><span class="line">    net.<span class="built_in">add</span>(nn.Activation(activation=<span class="string">'relu'</span>))</span><br><span class="line">    net.<span class="built_in">add</span>(nn.MaxPool2D(pool_size=<span class="number">2</span>, strides=<span class="number">2</span>))</span><br><span class="line">    <span class="comment"># 第二层卷积</span></span><br><span class="line">    net.<span class="built_in">add</span>(nn.Conv2D(channels=<span class="number">50</span>, kernel_size=<span class="number">3</span>))</span><br><span class="line">    <span class="comment">### 添加了批量归一化层</span></span><br><span class="line">    net.<span class="built_in">add</span>(nn.BatchNorm(axis=<span class="number">1</span>))</span><br><span class="line">    net.<span class="built_in">add</span>(nn.Activation(activation=<span class="string">'relu'</span>))</span><br><span class="line">    net.<span class="built_in">add</span>(nn.MaxPool2D(pool_size=<span class="number">2</span>, strides=<span class="number">2</span>))</span><br><span class="line">    net.<span class="built_in">add</span>(nn.Flatten())</span><br><span class="line">    <span class="comment"># 第一层全连接</span></span><br><span class="line">    net.<span class="built_in">add</span>(nn.Dense(<span class="number">128</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">    <span class="comment"># 第二层全连接</span></span><br><span class="line">    net.<span class="built_in">add</span>(nn.Dense(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">## 模型训练</span></span><br><span class="line"><span class="comment"># 剩下的代码跟之前没什么不一样。</span></span><br><span class="line">import utils</span><br><span class="line"><span class="built_in">from</span> mxnet import autograd</span><br><span class="line"><span class="built_in">from</span> mxnet import gluon</span><br><span class="line"><span class="built_in">from</span> mxnet import nd</span><br><span class="line">import mxnet <span class="keyword">as</span> mx</span><br><span class="line"><span class="comment"># from mxnet import init</span></span><br><span class="line"></span><br><span class="line">ctx = mx.gpu()</span><br><span class="line">net.initialize(ctx=ctx)</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">256</span></span><br><span class="line">train_data, test_data = utils.load_data_fashion_mnist(batch_size)</span><br><span class="line"></span><br><span class="line">softmax_cross_entropy = gluon.loss.SoftmaxCrossEntropyLoss()</span><br><span class="line">trainer = gluon.Trainer(net.collect_params(), <span class="string">'sgd'</span>, &#123;<span class="string">'learning_rate'</span>: <span class="number">0.2</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="operator">in</span> range(<span class="number">5</span>):</span><br><span class="line">    train_loss = <span class="number">0.</span></span><br><span class="line">    train_acc = <span class="number">0.</span></span><br><span class="line">    <span class="keyword">for</span> data, label <span class="operator">in</span> train_data:</span><br><span class="line">        label = label.as_in_context(ctx)</span><br><span class="line">        <span class="operator">with</span> autograd.record():</span><br><span class="line">            output = net(data.as_in_context(ctx))</span><br><span class="line">            loss = softmax_cross_entropy(output, label)</span><br><span class="line">        loss.backward()</span><br><span class="line">        trainer.step(batch_size)</span><br><span class="line"></span><br><span class="line">        train_loss += nd.mean(loss).asscalar()</span><br><span class="line">        train_acc += utils.accuracy(output, label)</span><br><span class="line">    test_acc = utils.evaluate_accuracy(test_data, net, ctx)</span><br><span class="line">    print(<span class="string">"Epoch %d. Loss: %f, Train acc %f, Test acc %f"</span> % (</span><br><span class="line">        epoch, train_loss/<span class="built_in">len</span>(train_data),</span><br><span class="line">        train_acc/<span class="built_in">len</span>(train_data), test_acc))</span><br></pre></td></tr></table></figure></p>
<h2 id="4-3-_u7F51_u7EDC_u4E2D_u7684_u7F51_u7EDCNIN"><a href="#4-3-_u7F51_u7EDC_u4E2D_u7684_u7F51_u7EDCNIN" class="headerlink" title="4.3.网络中的网络NIN"></a>4.3.网络中的网络NIN</h2><p>首先一点是注意到卷积神经网络一般分成两块，一块主要由卷积层构成，另一块主要是全连接层。在Alexnet里我们看到如何把卷积层块和全连接层分别加深加宽从而得到深度网络。另外一个自然的想法是，我们可以串联数个卷积层块和全连接层块来构建深度网络。<br><img src="/img/deeplearn/nin.svg" alt="nin"><br>不过这里的一个难题是，卷积的输入输出是4D矩阵，然而全连接是2D。同时在卷积神经网络里我们提到如果把4D矩阵转成2D做全连接，这个会导致全连接层有过多的参数。NiN提出只对通道层做全连接并且像素之间共享权重来解决上述两个问题。就是说，我们使用kernel大小是1x1的卷积。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mlpconv</span><span class="params">(channels, kernel_size, padding,strides=<span class="number">1</span>, max_pooling=True)</span>:</span></span><br><span class="line">    out = nn.Sequential()</span><br><span class="line">    <span class="keyword">with</span> out.name_scope():<span class="comment">### NIN</span></span><br><span class="line">        out.add(</span><br><span class="line">            nn.Conv2D(channels=channels, kernel_size=kernel_size,strides=strides, padding=padding,activation=<span class="string">'relu'</span>),</span><br><span class="line">            nn.Conv2D(channels=channels, kernel_size=<span class="number">1</span>,padding=<span class="number">0</span>, strides=<span class="number">1</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">            nn.Conv2D(channels=channels, kernel_size=<span class="number">1</span>,padding=<span class="number">0</span>, strides=<span class="number">1</span>, activation=<span class="string">'relu'</span>))</span><br><span class="line">        <span class="keyword">if</span> max_pooling:</span><br><span class="line">            out.add(nn.MaxPool2D(pool_size=<span class="number">3</span>, strides=<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试一下：</span></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"></span><br><span class="line">blk = mlpconv(<span class="number">64</span>, <span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line">blk.initialize()</span><br><span class="line"></span><br><span class="line">x = nd.random.uniform(shape=(<span class="number">32</span>, <span class="number">3</span>, <span class="number">16</span>, <span class="number">16</span>))</span><br><span class="line">y = blk(x)</span><br><span class="line"><span class="keyword">print</span> y.shape <span class="comment">##(32L, 64L, 6L, 6L)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NiN的卷积层的参数跟Alexnet类似，使用三组不同的设定</span></span><br><span class="line"><span class="comment"># kernel: 11x11, channels: 96</span></span><br><span class="line"><span class="comment"># kernel: 5x5, channels: 256</span></span><br><span class="line"><span class="comment"># kernel: 3x3, channels: 384</span></span><br><span class="line"><span class="comment"># 除了使用了1x1卷积外，NiN在最后不是使用全连接，而是使用通道数为输出类别个数的</span></span><br><span class="line"><span class="comment"># `mlpconv`，外接一个平均池化层来将每个通道里的数值平均成一个标量。</span></span><br><span class="line">net = nn.Sequential()</span><br><span class="line"><span class="keyword">with</span> net.name_scope():</span><br><span class="line">    net.add(</span><br><span class="line">        mlpconv(<span class="number">96</span>, <span class="number">11</span>, <span class="number">0</span>, strides=<span class="number">4</span>),</span><br><span class="line">        mlpconv(<span class="number">256</span>, <span class="number">5</span>, <span class="number">2</span>),</span><br><span class="line">        mlpconv(<span class="number">384</span>, <span class="number">3</span>, <span class="number">1</span>),</span><br><span class="line">        nn.Dropout(<span class="number">.5</span>),</span><br><span class="line">        <span class="comment"># 目标类为10类</span></span><br><span class="line">        mlpconv(<span class="number">10</span>, <span class="number">3</span>, <span class="number">1</span>, max_pooling=<span class="keyword">False</span>),</span><br><span class="line">        <span class="comment"># 输入为 batch_size x 10 x 5 x 5, 通过AvgPool2D转成</span></span><br><span class="line">        <span class="comment"># batch_size x 10 x 1 x 1。</span></span><br><span class="line">        nn.AvgPool2D(pool_size=<span class="number">5</span>),</span><br><span class="line">        <span class="comment"># 转成 batch_size x 10</span></span><br><span class="line">        nn.Flatten()</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取数据并训练</span></span><br><span class="line"><span class="comment"># 跟Alexnet类似，但使用了更大的学习率。</span></span><br><span class="line"><span class="keyword">import</span> utils</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> init</span><br><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"></span><br><span class="line">train_data, test_data = utils.load_data_fashion_mnist(batch_size=<span class="number">64</span>, resize=<span class="number">224</span>)</span><br><span class="line">ctx = mx.gpu()</span><br><span class="line">net.initialize(ctx=ctx, init=init.Xavier())</span><br><span class="line">loss = gluon.loss.SoftmaxCrossEntropyLoss()</span><br><span class="line">trainer = gluon.Trainer(net.collect_params(),<span class="string">'sgd'</span>, &#123;<span class="string">'learning_rate'</span>: <span class="number">0.1</span>&#125;)</span><br><span class="line">utils.train(train_data, test_data, net, loss,trainer, ctx, num_epochs=<span class="number">10</span>)</span><br></pre></td></tr></table></figure></p>
<p>这种“一卷卷到底”最后加一个平均池化层的做法也成为了深度卷积神经网络的常用设计。</p>
<h2 id="4-4-GoogleNet"><a href="#4-4-GoogleNet" class="headerlink" title="4.4.GoogleNet"></a>4.4.GoogleNet</h2><p>在2014年的Imagenet竞赛里，Google的研究人员利用一个新的网络结构取得很大的优先。这个叫做GoogleLeNet的网络虽然在名字上是向LeNet致敬，但网络结构里很难看到LeNet的影子。它颠覆的大家对卷积神经网络串联一系列层的固定做法。下图是其<a href="https://arxiv.org/abs/1409.4842" target="_blank" rel="external">论文</a>对GoogLeNet的可视化<br><img src="/img/deeplearn/googlenet.png" alt="googlenet"><br>可以看到其中有多个四个并行卷积层的块。这个块一般叫做Inception，其基于Network in network的思想做了很大的改进。我们先看下如何定义一个下图所示的Inception块。<br><img src="/img/deeplearn/inception.svg" alt="Inception"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inception</span><span class="params">(nn.Block)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n1_1, n2_1, n2_3, n3_1, n3_5, n4_1, **kwargs)</span>:</span></span><br><span class="line">        super(Inception, self).__init__(**kwargs)</span><br><span class="line">        <span class="keyword">with</span> self.name_scope():</span><br><span class="line">            <span class="comment"># path 1</span></span><br><span class="line">            self.p1_conv_1 = nn.Conv2D(n1_1, kernel_size=<span class="number">1</span>,activation=<span class="string">'relu'</span>)</span><br><span class="line">            <span class="comment"># path 2</span></span><br><span class="line">            self.p2_conv_1 = nn.Conv2D(n2_1, kernel_size=<span class="number">1</span>,activation=<span class="string">'relu'</span>)</span><br><span class="line">            self.p2_conv_3 = nn.Conv2D(n2_3, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>,activation=<span class="string">'relu'</span>)</span><br><span class="line">            <span class="comment"># path 3</span></span><br><span class="line">            self.p3_conv_1 = nn.Conv2D(n3_1, kernel_size=<span class="number">1</span>,activation=<span class="string">'relu'</span>)</span><br><span class="line">            self.p3_conv_5 = nn.Conv2D(n3_5, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>,activation=<span class="string">'relu'</span>)</span><br><span class="line">            <span class="comment"># path 4</span></span><br><span class="line">            self.p4_pool_3 = nn.MaxPool2D(pool_size=<span class="number">3</span>, padding=<span class="number">1</span>,strides=<span class="number">1</span>)</span><br><span class="line">            self.p4_conv_1 = nn.Conv2D(n4_1, kernel_size=<span class="number">1</span>,activation=<span class="string">'relu'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        p1 = self.p1_conv_1(x)</span><br><span class="line">        p2 = self.p2_conv_3(self.p2_conv_1(x))</span><br><span class="line">        p3 = self.p3_conv_5(self.p3_conv_1(x))</span><br><span class="line">        p4 = self.p4_conv_1(self.p4_pool_3(x))</span><br><span class="line">        <span class="keyword">return</span> nd.concat(p1, p2, p3, p4, dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到Inception里有四个并行的线路。</span></span><br><span class="line"><span class="comment"># 1. 单个1x1卷积。</span></span><br><span class="line"><span class="comment"># 2. 1x1卷积接上3x3卷积。通常前者的通道数少于输入通道，这样减少后者的计算量。后者加上了`padding=1`使得输出的长宽的输入一致</span></span><br><span class="line"><span class="comment"># 3. 同2，但换成了5x5卷积</span></span><br><span class="line"><span class="comment"># 4. 和1类似，但卷积前用了最大池化层</span></span><br><span class="line"><span class="comment"># 最后将这四个并行线路的结果在通道这个维度上合并在一起。</span></span><br><span class="line"><span class="comment"># 测试一下：</span></span><br><span class="line">incp = Inception(<span class="number">64</span>, <span class="number">96</span>, <span class="number">128</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line">incp.initialize()</span><br><span class="line"></span><br><span class="line">x = nd.random.uniform(shape=(<span class="number">32</span>,<span class="number">3</span>,<span class="number">64</span>,<span class="number">64</span>))</span><br><span class="line"><span class="keyword">print</span> incp(x).shape <span class="comment">##(32L, 256L, 64L, 64L)  256=64+128+32+32</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GoogLeNet将数个Inception串联在一起。注意到原论文里使用了多个输出，为了简化我们这里就使用一个输出。</span></span><br><span class="line"><span class="comment"># 为了可以更方便的查看数据在内部的形状变化，我们对每个块使用一个`nn.Sequential`，然后再把所有这些块连起来。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoogLeNet</span><span class="params">(nn.Block)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_classes, verbose=False, **kwargs)</span>:</span></span><br><span class="line">        super(GoogLeNet, self).__init__(**kwargs)</span><br><span class="line">        self.verbose = verbose</span><br><span class="line">        <span class="keyword">with</span> self.name_scope():</span><br><span class="line">            <span class="comment"># block 1</span></span><br><span class="line">            b1 = nn.Sequential()</span><br><span class="line">            b1.add(</span><br><span class="line">                nn.Conv2D(<span class="number">64</span>, kernel_size=<span class="number">7</span>, strides=<span class="number">2</span>,padding=<span class="number">3</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">                nn.MaxPool2D(pool_size=<span class="number">3</span>, strides=<span class="number">2</span>)</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># block 2</span></span><br><span class="line">            b2 = nn.Sequential()</span><br><span class="line">            b2.add(</span><br><span class="line">                nn.Conv2D(<span class="number">64</span>, kernel_size=<span class="number">1</span>),</span><br><span class="line">                nn.Conv2D(<span class="number">192</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">                nn.MaxPool2D(pool_size=<span class="number">3</span>, strides=<span class="number">2</span>)</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="comment"># block 3</span></span><br><span class="line">            b3 = nn.Sequential()</span><br><span class="line">            b3.add(</span><br><span class="line">                Inception(<span class="number">64</span>, <span class="number">96</span>, <span class="number">128</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">32</span>),</span><br><span class="line">                Inception(<span class="number">128</span>, <span class="number">128</span>, <span class="number">192</span>, <span class="number">32</span>, <span class="number">96</span>, <span class="number">64</span>),</span><br><span class="line">                nn.MaxPool2D(pool_size=<span class="number">3</span>, strides=<span class="number">2</span>)</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="comment"># block 4</span></span><br><span class="line">            b4 = nn.Sequential()</span><br><span class="line">            b4.add(</span><br><span class="line">                Inception(<span class="number">192</span>, <span class="number">96</span>, <span class="number">208</span>, <span class="number">16</span>, <span class="number">48</span>, <span class="number">64</span>),</span><br><span class="line">                Inception(<span class="number">160</span>, <span class="number">112</span>, <span class="number">224</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">64</span>),</span><br><span class="line">                Inception(<span class="number">128</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">64</span>),</span><br><span class="line">                Inception(<span class="number">112</span>, <span class="number">144</span>, <span class="number">288</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">64</span>),</span><br><span class="line">                Inception(<span class="number">256</span>, <span class="number">160</span>, <span class="number">320</span>, <span class="number">32</span>, <span class="number">128</span>, <span class="number">128</span>),</span><br><span class="line">                nn.MaxPool2D(pool_size=<span class="number">3</span>, strides=<span class="number">2</span>)</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="comment"># block 5</span></span><br><span class="line">            b5 = nn.Sequential()</span><br><span class="line">            b5.add(</span><br><span class="line">                Inception(<span class="number">256</span>, <span class="number">160</span>, <span class="number">320</span>, <span class="number">32</span>, <span class="number">128</span>, <span class="number">128</span>),</span><br><span class="line">                Inception(<span class="number">384</span>, <span class="number">192</span>, <span class="number">384</span>, <span class="number">48</span>, <span class="number">128</span>, <span class="number">128</span>),</span><br><span class="line">                nn.AvgPool2D(pool_size=<span class="number">2</span>)</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># block 6</span></span><br><span class="line">            b6 = nn.Sequential()</span><br><span class="line">            b6.add(</span><br><span class="line">                nn.Flatten(),</span><br><span class="line">                nn.Dense(num_classes)</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># chain blocks together</span></span><br><span class="line">            self.net = nn.Sequential()</span><br><span class="line">            self.net.add(b1, b2, b3, b4, b5, b6)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        out = x</span><br><span class="line">        <span class="keyword">for</span> i, b <span class="keyword">in</span> enumerate(self.net):</span><br><span class="line">            out = b(out)</span><br><span class="line">            <span class="keyword">if</span> self.verbose:</span><br><span class="line">                print(<span class="string">'Block %d output: %s'</span> % (i + <span class="number">1</span>, out.shape))</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们看一下每个块对输出的改变。</span></span><br><span class="line">net = GoogLeNet(<span class="number">10</span>, verbose=<span class="keyword">True</span>)</span><br><span class="line">net.initialize()</span><br><span class="line"></span><br><span class="line">x = nd.random.uniform(shape=(<span class="number">4</span>, <span class="number">3</span>, <span class="number">96</span>, <span class="number">96</span>))</span><br><span class="line">y = net(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取数据并训练</span></span><br><span class="line"><span class="comment"># 跟VGG一样我们使用了较小的输入$96\times 96$来加速计算。</span></span><br><span class="line"><span class="keyword">import</span> utils</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> init</span><br><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"></span><br><span class="line">train_data, test_data = utils.load_data_fashion_mnist(batch_size=<span class="number">64</span>, resize=<span class="number">96</span>)</span><br><span class="line"></span><br><span class="line">ctx = mx.gpu()</span><br><span class="line">net = GoogLeNet(<span class="number">10</span>)</span><br><span class="line">net.initialize(ctx=ctx, init=init.Xavier())</span><br><span class="line"></span><br><span class="line">loss = gluon.loss.SoftmaxCrossEntropyLoss()</span><br><span class="line">trainer = gluon.Trainer(net.collect_params(),<span class="string">'sgd'</span>, &#123;<span class="string">'learning_rate'</span>: <span class="number">0.01</span>&#125;)</span><br><span class="line">utils.train(train_data, test_data, net, loss,trainer, ctx, num_epochs=<span class="number">10</span>)</span><br></pre></td></tr></table></figure></p>
<p>GoogLeNet加入了更加结构化的Inception块来使得我们可以使用更大的通道，更多的层，同时控制计算量和模型大小在合理范围内。<br>练习<br>GoogLeNet有数个后续版本，尝试实现他们并运行看看有什么不一样</p>
<ul>
<li>v1: 本节介绍的是最早版本：<a href="http://arxiv.org/abs/1409.4842" target="_blank" rel="external">Going Deeper with Convolutions</a></li>
<li>v2: 加入和Batch Normalization：<a href="http://arxiv.org/abs/1502.03167" target="_blank" rel="external">Accelerating Deep Network Training by Reducing Internal Covariate Shift</a></li>
<li>v3: 对Inception做了调整：<a href="http://arxiv.org/abs/1512.00567" target="_blank" rel="external">Rethinking the Inception Architecture for Computer Vision</a></li>
<li>v4: 基于ResNet加入了Residual Connections：<a href="http://arxiv.org/abs/1602.07261" target="_blank" rel="external">Inception-ResNet and the Impact of Residual Connections on Learning</a></li>
</ul>
<h2 id="4-5-Resnet"><a href="#4-5-Resnet" class="headerlink" title="4.5.Resnet"></a>4.5.Resnet</h2><p>ResNet有效的解决了深度卷积神经网络难训练的问题。这是因为在误差反传的过程中，梯度通常变得越来越小，从而权重的更新量也变小。这个导致远离损失函数的层训练缓慢，随着层数的增加这个现象更加明显。之前有两种常用方案来尝试解决这个问题：</p>
<ol>
<li>按层训练。先训练靠近数据的层，然后慢慢的增加后面的层。但效果不是特别好，而且比较麻烦。</li>
<li>使用更宽的层（增加输出通道）而不是更深来增加模型复杂度。但更宽的模型经常不如更深的效果好。<br>ResNet通过增加跨层的连接来解决梯度逐层回传时变小的问题。虽然这个想法之前就提出过了，但ResNet真正的把效果做好了。<br>下图演示了一个跨层的连接。<br><img src="/img/deeplearn/residual.svg" alt="residual"><br>最底下那层的输入不仅仅是输出给了中间层，而且其与中间层结果相加进入最上层。这样在梯度反传时，最上层梯度可以直接跳过中间层传到最下层，从而避免最下层梯度过小情况。<br>为什么叫做残差网络呢？我们可以将上面示意图里的结构拆成两个网络的和，一个一层，一个两层，最下面层是共享的。<br><img src="/img/deeplearn/residual2.svg" alt="residual2"><br>在训练过程中，左边的网络因为更简单所以更容易训练。这个小网络没有拟合到的部分，或者说残差，则被右边的网络抓取住。所以直观上来说，即使加深网络，跨层连接仍然可以使得底层网络可以充分的训练，从而不会让训练更难。<br>Residual块:<br>ResNet沿用了VGG的那种全用3x3卷积，但在卷积和池化层之间加入了批量归一层来加速训练。每次跨层连接跨过两层卷积。这里我们定义一个这样的残差块。注意到如果输入的通道数和输出不一样时（<code>same_shape=False</code>），我们使用一个额外的1x1卷积来做通道变化，同时使用<code>strides=2</code>来把长宽减半。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Residual</span><span class="params">(nn.Block)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, channels, same_shape=True, **kwargs)</span>:</span></span><br><span class="line">        super(Residual, self).__init__(**kwargs)</span><br><span class="line">        self.same_shape = same_shape</span><br><span class="line">        <span class="keyword">with</span> self.name_scope():</span><br><span class="line">            strides = <span class="number">1</span> <span class="keyword">if</span> same_shape <span class="keyword">else</span> <span class="number">2</span></span><br><span class="line">            self.conv1 = nn.Conv2D(channels, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>,strides=strides)</span><br><span class="line">            self.bn1 = nn.BatchNorm()</span><br><span class="line">            self.conv2 = nn.Conv2D(channels, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>)</span><br><span class="line">            self.bn2 = nn.BatchNorm()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> same_shape:</span><br><span class="line">                self.conv3 = nn.Conv2D(channels, kernel_size=<span class="number">1</span>,strides=strides)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        out = nd.relu(self.bn1(self.conv1(x)))</span><br><span class="line">        out = self.bn2(self.conv2(out))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.same_shape:</span><br><span class="line">            x = self.conv3(x)</span><br><span class="line">        <span class="keyword">return</span> nd.relu(out + x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入输出通道相同：</span></span><br><span class="line">blk = Residual(<span class="number">3</span>)</span><br><span class="line">blk.initialize()</span><br><span class="line">x = nd.random.uniform(shape=(<span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">6</span>))</span><br><span class="line"><span class="keyword">print</span> blk(x).shape <span class="comment">##(4L, 3L, 6L, 6L)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入输出通道不同：</span></span><br><span class="line">blk2 = Residual(<span class="number">8</span>, same_shape=<span class="keyword">False</span>)</span><br><span class="line">blk2.initialize()</span><br><span class="line"><span class="keyword">print</span> blk2(x).shape <span class="comment">##(4L, 8L, 3L, 3L)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#构建ResNet</span></span><br><span class="line"><span class="comment"># 类似GoogLeNet主体是由Inception块串联而成，ResNet的主体部分串联多个Residual块。下面我们定义18层的ResNet。</span></span><br><span class="line"><span class="comment"># 同样为了阅读更加容易，我们这里使用了多个`nn.Sequential`。另外注意到一点是，这里我们没用池化层来减小数据长宽，</span></span><br><span class="line"><span class="comment"># 而是通过有通道变化的Residual块里面的使用`strides=2`的卷积层。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResNet</span><span class="params">(nn.Block)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_classes, verbose=False, **kwargs)</span>:</span></span><br><span class="line">        super(ResNet, self).__init__(**kwargs)</span><br><span class="line">        self.verbose = verbose</span><br><span class="line">        <span class="keyword">with</span> self.name_scope():</span><br><span class="line">            <span class="comment"># block 1</span></span><br><span class="line">            b1 = nn.Conv2D(<span class="number">64</span>, kernel_size=<span class="number">7</span>, strides=<span class="number">2</span>)</span><br><span class="line">            <span class="comment"># block 2</span></span><br><span class="line">            b2 = nn.Sequential()</span><br><span class="line">            b2.add(</span><br><span class="line">                nn.MaxPool2D(pool_size=<span class="number">3</span>, strides=<span class="number">2</span>),</span><br><span class="line">                Residual(<span class="number">64</span>),</span><br><span class="line">                Residual(<span class="number">64</span>)</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># block 3</span></span><br><span class="line">            b3 = nn.Sequential()</span><br><span class="line">            b3.add(</span><br><span class="line">                Residual(<span class="number">128</span>, same_shape=<span class="keyword">False</span>),</span><br><span class="line">                Residual(<span class="number">128</span>)</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># block 4</span></span><br><span class="line">            b4 = nn.Sequential()</span><br><span class="line">            b4.add(</span><br><span class="line">                Residual(<span class="number">256</span>, same_shape=<span class="keyword">False</span>),</span><br><span class="line">                Residual(<span class="number">256</span>)</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># block 5</span></span><br><span class="line">            b5 = nn.Sequential()</span><br><span class="line">            b5.add(</span><br><span class="line">                Residual(<span class="number">512</span>, same_shape=<span class="keyword">False</span>),</span><br><span class="line">                Residual(<span class="number">512</span>)</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># block 6</span></span><br><span class="line">            b6 = nn.Sequential()</span><br><span class="line">            b6.add(</span><br><span class="line">                nn.AvgPool2D(pool_size=<span class="number">3</span>),</span><br><span class="line">                nn.Dense(num_classes)</span><br><span class="line">            )</span><br><span class="line">            <span class="comment"># chain all blocks together</span></span><br><span class="line">            self.net = nn.Sequential()</span><br><span class="line">            self.net.add(b1, b2, b3, b4, b5, b6)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        out = x</span><br><span class="line">        <span class="keyword">for</span> i, b <span class="keyword">in</span> enumerate(self.net):</span><br><span class="line">            out = b(out)</span><br><span class="line">            <span class="keyword">if</span> self.verbose:</span><br><span class="line">                print(<span class="string">'Block %d output: %s'</span>%(i+<span class="number">1</span>, out.shape))</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里演示数据在块之间的形状变化：</span></span><br><span class="line">net = ResNet(<span class="number">10</span>, verbose=<span class="keyword">True</span>)</span><br><span class="line">net.initialize()</span><br><span class="line"></span><br><span class="line">x = nd.random.uniform(shape=(<span class="number">4</span>, <span class="number">3</span>, <span class="number">96</span>, <span class="number">96</span>))</span><br><span class="line">y = net(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取数据并训练</span></span><br><span class="line"><span class="comment"># 跟前面类似，但因为有批量归一化，所以使用了较大的学习率。</span></span><br><span class="line"><span class="keyword">import</span> utils</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> init</span><br><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"></span><br><span class="line">train_data, test_data = utils.load_data_fashion_mnist(batch_size=<span class="number">64</span>, resize=<span class="number">96</span>)</span><br><span class="line"></span><br><span class="line">ctx = mx.gpu()</span><br><span class="line">net = ResNet(<span class="number">10</span>)</span><br><span class="line">net.initialize(ctx=ctx, init=init.Xavier())</span><br><span class="line"></span><br><span class="line">loss = gluon.loss.SoftmaxCrossEntropyLoss()</span><br><span class="line">trainer = gluon.Trainer(net.collect_params(), <span class="string">'sgd'</span>, &#123;<span class="string">'learning_rate'</span>: <span class="number">0.05</span>&#125;)</span><br><span class="line">utils.train(train_data, test_data, net, loss,trainer, ctx, num_epochs=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>结论<br>ResNet使用跨层通道使得训练非常深的卷积神经网络成为可能。同样它使用很简单的卷积层配置，使得其拓展更加简单。</p>
<p>练习</p>
<ul>
<li>这里我们实现了ResNet 18，原论文中还讨论了更深的配置。尝试实现它们。（提示：参考论文中的表1）</li>
<li>原论文中还介绍了一个“bottleneck”架构，尝试实现它</li>
<li>ResNet作者在<a href="https://arxiv.org/abs/1603.05027" target="_blank" rel="external">接下来的一篇论文</a>讨论了将Residual块里面的<code>Conv-&gt;BN-&gt;Relu</code>结构改成了<code>BN-&gt;Relu-&gt;Conv</code>（参考论文图1），尝试实现它</li>
</ul>
<h2 id="4-6-DenseNet"><a href="#4-6-DenseNet" class="headerlink" title="4.6.DenseNet"></a>4.6.DenseNet</h2><p>ResNet的跨层连接思想影响了接下来的众多工作。这里我们介绍其中的一个：<a href="https://arxiv.org/pdf/1608.06993.pdf" target="_blank" rel="external">DenseNet</a>。下图展示了这两个的主要区别：<br><img src="/img/deeplearn/densenet.svg" alt="densenet"><br>可以看到DenseNet里来自跳层的输出不是通过加法（<code>+</code>）而是拼接（<code>concat</code>）来跟目前层的输出合并。因为是拼接，所以底层的输出会保留的进入上面所有层。这是为什么叫“稠密连接”的原因<br>稠密块（Dense Block）:<br>我们先来定义一个稠密连接块。DenseNet的卷积块使用ResNet改进版本的<code>BN-&gt;Relu-&gt;Conv</code>。每个卷积的输出通道数被称之为<code>growth_rate</code>，这是因为假设输出为<code>in_channels</code>，而且有<code>layers</code>层，那么输出的通道数就是<code>in_channels+growth_rate*layers</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv_block</span><span class="params">(channels)</span>:</span></span><br><span class="line">    out = nn.Sequential()</span><br><span class="line">    out.add(</span><br><span class="line">        nn.BatchNorm(),</span><br><span class="line">        nn.Activation(<span class="string">'relu'</span>),</span><br><span class="line">        nn.Conv2D(channels, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DenseBlock</span><span class="params">(nn.Block)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, layers, growth_rate, **kwargs)</span>:</span></span><br><span class="line">        super(DenseBlock, self).__init__(**kwargs)</span><br><span class="line">        self.net = nn.Sequential()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(layers):</span><br><span class="line">            self.net.add(conv_block(growth_rate))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> layer <span class="keyword">in</span> self.net:</span><br><span class="line">            out = layer(x)</span><br><span class="line">            x = nd.concat(x, out, dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们验证下输出通道数是不是符合预期。</span></span><br><span class="line">dblk = DenseBlock(<span class="number">2</span>, <span class="number">10</span>)</span><br><span class="line">dblk.initialize()</span><br><span class="line"></span><br><span class="line">x = nd.random.uniform(shape=(<span class="number">4</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line"><span class="keyword">print</span> dblk(x).shape  <span class="comment">##(4L, 23L, 8L, 8L)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 过渡块（Transition Block）</span></span><br><span class="line"><span class="comment"># 因为使用拼接的缘故，每经过一次过渡块输出通道数可能会激增。为了控制模型复杂度，</span></span><br><span class="line"><span class="comment"># 这里引入一个过渡块，它不仅把输入的长宽减半，同时也使用1x1卷积来改变通道数。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transition_block</span><span class="params">(channels)</span>:</span></span><br><span class="line">    out = nn.Sequential()</span><br><span class="line">    out.add(</span><br><span class="line">        nn.BatchNorm(),</span><br><span class="line">        nn.Activation(<span class="string">'relu'</span>),</span><br><span class="line">        nn.Conv2D(channels, kernel_size=<span class="number">1</span>),</span><br><span class="line">        nn.AvgPool2D(pool_size=<span class="number">2</span>, strides=<span class="number">2</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证一下结果：</span></span><br><span class="line">tblk = transition_block(<span class="number">10</span>)</span><br><span class="line">tblk.initialize()</span><br><span class="line"><span class="keyword">print</span> tblk(x).shape <span class="comment">##(4L, 10L, 4L, 4L)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DenseNet的主体就是交替串联稠密块和过渡块。它使用全局的`growth_rate`使得配置更加简单。过渡层每次都将通道数减半。</span></span><br><span class="line"><span class="comment"># 下面定义一个121层的DenseNet。</span></span><br><span class="line">init_channels = <span class="number">64</span></span><br><span class="line">growth_rate = <span class="number">32</span></span><br><span class="line">block_layers = [<span class="number">6</span>, <span class="number">12</span>, <span class="number">24</span>, <span class="number">16</span>]</span><br><span class="line">num_classes = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dense_net</span><span class="params">()</span>:</span></span><br><span class="line">    net = nn.Sequential()</span><br><span class="line">    <span class="keyword">with</span> net.name_scope():</span><br><span class="line">        <span class="comment"># first block</span></span><br><span class="line">        net.add(</span><br><span class="line">            nn.Conv2D(init_channels, kernel_size=<span class="number">7</span>, strides=<span class="number">2</span>, padding=<span class="number">3</span>),</span><br><span class="line">            nn.BatchNorm(),</span><br><span class="line">            nn.Activation(<span class="string">'relu'</span>),</span><br><span class="line">            nn.MaxPool2D(pool_size=<span class="number">3</span>, strides=<span class="number">2</span>, padding=<span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># dense blocks</span></span><br><span class="line">        channels = init_channels</span><br><span class="line">        <span class="keyword">for</span> i, layers <span class="keyword">in</span> enumerate(block_layers): <span class="comment">#i,layers---0 6   1 12   2 24   3 16</span></span><br><span class="line">            net.add(DenseBlock(layers, growth_rate))</span><br><span class="line">            channels += layers * growth_rate</span><br><span class="line">            <span class="keyword">if</span> i != len(block_layers)-<span class="number">1</span>:<span class="comment">##前三个每个denseblock后channels减半  最后一个不用</span></span><br><span class="line">                net.add(transition_block(channels//<span class="number">2</span>))</span><br><span class="line">        <span class="comment"># last block</span></span><br><span class="line">        net.add(</span><br><span class="line">            nn.BatchNorm(),</span><br><span class="line">            nn.Activation(<span class="string">'relu'</span>),</span><br><span class="line">            nn.AvgPool2D(pool_size=<span class="number">1</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Dense(num_classes)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> net</span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取数据并训练</span></span><br><span class="line"><span class="comment"># 因为这里我们使用了比较深的网络，所以我们进一步把输入减少到32x32来训练。</span></span><br><span class="line"><span class="keyword">import</span> utils</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> init</span><br><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"></span><br><span class="line">train_data, test_data = utils.load_data_fashion_mnist(batch_size=<span class="number">64</span>, resize=<span class="number">32</span>)</span><br><span class="line">ctx = mx.gpu()</span><br><span class="line">net = dense_net()</span><br><span class="line">net.initialize(ctx=ctx, init=init.Xavier())</span><br><span class="line"></span><br><span class="line">loss = gluon.loss.SoftmaxCrossEntropyLoss()</span><br><span class="line">trainer = gluon.Trainer(net.collect_params(),<span class="string">'sgd'</span>, &#123;<span class="string">'learning_rate'</span>: <span class="number">0.1</span>&#125;)</span><br><span class="line">utils.train(train_data, test_data, net, loss,trainer, ctx, num_epochs=<span class="number">10</span>)</span><br></pre></td></tr></table></figure></p>
<p>Desnet通过将ResNet里的<code>+</code>替换成<code>concat</code>从而获得更稠密的连接。<br>练习</p>
<ul>
<li>DesNet论文中提交的一个优点是其模型参数比ResNet更小，想想为什么？</li>
<li>DesNet被人诟病的一个问题是内存消耗过多。真的会这样吗？可以把输入换成$224\times 224$（需要改最后的<code>AvgPool2D</code>大小），来看看实际（GPU）内存消耗。</li>
<li>这里的FashionMNIST有必要用100+层的网络吗？尝试将其改简单看看效果。</li>
</ul>
<h2 id="4-7-_u56FE_u7247_u589E_u5F3A"><a href="#4-7-_u56FE_u7247_u589E_u5F3A" class="headerlink" title="4.7.图片增强"></a>4.7.图片增强</h2><p>图片增强通过一系列的随机变化生成大量“新”的样本，从而减低过拟合的可能。现在在深度卷积神经网络训练中，图片增强是必不可少的一部分。<br>常用增强方法:<br>我们首先读取一张400x500的图片作为样例<br><img src="/img/deeplearn/img5.png" alt="img5"><br>水平方向翻转图片是最早也是最广泛使用的一种增强。<br>以.5的概率做翻转<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aug = image.<span class="function"><span class="title">HorizontalFlipAug</span><span class="params">(.<span class="number">5</span>)</span></span> ##左右变换对人没有啥区别，对卷积比较难看，可以用</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/deeplearn/img6.png" alt="img6"><br>随机裁剪一个块 200 x 200 的区域<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aug = image.RandomCropAug([<span class="number">200</span>,<span class="number">200</span>]) <span class="preprocessor">##随机裁剪可以一定概率将物体放在各个位置出现，降低卷积对位置的敏感</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/deeplearn/img7.png" alt="img7"><br>我们也可以随机裁剪一块随机大小的区域<br>随机裁剪，要求保留至少0.1的区域，随机长宽比在.5和2之间。 常用一些 有剪切和变形<br>最后将结果resize到200x200<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aug = image.RandomSizedCropAug((<span class="number">200</span>,<span class="number">200</span>), <span class="number">.1</span>, (<span class="number">.5</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/deeplearn/img8.png" alt="img8"><br>颜色变化<br>形状变化外的一个另一大类是变化颜色。<br>随机将亮度增加或者减小在0-50%间的一个量<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aug = image.<span class="function"><span class="title">BrightnessJitterAug</span><span class="params">(.<span class="number">5</span>)</span></span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/deeplearn/img9.png" alt="img9"><br>随机色调变化 ##模拟不同光照情况下<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aug = image.<span class="function"><span class="title">HueJitterAug</span><span class="params">(.<span class="number">5</span>)</span></span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/deeplearn/img10.png" alt="img10"></p>
<p>cifar10使用增强<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># 对于训练图片我们随机水平翻转和剪裁。对于测试图片仅仅就是中心剪裁。</span></span><br><span class="line"><span class="preprocessor"># CIFAR10图片尺寸是<span class="number">32</span>x32x3，我们剪裁成<span class="number">28</span>x28x3.</span></span><br><span class="line">train_augs = [image.HorizontalFlipAug(<span class="number">.5</span>),image.RandomCropAug((<span class="number">28</span>,<span class="number">28</span>))]</span><br><span class="line">test_augs = [image.CenterCropAug((<span class="number">28</span>,<span class="number">28</span>))]</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/deeplearn/img11.png" alt="img11"><br>使用增强训练结果<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Epoch <span class="number">0.</span> Loss: <span class="number">1.483978</span>, Train acc <span class="number">0.469281</span>, Test acc <span class="number">0.447093</span></span><br><span class="line">Epoch <span class="number">1.</span> Loss: <span class="number">1.069175</span>, Train acc <span class="number">0.619841</span>, Test acc <span class="number">0.582377</span></span><br><span class="line">Epoch <span class="number">2.</span> Loss: <span class="number">0.883304</span>, Train acc <span class="number">0.689666</span>, Test acc <span class="number">0.685621</span></span><br><span class="line">Epoch <span class="number">3.</span> Loss: <span class="number">0.770580</span>, Train acc <span class="number">0.729875</span>, Test acc <span class="number">0.721717</span></span><br><span class="line">Epoch <span class="number">4.</span> Loss: <span class="number">0.688039</span>, Train acc <span class="number">0.759827</span>, Test acc <span class="number">0.766515</span></span><br><span class="line">Epoch <span class="number">5.</span> Loss: <span class="number">0.629892</span>, Train acc <span class="number">0.779352</span>, Test acc <span class="number">0.720134</span></span><br><span class="line">Epoch <span class="number">6.</span> Loss: <span class="number">0.578624</span>, Train acc <span class="number">0.799772</span>, Test acc <span class="number">0.774426</span></span><br><span class="line">Epoch <span class="number">7.</span> Loss: <span class="number">0.535755</span>, Train acc <span class="number">0.812544</span>, Test acc <span class="number">0.766021</span></span><br><span class="line">Epoch <span class="number">8.</span> Loss: <span class="number">0.507056</span>, Train acc <span class="number">0.820888</span>, Test acc <span class="number">0.783525</span></span><br><span class="line">Epoch <span class="number">9.</span> Loss: <span class="number">0.476048</span>, Train acc <span class="number">0.835066</span>, Test acc <span class="number">0.792623</span></span><br></pre></td></tr></table></figure></p>
<p>不使用增强训练结果<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Epoch <span class="number">0.</span> Loss: <span class="number">1.440451</span>, Train acc <span class="number">0.486553</span>, Test acc <span class="number">0.565269</span></span><br><span class="line">Epoch <span class="number">1.</span> Loss: <span class="number">0.978142</span>, Train acc <span class="number">0.654356</span>, Test acc <span class="number">0.623418</span></span><br><span class="line">Epoch <span class="number">2.</span> Loss: <span class="number">0.758181</span>, Train acc <span class="number">0.733584</span>, Test acc <span class="number">0.683643</span></span><br><span class="line">Epoch <span class="number">3.</span> Loss: <span class="number">0.590786</span>, Train acc <span class="number">0.790821</span>, Test acc <span class="number">0.703323</span></span><br><span class="line">Epoch <span class="number">4.</span> Loss: <span class="number">0.454785</span>, Train acc <span class="number">0.840873</span>, Test acc <span class="number">0.714498</span></span><br><span class="line">Epoch <span class="number">5.</span> Loss: <span class="number">0.352663</span>, Train acc <span class="number">0.877777</span>, Test acc <span class="number">0.653481</span></span><br><span class="line">Epoch <span class="number">6.</span> Loss: <span class="number">0.248027</span>, Train acc <span class="number">0.913731</span>, Test acc <span class="number">0.722903</span></span><br><span class="line">Epoch <span class="number">7.</span> Loss: <span class="number">0.176261</span>, Train acc <span class="number">0.938675</span>, Test acc <span class="number">0.732892</span></span><br><span class="line">Epoch <span class="number">8.</span> Loss: <span class="number">0.118719</span>, Train acc <span class="number">0.959439</span>, Test acc <span class="number">0.696697</span></span><br><span class="line">Epoch <span class="number">9.</span> Loss: <span class="number">0.091157</span>, Train acc <span class="number">0.969106</span>, Test acc <span class="number">0.705103</span></span><br></pre></td></tr></table></figure></p>
<p>完整代码：<br>resnet18<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">from mxnet<span class="class">.gluon</span> import nn</span><br><span class="line">class <span class="function"><span class="title">Residual</span><span class="params">(nn.HybridBlock)</span></span>:</span><br><span class="line">    def __init__(self, channels, same_shape=True, **kwargs):</span><br><span class="line">        <span class="function"><span class="title">super</span><span class="params">(Residual, self)</span></span>.__init__(**kwargs)</span><br><span class="line">        self<span class="class">.same_shape</span> = same_shape</span><br><span class="line">        with self.<span class="function"><span class="title">name_scope</span><span class="params">()</span></span>:</span><br><span class="line">            strides = <span class="number">1</span> <span class="keyword">if</span> same_shape <span class="keyword">else</span> <span class="number">2</span></span><br><span class="line">            self<span class="class">.conv1</span> = nn.Conv2D(channels, kernel_size=<span class="number">3</span>, <span class="attribute">padding</span>=<span class="number">1</span>,</span><br><span class="line">                                  strides=strides)</span><br><span class="line">            self<span class="class">.bn1</span> = nn.<span class="function"><span class="title">BatchNorm</span><span class="params">()</span></span></span><br><span class="line">            self<span class="class">.conv2</span> = nn.<span class="function"><span class="title">Conv2D</span><span class="params">(channels, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>)</span></span></span><br><span class="line">            self<span class="class">.bn2</span> = nn.<span class="function"><span class="title">BatchNorm</span><span class="params">()</span></span></span><br><span class="line">            <span class="keyword">if</span> not same_shape:</span><br><span class="line">                self<span class="class">.conv3</span> = nn.Conv2D(channels, kernel_size=<span class="number">1</span>,</span><br><span class="line">                                      strides=strides)</span><br><span class="line"></span><br><span class="line">    def <span class="function"><span class="title">hybrid_forward</span><span class="params">(self, F, x)</span></span>:</span><br><span class="line">        out = F.<span class="function"><span class="title">relu</span><span class="params">(self.bn1(self.conv1(x)</span></span>))</span><br><span class="line">        out = self.<span class="function"><span class="title">bn2</span><span class="params">(self.conv2(out)</span></span>)</span><br><span class="line">        <span class="keyword">if</span> not self<span class="class">.same_shape</span>:</span><br><span class="line">            x = self.<span class="function"><span class="title">conv3</span><span class="params">(x)</span></span></span><br><span class="line">        return F.<span class="function"><span class="title">relu</span><span class="params">(out + x)</span></span></span><br><span class="line"></span><br><span class="line">def <span class="function"><span class="title">resnet18</span><span class="params">(num_classes)</span></span>:</span><br><span class="line">    net = nn.<span class="function"><span class="title">HybridSequential</span><span class="params">()</span></span></span><br><span class="line">    with net.<span class="function"><span class="title">name_scope</span><span class="params">()</span></span>:</span><br><span class="line">        net.add(</span><br><span class="line">            nn.<span class="function"><span class="title">BatchNorm</span><span class="params">()</span></span>,</span><br><span class="line">            nn.<span class="function"><span class="title">Conv2D</span><span class="params">(<span class="number">64</span>, kernel_size=<span class="number">3</span>, strides=<span class="number">1</span>)</span></span>,</span><br><span class="line">            nn.<span class="function"><span class="title">MaxPool2D</span><span class="params">(pool_size=<span class="number">3</span>, strides=<span class="number">2</span>)</span></span>,</span><br><span class="line">            <span class="function"><span class="title">Residual</span><span class="params">(<span class="number">64</span>)</span></span>,</span><br><span class="line">            <span class="function"><span class="title">Residual</span><span class="params">(<span class="number">64</span>)</span></span>,</span><br><span class="line">            <span class="function"><span class="title">Residual</span><span class="params">(<span class="number">128</span>, same_shape=False)</span></span>,</span><br><span class="line">            <span class="function"><span class="title">Residual</span><span class="params">(<span class="number">128</span>)</span></span>,</span><br><span class="line">            <span class="function"><span class="title">Residual</span><span class="params">(<span class="number">256</span>, same_shape=False)</span></span>,</span><br><span class="line">            <span class="function"><span class="title">Residual</span><span class="params">(<span class="number">256</span>)</span></span>,</span><br><span class="line">            nn.<span class="function"><span class="title">GlobalAvgPool2D</span><span class="params">()</span></span>,</span><br><span class="line">            nn.<span class="function"><span class="title">Dense</span><span class="params">(num_classes)</span></span></span><br><span class="line">        )</span><br><span class="line">    return net</span><br></pre></td></tr></table></figure></p>
<p>imageaugmentation<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> image</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> four <span class="keyword">import</span> utils</span><br><span class="line"></span><br><span class="line">img = image.imdecode(open(<span class="string">'../data/cat1.jpg'</span>, <span class="string">'rb'</span>).read())</span><br><span class="line">plt.imshow(img.asnumpy())</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来我们定义一个辅助函数，给定输入图片`img`的增强方法`aug`，它会运行多次并画出结果。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply</span><span class="params">(img, aug, n=<span class="number">3</span>)</span>:</span></span><br><span class="line">    _, figs = plt.subplots(n, n, figsize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="comment"># 转成float，一是因为aug需要float类型数据来方便做变化。</span></span><br><span class="line">            <span class="comment"># 二是这里会有一次copy操作，因为有些aug直接通过改写输入</span></span><br><span class="line">            <span class="comment">#（而不是新建输出）获取性能的提升</span></span><br><span class="line">            x = img.astype(<span class="string">'float32'</span>) <span class="comment">##将图片默认的int8转float32方便计算</span></span><br><span class="line">            <span class="comment"># 有些aug不保证输入是合法值，所以做一次clip</span></span><br><span class="line">            y = aug(x).clip(<span class="number">0</span>,<span class="number">254</span>)</span><br><span class="line">            <span class="comment"># 显示浮点图片时imshow要求输入在[0,1]之间</span></span><br><span class="line">            figs[i][j].imshow(y.asnumpy()/<span class="number">255.0</span>)</span><br><span class="line">            figs[i][j].axes.get_xaxis().set_visible(<span class="keyword">False</span>)</span><br><span class="line">            figs[i][j].axes.get_yaxis().set_visible(<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 变形</span></span><br><span class="line"><span class="comment"># 水平方向翻转图片是最早也是最广泛使用的一种增强。</span></span><br><span class="line"><span class="comment"># 以.5的概率做翻转</span></span><br><span class="line">aug = image.HorizontalFlipAug(<span class="number">.5</span>) <span class="comment">##左右变换对人没有啥区别，对卷积比较难看，可以用</span></span><br><span class="line">apply(img, aug)</span><br><span class="line">plt.show() <span class="comment">##此行可以让上面的apply函数的imshow显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 样例图片里我们关心的猫在图片正中间，但一般情况下可能不是这样。前面我们提到池化层能弱化卷积层对目标位置的敏感度，</span></span><br><span class="line"><span class="comment"># 但也不能完全解决这个问题。一个常用增强方法是随机的截取其中的一块。</span></span><br><span class="line"><span class="comment"># 注意到随机截取一般会缩小输入的形状。如果原始输入图片过小，导致没有太多空间进行随机裁剪，</span></span><br><span class="line"><span class="comment"># 通常做法是先将其放大的足够大的尺寸。所以如果你的原始图片足够大，建议不要事先将它们裁到网络需要的大小。</span></span><br><span class="line"><span class="comment"># 随机裁剪一个块 200 x 200 的区域</span></span><br><span class="line">aug = image.RandomCropAug([<span class="number">200</span>,<span class="number">200</span>]) <span class="comment">##随机裁剪可以一定概率将物体放在各个位置出现，降低卷积对位置的敏感</span></span><br><span class="line">apply(img, aug)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们也可以随机裁剪一块随机大小的区域</span></span><br><span class="line"><span class="comment"># 随机裁剪，要求保留至少0.1的区域，随机长宽比在.5和2之间。 ################################常用一些 有剪切和变形</span></span><br><span class="line"><span class="comment"># 最后将结果resize到200x200</span></span><br><span class="line">aug = image.RandomSizedCropAug((<span class="number">200</span>,<span class="number">200</span>), <span class="number">.1</span>, (<span class="number">.5</span>,<span class="number">2</span>))</span><br><span class="line">apply(img, aug)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">### 颜色变化</span></span><br><span class="line"><span class="comment"># 形状变化外的一个另一大类是变化颜色。</span></span><br><span class="line"><span class="comment"># 随机将亮度增加或者减小在0-50%间的一个量</span></span><br><span class="line">aug = image.BrightnessJitterAug(<span class="number">.5</span>)</span><br><span class="line">apply(img, aug)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机色调变化 ##模拟不同光照情况下</span></span><br><span class="line">aug = image.HueJitterAug(<span class="number">.5</span>)</span><br><span class="line">apply(img, aug)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ## 如何使用</span></span><br><span class="line"><span class="comment"># 通常使用时我们会将数个增强方法一起使用。注意到图片增强通常只是针对训练数据，对于测试数据则用得较小。后者常用的是做5次随机剪裁，</span></span><br><span class="line"><span class="comment"># 然后讲5张图片的预测结果做均值。</span></span><br><span class="line"><span class="comment"># 下面我们使用CIFAR10来演示图片增强对训练的影响。我们这里不使用前面一直用的FashionMNIST，这是因为这个数据的图片基本已经对齐好了，</span></span><br><span class="line"><span class="comment"># 而且是黑白图片，所以不管是变形还是变色增强效果都不会明显。</span></span><br><span class="line"><span class="comment"># ### 数据读取</span></span><br><span class="line"><span class="comment"># 我们首先定义一个辅助函数可以对图片按顺序应用数个增强：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply_aug_list</span><span class="params">(img, augs)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> augs:</span><br><span class="line">        img = f(img)</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"><span class="comment"># 对于训练图片我们随机水平翻转和剪裁。对于测试图片仅仅就是中心剪裁。</span></span><br><span class="line"><span class="comment"># CIFAR10图片尺寸是32x32x3，我们剪裁成28x28x3.</span></span><br><span class="line">train_augs = [image.HorizontalFlipAug(<span class="number">.5</span>),image.RandomCropAug((<span class="number">28</span>,<span class="number">28</span>))]</span><br><span class="line">test_augs = [image.CenterCropAug((<span class="number">28</span>,<span class="number">28</span>))]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后定义数据读取，这里跟前面的FashionMNIST类似，但在`transform`中加入了图片增强：</span></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_transform</span><span class="params">(augs)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">transform</span><span class="params">(data, label)</span>:</span></span><br><span class="line">        data = data.astype(<span class="string">'float32'</span>)</span><br><span class="line">        <span class="keyword">if</span> augs <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            data = apply_aug_list(data, augs)<span class="comment">############</span></span><br><span class="line">        data = nd.transpose(data, (<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>)) / <span class="number">255.0</span></span><br><span class="line">        <span class="keyword">return</span> data, label.astype(<span class="string">'float32'</span>)</span><br><span class="line">    <span class="keyword">return</span> transform</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(batch_size, train_augs, test_augs=None)</span>:</span></span><br><span class="line">    cifar10_train = gluon.data.vision.CIFAR10(train=<span class="keyword">True</span>, transform=get_transform(train_augs))</span><br><span class="line">    cifar10_test = gluon.data.vision.CIFAR10(train=<span class="keyword">False</span>, transform=get_transform(test_augs))</span><br><span class="line">    train_data = gluon.data.DataLoader(cifar10_train, batch_size, shuffle=<span class="keyword">True</span>)</span><br><span class="line">    test_data = gluon.data.DataLoader(cifar10_test, batch_size, shuffle=<span class="keyword">False</span>)</span><br><span class="line">    <span class="keyword">return</span> (train_data, test_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出前几张看看</span></span><br><span class="line">train_data, _ = get_data(<span class="number">36</span>, train_augs)</span><br><span class="line"><span class="keyword">for</span> imgs, _ <span class="keyword">in</span> train_data:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">_, figs = plt.subplots(<span class="number">6</span>, <span class="number">6</span>, figsize=(<span class="number">6</span>, <span class="number">6</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        x = nd.transpose(imgs[i * <span class="number">3</span> + j], (<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line">        figs[i][j].imshow(x.asnumpy())</span><br><span class="line">        figs[i][j].axes.get_xaxis().set_visible(<span class="keyword">False</span>)</span><br><span class="line">        figs[i][j].axes.get_yaxis().set_visible(<span class="keyword">False</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练 我们使用[ResNet 18]训练。并且训练代码整理成一个函数使得可以重读调用：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> init</span><br><span class="line"><span class="keyword">import</span> mxnet <span class="keyword">as</span> mx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(train_augs, test_augs, learning_rate=<span class="number">.1</span>)</span>:</span></span><br><span class="line">    batch_size = <span class="number">128</span></span><br><span class="line">    num_epochs = <span class="number">10</span></span><br><span class="line">    ctx = mx.gpu(<span class="number">0</span>)</span><br><span class="line">    loss = gluon.loss.SoftmaxCrossEntropyLoss()</span><br><span class="line">    train_data, test_data = get_data(</span><br><span class="line">        batch_size, train_augs, test_augs)</span><br><span class="line">    net = utils.resnet18(<span class="number">10</span>)</span><br><span class="line">    net.initialize(ctx=ctx, init=init.Xavier())</span><br><span class="line">    net.hybridize()</span><br><span class="line">    trainer = gluon.Trainer(net.collect_params(),</span><br><span class="line">                            <span class="string">'sgd'</span>, &#123;<span class="string">'learning_rate'</span>: learning_rate&#125;)</span><br><span class="line">    utils.train(</span><br><span class="line">        train_data, test_data, net, loss, trainer, ctx, num_epochs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用增强：</span></span><br><span class="line">train(train_augs, test_augs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不使用增强：</span></span><br><span class="line"><span class="comment"># train(test_augs, test_augs)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到使用增强后，训练精度提升更慢，但测试精度比不使用更好。</span></span><br><span class="line"><span class="comment">## 总结</span></span><br><span class="line"><span class="comment"># 图片增强可以有效避免过拟合。</span></span><br><span class="line"><span class="comment">## 练习</span></span><br><span class="line"><span class="comment"># 尝试换不同的增强方法试试。</span></span><br></pre></td></tr></table></figure></p>
<h2 id="8-1__u4F7F_u7528Gluon_u5B9E_u73B0SSD"><a href="#8-1__u4F7F_u7528Gluon_u5B9E_u73B0SSD" class="headerlink" title="8.1 使用Gluon实现SSD"></a>8.1 使用Gluon实现SSD</h2><p>本章利用介绍的SSD来检测野生皮卡丘<br><img src="/img/deeplearn/pikachu.png" alt="pikachu"><br>数据集下载：<br><a href="https://apache-mxnet.s3-accelerate.amazonaws.com/gluon/dataset/pikachu/train.rec" target="_blank" rel="external">训练数据rec下载</a><br><a href="https://apache-mxnet.s3-accelerate.amazonaws.com/gluon/dataset/pikachu/train.idx" target="_blank" rel="external">训练数据idx下载</a><br><a href="https://apache-mxnet.s3-accelerate.amazonaws.com/gluon/dataset/pikachu/val.rec" target="_blank" rel="external">测试数据rec下载</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 读取数据集</span></span><br><span class="line"><span class="comment"># 我们使用`image.ImageDetIter`来读取数据。</span></span><br><span class="line"><span class="comment"># 这是针对物体检测的迭代器，(Det表示Detection)。它跟`image.ImageIter`使用很类似。</span></span><br><span class="line"><span class="comment"># 主要不同是它返回的标号不是单个图片标号，而是每个图片里所有物体的标号，以及其对用的边框。</span></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> image</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"></span><br><span class="line">data_dir=<span class="string">'../data/pikachu/'</span></span><br><span class="line">data_shape = <span class="number">256</span></span><br><span class="line">batch_size = <span class="number">32</span></span><br><span class="line">rgb_mean = nd.array([<span class="number">123</span>, <span class="number">117</span>, <span class="number">104</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_iterators</span><span class="params">(data_shape, batch_size)</span>:</span></span><br><span class="line">    class_names = [<span class="string">'pikachu'</span>]</span><br><span class="line">    num_class = len(class_names)</span><br><span class="line">    train_iter = image.ImageDetIter(</span><br><span class="line">        batch_size=batch_size,</span><br><span class="line">        data_shape=(<span class="number">3</span>, data_shape, data_shape),</span><br><span class="line">        path_imgrec=data_dir+<span class="string">'train.rec'</span>,</span><br><span class="line">        path_imgidx=data_dir+<span class="string">'train.idx'</span>,</span><br><span class="line">        shuffle=<span class="keyword">True</span>,</span><br><span class="line">        mean=<span class="keyword">True</span>,</span><br><span class="line">        rand_crop=<span class="number">1</span>,</span><br><span class="line">        min_object_covered=<span class="number">0.95</span>,</span><br><span class="line">        max_attempts=<span class="number">200</span>)</span><br><span class="line">    val_iter = image.ImageDetIter(</span><br><span class="line">        batch_size=batch_size,</span><br><span class="line">        data_shape=(<span class="number">3</span>, data_shape, data_shape),</span><br><span class="line">        path_imgrec=data_dir+<span class="string">'val.rec'</span>,</span><br><span class="line">        shuffle=<span class="keyword">False</span>,</span><br><span class="line">        mean=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">return</span> train_iter, val_iter, class_names, num_class</span><br><span class="line"></span><br><span class="line">train_data, test_data, class_names, num_class = get_iterators(data_shape, batch_size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们读取一个批量。可以看到标号的形状是`batch_size x num_object_per_image x 5`。这里数据里每个图片里面只有一个标号。</span></span><br><span class="line"><span class="comment"># 每个标号由长为5的数组表示，第一个元素是其对用物体的标号，其中`-1`表示非法物体，仅做填充使用。后面4个元素表示边框。</span></span><br><span class="line">batch = train_data.next()</span><br><span class="line">print(batch) <span class="comment">#DataBatch: data shapes: [(32L, 3L, 256L, 256L)] label shapes: [(32L, 1L, 5L)] # 1L 因为每张图只有一个pikachu 如果有多个的化将取最多的那个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图示数据</span></span><br><span class="line"><span class="comment"># 我们画出几张图片和其对应的标号。可以看到比卡丘的角度大小位置在每张图图片都不一样。不过也注意到这个数据集是直接将二次元动漫皮卡丘跟三次元背景相结合。</span></span><br><span class="line"><span class="comment"># 可能通过简单判断区域的色彩直方图就可以有效的区别是不是有我们要的物体。我们用这个简单数据集来演示SSD是如何工作的。实际中遇到的数据集通常会复杂很多。</span></span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line">mpl.rcParams[<span class="string">'figure.dpi'</span>]= <span class="number">120</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">box_to_rect</span><span class="params">(box, color, linewidth=<span class="number">3</span>)</span>:</span></span><br><span class="line">    <span class="string">"""convert an anchor box to a matplotlib rectangle"""</span></span><br><span class="line">    box = box.asnumpy()</span><br><span class="line">    <span class="keyword">return</span> plt.Rectangle(</span><br><span class="line">        (box[<span class="number">0</span>], box[<span class="number">1</span>]), box[<span class="number">2</span>]-box[<span class="number">0</span>], box[<span class="number">3</span>]-box[<span class="number">1</span>],</span><br><span class="line">        fill=<span class="keyword">False</span>, edgecolor=color, linewidth=linewidth)</span><br><span class="line"></span><br><span class="line">_, figs = plt.subplots(<span class="number">3</span>, <span class="number">3</span>, figsize=(<span class="number">6</span>,<span class="number">6</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        img, labels = batch.data[<span class="number">0</span>][<span class="number">3</span>*i+j], batch.label[<span class="number">0</span>][<span class="number">3</span>*i+j] <span class="comment">###########</span></span><br><span class="line">        img = img.transpose((<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>)) + rgb_mean</span><br><span class="line">        img = img.clip(<span class="number">0</span>,<span class="number">255</span>).asnumpy()/<span class="number">255</span></span><br><span class="line">        fig = figs[i][j]</span><br><span class="line">        fig.imshow(img)</span><br><span class="line">        <span class="keyword">for</span> label <span class="keyword">in</span> labels:</span><br><span class="line">            rect = box_to_rect(label[<span class="number">1</span>:<span class="number">5</span>]*data_shape,<span class="string">'red'</span>,<span class="number">2</span>)</span><br><span class="line">            fig.add_patch(rect)</span><br><span class="line">        fig.axes.get_xaxis().set_visible(<span class="keyword">False</span>)</span><br><span class="line">        fig.axes.get_yaxis().set_visible(<span class="keyword">False</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">## SSD模型</span></span><br><span class="line"><span class="comment">### 锚框：默认的边界框</span></span><br><span class="line"><span class="comment"># 因为边框可以出现在图片中的任何位置，并且可以有任意大小。为了简化计算，SSD跟Faster R-CNN一样使用一些默认的边界框，或者称之为锚框（anchor box），做为搜索起点。</span></span><br><span class="line"><span class="comment"># 具体来说，对输入的每个像素，以其为中心采样数个有不同形状和不同比例的边界框。假设输入大小是 w x h，</span></span><br><span class="line"><span class="comment"># - 给定大小 s in (0,1]，那么生成的边界框形状是 [ws,hs]</span></span><br><span class="line"><span class="comment"># - 给定比例 r &gt; 0，那么生成的边界框形状是 [w*sqrt&#123;r&#125;,h\sqrt&#123;r&#125;]</span></span><br><span class="line"><span class="comment"># 在采样的时候我们提供 n 个大小（`sizes`）和 m 个比例（`ratios`）。为了计算简单这里不生成nm个锚框，而是n+m-1个。其中第 i 个锚框使用</span></span><br><span class="line"><span class="comment"># - `sizes[i]`和`ratios[0]` 如果 i &lt;= n</span></span><br><span class="line"><span class="comment"># - `sizes[0]`和`ratios[i-n]` 如果 i&gt;n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们可以使用`contribe.ndarray`里的`MultiBoxPrior`来采样锚框。这里锚框通过左下角和右上角两个点来确定，而且被标准化成了区间[0,1]的实数。</span></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> nd</span><br><span class="line"><span class="keyword">from</span> mxnet.ndarray.contrib <span class="keyword">import</span> MultiBoxPrior</span><br><span class="line"></span><br><span class="line"><span class="comment"># shape: batch x channel x height x weight</span></span><br><span class="line">n = <span class="number">40</span></span><br><span class="line">x = nd.random.uniform(shape=(<span class="number">1</span>, <span class="number">3</span>, n, n))</span><br><span class="line">y = MultiBoxPrior(x, sizes=[<span class="number">.5</span>,<span class="number">.25</span>,<span class="number">.1</span>], ratios=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">.5</span>])</span><br><span class="line">boxes = y.reshape((n, n, -<span class="number">1</span>, <span class="number">4</span>))</span><br><span class="line">print(boxes.shape) <span class="comment">##(40L, 40L, 5L, 4L)</span></span><br><span class="line"><span class="comment"># The first anchor box centered on (20, 20)</span></span><br><span class="line"><span class="comment"># its format is (x_min, y_min, x_max, y_max)</span></span><br><span class="line"><span class="comment"># 我们可以画出以`(20,20)`为中心的所有锚框：</span></span><br><span class="line">colors = [<span class="string">'blue'</span>, <span class="string">'green'</span>, <span class="string">'red'</span>, <span class="string">'black'</span>, <span class="string">'magenta'</span>]</span><br><span class="line">plt.imshow(nd.ones((n, n, <span class="number">3</span>)).asnumpy())</span><br><span class="line">anchors = boxes[<span class="number">20</span>, <span class="number">20</span>, :, :]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(anchors.shape[<span class="number">0</span>]):</span><br><span class="line">    plt.gca().add_patch(box_to_rect(anchors[i,:]*n, colors[i]))</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 预测物体类别</span></span><br><span class="line"><span class="comment"># 对每一个锚框我们需要预测它是不是包含了我们感兴趣的物体，还是只是背景。这里我们使用一个3x3的卷积层来做预测，加上`pad=1`使用它的输出和输入一样。</span></span><br><span class="line"><span class="comment"># 同时输出的通道数是`num_anchors*(num_classes+1)`，每个通道对应一个锚框对某个类的置信度。假设输出是`Y`，</span></span><br><span class="line"><span class="comment"># 那么对应输入中第n个样本的第(i,j)像素的置信值是在`Y[n,:,i,j]`里。具体来说，对于以`(i,j)`为中心的第`a`个锚框，</span></span><br><span class="line"><span class="comment"># - 通道 `a*(num_class+1)` 是其只包含背景的分数</span></span><br><span class="line"><span class="comment"># - 通道 `a*(num_class+1)+1+b` 是其包含第`b`个物体的分数</span></span><br><span class="line"><span class="comment"># 我们定义个一个这样的类别分类器函数：</span></span><br><span class="line"><span class="keyword">from</span> mxnet.gluon <span class="keyword">import</span> nn</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">class_predictor</span><span class="params">(num_anchors, num_classes)</span>:</span></span><br><span class="line">    <span class="string">"""return a layer to predict classes"""</span></span><br><span class="line">    <span class="keyword">return</span> nn.Conv2D(num_anchors * (num_classes + <span class="number">1</span>), <span class="number">3</span>, padding=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">cls_pred = class_predictor(<span class="number">5</span>, <span class="number">10</span>) <span class="comment"># 5个框 10类物体</span></span><br><span class="line">cls_pred.initialize()</span><br><span class="line">x = nd.zeros((<span class="number">2</span>, <span class="number">3</span>, <span class="number">20</span>, <span class="number">20</span>))</span><br><span class="line">y = cls_pred(x)</span><br><span class="line"><span class="keyword">print</span> y.shape <span class="comment">### (2L, 55L, 20L, 20L) #55=5*(10+1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 预测边界框</span></span><br><span class="line"><span class="comment"># 因为真实的边界框可以是任意形状，我们需要预测如何从一个锚框变换成真正的边界框。这个变换可以由一个长为4的向量来描述。同上一样，</span></span><br><span class="line"><span class="comment"># 我们用一个有`num_anchors * 4`通道的卷积。假设输出是Y，那么对应输入中第 n 个样本的第 (i,j)</span></span><br><span class="line"><span class="comment"># 像素为中心的锚框的转换在`Y[n,:,i,j]`里。具体来说，对于第`a`个锚框，它的变换在`a*4`到`a*4+3`通道里。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">box_predictor</span><span class="params">(num_anchors)</span>:</span></span><br><span class="line">    <span class="string">"""return a layer to predict delta locations"""</span></span><br><span class="line">    <span class="keyword">return</span> nn.Conv2D(num_anchors * <span class="number">4</span>, <span class="number">3</span>, padding=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">box_pred = box_predictor(<span class="number">10</span>)</span><br><span class="line">box_pred.initialize()</span><br><span class="line">x = nd.zeros((<span class="number">2</span>, <span class="number">3</span>, <span class="number">20</span>, <span class="number">20</span>))</span><br><span class="line">y = box_pred(x)</span><br><span class="line"><span class="keyword">print</span> y.shape  <span class="comment"># (2L, 40L, 20L, 20L)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 减半模块</span></span><br><span class="line"><span class="comment"># 我们定义一个卷积块，它将输入特征的长宽减半，以此来获取多尺度的预测。它由两个`Conv-BatchNorm-Relu`组成，</span></span><br><span class="line"><span class="comment"># 我们使用填充为1的3*3卷积使得输入和输入有同样的长宽，然后再通过跨度为2的最大池化层将长宽减半。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">down_sample</span><span class="params">(num_filters)</span>:</span></span><br><span class="line">    <span class="string">"""stack two Conv-BatchNorm-Relu blocks and then a pooling layer</span><br><span class="line">    to halve the feature size"""</span></span><br><span class="line">    out = nn.HybridSequential()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        out.add(nn.Conv2D(num_filters, <span class="number">3</span>, strides=<span class="number">1</span>, padding=<span class="number">1</span>))</span><br><span class="line">        out.add(nn.BatchNorm(in_channels=num_filters))</span><br><span class="line">        out.add(nn.Activation(<span class="string">'relu'</span>))</span><br><span class="line">    out.add(nn.MaxPool2D(<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line">blk = down_sample(<span class="number">10</span>)</span><br><span class="line">blk.initialize()</span><br><span class="line">x = nd.zeros((<span class="number">2</span>, <span class="number">3</span>, <span class="number">20</span>, <span class="number">20</span>))</span><br><span class="line">y = blk(x)</span><br><span class="line"><span class="keyword">print</span> y.shape <span class="comment">#(2L, 10L, 10L, 10L)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 合并来自不同层的预测输出</span></span><br><span class="line"><span class="comment"># 前面我们提到过SSD的一个重要性质是它会在多个层同时做预测。每个层由于长宽和锚框选择不一样，导致输出的数据形状会不一样。这里我们用物体类别预测作为样例，边框预测是类似的。</span></span><br><span class="line"><span class="comment"># 我们首先创建一个特定大小的输入，然后对它输出类别预测。然后对输入减半，再输出类别预测。</span></span><br><span class="line">x = nd.zeros((<span class="number">2</span>, <span class="number">8</span>, <span class="number">20</span>, <span class="number">20</span>))</span><br><span class="line">print(<span class="string">'x:'</span>, x.shape)</span><br><span class="line"></span><br><span class="line">cls_pred1 = class_predictor(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">cls_pred1.initialize()</span><br><span class="line">y1 = cls_pred1(x)</span><br><span class="line">print(<span class="string">'Class prediction 1:'</span>, y1.shape) <span class="comment">#(2L, 55L, 20L, 20L))</span></span><br><span class="line"></span><br><span class="line">ds = down_sample(<span class="number">16</span>)</span><br><span class="line">ds.initialize()</span><br><span class="line">x = ds(x)</span><br><span class="line">print(<span class="string">'x:'</span>, x.shape) <span class="comment"># (2L, 16L, 10L, 10L))</span></span><br><span class="line"></span><br><span class="line">cls_pred2 = class_predictor(<span class="number">3</span>, <span class="number">10</span>)</span><br><span class="line">cls_pred2.initialize()</span><br><span class="line">y2 = cls_pred2(x)</span><br><span class="line">print(<span class="string">'Class prediction 2:'</span>, y2.shape) <span class="comment">#(2L, 33L, 10L, 10L))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到`y1`和`y2`形状不同。为了之后处理简单，我们将不同层的输入合并成一个输出。首先我们将通道移到最后的维度，然后将其展成2D数组。</span></span><br><span class="line"><span class="comment"># 因为第一个维度是样本个数，所以不同输出之间是不变，我们可以将所有输出在第二个维度上拼接起来。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatten_prediction</span><span class="params">(pred)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> pred.transpose(axes=(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>)).flatten()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">concat_predictions</span><span class="params">(preds)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> nd.concat(*preds, dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">flat_y1 = flatten_prediction(y1)</span><br><span class="line">print(<span class="string">'Flatten class prediction 1'</span>, flat_y1.shape) <span class="comment"># (2L, 22000L)</span></span><br><span class="line">flat_y2 = flatten_prediction(y2)</span><br><span class="line">print(<span class="string">'Flatten class prediction 2'</span>, flat_y2.shape) <span class="comment"># (2L, 3300L)</span></span><br><span class="line">y = concat_predictions([flat_y1, flat_y2])</span><br><span class="line">print(<span class="string">'Concat class predictions'</span>, y.shape) <span class="comment"># (2L, 25300L)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 主体网络</span></span><br><span class="line"><span class="comment"># 主体网络用来从原始像素抽取特征。通常前面介绍的用来图片分类的卷积神经网络，例如ResNet，都可以用来作为主体网络。这里为了示范，我们简单叠加几个减半模块作为主体网络。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">body</span><span class="params">()</span>:</span></span><br><span class="line">    out = nn.HybridSequential()</span><br><span class="line">    <span class="keyword">for</span> nfilters <span class="keyword">in</span> [<span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>]:</span><br><span class="line">        out.add(down_sample(nfilters))</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line">bnet = body()</span><br><span class="line">bnet.initialize()</span><br><span class="line">x = nd.random.uniform(shape=(<span class="number">2</span>,<span class="number">3</span>,<span class="number">256</span>,<span class="number">256</span>))</span><br><span class="line">y = bnet(x)</span><br><span class="line"><span class="keyword">print</span> y.shape <span class="comment"># (2L, 64L, 32L, 32L)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 创建一个玩具SSD模型</span></span><br><span class="line"><span class="comment"># 现在我们可以创建一个玩具SSD模型了。我们称之为玩具是因为这个网络不管是层数还是锚框个数都比较小，仅仅适合之后我们使用的一个小数据集。但这个模型不会影响我们介绍SSD。</span></span><br><span class="line"><span class="comment"># 这个网络包含四块。主体网络，三个减半模块，以及五个物体类别和边框预测模块。其中预测分别应用在在主体网络输出，减半模块输入，和最后的全局池化层上。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toy_ssd_model</span><span class="params">(num_anchors, num_classes)</span>:</span></span><br><span class="line">    downsamplers = nn.Sequential()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        downsamplers.add(down_sample(<span class="number">128</span>))</span><br><span class="line"></span><br><span class="line">    class_predictors = nn.Sequential()</span><br><span class="line">    box_predictors = nn.Sequential()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        class_predictors.add(class_predictor(num_anchors, num_classes))</span><br><span class="line">        box_predictors.add(box_predictor(num_anchors))</span><br><span class="line"></span><br><span class="line">    model = nn.Sequential()</span><br><span class="line">    model.add(body(), downsamplers, class_predictors, box_predictors)</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"><span class="comment">### 计算预测</span></span><br><span class="line"><span class="comment"># 给定模型和每层预测输出使用的锚框大小和形状，我们可以定义前向函数。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toy_ssd_forward</span><span class="params">(x, model, sizes, ratios, verbose=False)</span>:</span></span><br><span class="line">    body, downsamplers, class_predictors, box_predictors = model</span><br><span class="line">    anchors, class_preds, box_preds = [], [], []</span><br><span class="line">    <span class="comment"># feature extraction</span></span><br><span class="line">    x = body(x)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        <span class="comment"># predict</span></span><br><span class="line">        anchors.append(MultiBoxPrior(x, sizes=sizes[i], ratios=ratios[i]))</span><br><span class="line">        class_preds.append(flatten_prediction(class_predictors[i](x)))</span><br><span class="line">        box_preds.append(flatten_prediction(box_predictors[i](x)))</span><br><span class="line">        <span class="keyword">if</span> verbose:</span><br><span class="line">            print(<span class="string">'Predict scale'</span>, i, x.shape, <span class="string">'with'</span>,anchors[-<span class="number">1</span>].shape[<span class="number">1</span>], <span class="string">'anchors'</span>)</span><br><span class="line">        <span class="comment"># down sample</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">3</span>:</span><br><span class="line">            x = downsamplers[i](x)</span><br><span class="line">        <span class="keyword">elif</span> i == <span class="number">3</span>:</span><br><span class="line">            x = nd.Pooling(</span><br><span class="line">                x, global_pool=<span class="keyword">True</span>, pool_type=<span class="string">'max'</span>,</span><br><span class="line">                kernel=(x.shape[<span class="number">2</span>], x.shape[<span class="number">3</span>]))</span><br><span class="line">    <span class="comment"># concat date</span></span><br><span class="line">    <span class="keyword">return</span> (concat_predictions(anchors),</span><br><span class="line">            concat_predictions(class_preds),</span><br><span class="line">            concat_predictions(box_preds))</span><br><span class="line"></span><br><span class="line"><span class="comment">### 完整的模型</span></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gluon</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToySSD</span><span class="params">(gluon.Block)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_classes, verbose=False, **kwargs)</span>:</span></span><br><span class="line">        super(ToySSD, self).__init__(**kwargs)</span><br><span class="line">        <span class="comment"># anchor box sizes and ratios for 5 feature scales</span></span><br><span class="line">        self.sizes = [[<span class="number">.2</span>,<span class="number">.272</span>], [<span class="number">.37</span>,<span class="number">.447</span>], [<span class="number">.54</span>,<span class="number">.619</span>], [<span class="number">.71</span>,<span class="number">.79</span>], [<span class="number">.88</span>,<span class="number">.961</span>]]</span><br><span class="line">        self.ratios = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">.5</span>]]*<span class="number">5</span>  <span class="comment">#[[1, 2, 0.5], [1, 2, 0.5], [1, 2, 0.5], [1, 2, 0.5], [1, 2, 0.5]]</span></span><br><span class="line">        self.num_classes = num_classes</span><br><span class="line">        self.verbose = verbose</span><br><span class="line">        num_anchors = len(self.sizes[<span class="number">0</span>]) + len(self.ratios[<span class="number">0</span>]) - <span class="number">1</span></span><br><span class="line">        <span class="comment"># use name_scope to guard the names</span></span><br><span class="line">        <span class="keyword">with</span> self.name_scope():</span><br><span class="line">            self.model = toy_ssd_model(num_anchors, num_classes)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        anchors, class_preds, box_preds = toy_ssd_forward(</span><br><span class="line">            x, self.model, self.sizes, self.ratios,</span><br><span class="line">            verbose=self.verbose)</span><br><span class="line">        <span class="comment"># it is better to have class predictions reshaped for softmax computation</span></span><br><span class="line">        class_preds = class_preds.reshape(shape=(<span class="number">0</span>, -<span class="number">1</span>, self.num_classes+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> anchors, class_preds, box_preds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们看看一下输入图片的形状是如何改变的，已经输出的形状。</span></span><br><span class="line">net = ToySSD(num_classes=<span class="number">2</span>, verbose=<span class="keyword">True</span>)</span><br><span class="line">net.initialize()</span><br><span class="line">x = batch.data[<span class="number">0</span>][<span class="number">0</span>:<span class="number">1</span>]</span><br><span class="line">print(<span class="string">'Input:'</span>, x.shape)</span><br><span class="line">anchors, class_preds, box_preds = net(x)</span><br><span class="line">print(<span class="string">'Output achors:'</span>, anchors.shape)</span><br><span class="line">print(<span class="string">'Output class predictions:'</span>, class_preds.shape)</span><br><span class="line">print(<span class="string">'Output box predictions:'</span>, box_preds.shape)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ('Input:', (1L, 3L, 256L, 256L))</span></span><br><span class="line"><span class="comment"># ('Predict scale', 0, (1L, 64L, 32L, 32L), 'with', 4096L, 'anchors')</span></span><br><span class="line"><span class="comment"># ('Predict scale', 1, (1L, 128L, 16L, 16L), 'with', 1024L, 'anchors')</span></span><br><span class="line"><span class="comment"># ('Predict scale', 2, (1L, 128L, 8L, 8L), 'with', 256L, 'anchors')</span></span><br><span class="line"><span class="comment"># ('Predict scale', 3, (1L, 128L, 4L, 4L), 'with', 64L, 'anchors')</span></span><br><span class="line"><span class="comment"># ('Predict scale', 4, (1L, 128L, 1L, 1L), 'with', 4L, 'anchors')</span></span><br><span class="line"><span class="comment"># ('Output achors:', (1L, 5444L, 4L))</span></span><br><span class="line"><span class="comment"># ('Output class predictions:', (1L, 5444L, 3L))</span></span><br><span class="line"><span class="comment"># ('Output box predictions:', (1L, 21776L))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 损失函数</span></span><br><span class="line"><span class="comment"># 虽然每张图片里面通常只有几个标注的边框，但SSD会生成大量的锚框。可以想象很多锚框都不会框住感兴趣的物体，就是说跟任何对应感兴趣物体的表框的IoU都小于某个阈值。</span></span><br><span class="line"><span class="comment"># 这样就会产生大量的负类锚框，或者说对应标号为0的锚框。对于这类锚框有两点要考虑的：</span></span><br><span class="line"><span class="comment"># 1. 边框预测的损失函数不应该包括负类锚框，因为它们并没有对应的真实边框</span></span><br><span class="line"><span class="comment"># 1. 因为负类锚框数目可能远多于其他，我们可以只保留其中的一些。而且是保留那些目前预测最不确信它是负类的，就是对类0预测值排序，选取数值最小的哪一些困难的负类锚框。</span></span><br><span class="line"><span class="comment"># 我们可以使用`MultiBoxTarget`来完成上面这两个操作。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mxnet.contrib.ndarray <span class="keyword">import</span> MultiBoxTarget</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">training_targets</span><span class="params">(anchors, class_preds, labels)</span>:</span></span><br><span class="line">    class_preds = class_preds.transpose(axes=(<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> MultiBoxTarget(anchors, labels, class_preds)</span><br><span class="line"></span><br><span class="line">out = training_targets(anchors, class_preds, batch.label[<span class="number">0</span>][<span class="number">0</span>:<span class="number">1</span>])</span><br><span class="line"><span class="keyword">print</span> out</span><br><span class="line"></span><br><span class="line"><span class="comment"># 它返回三个`NDArray`，分别是</span></span><br><span class="line"><span class="comment"># 1. 预测的边框跟真实边框的偏移，大小是`batch_size x (num_anchors*4)`</span></span><br><span class="line"><span class="comment"># 1. 用来遮掩不需要的负类锚框的掩码，大小跟上面一致</span></span><br><span class="line"><span class="comment"># 1. 锚框的真实的标号，大小是`batch_size x num_anchors`</span></span><br><span class="line"><span class="comment"># 我们可以计算这次只选中了多少个锚框进入损失函数：</span></span><br><span class="line"><span class="keyword">print</span> out[<span class="number">1</span>].sum()/<span class="number">4</span>  <span class="comment">#[ 36.]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后我们可以定义需要的损失函数了。</span></span><br><span class="line"><span class="comment"># 对于分类问题，最常用的损失函数是之前一直使用的交叉熵。这里我们定义一个类似于交叉熵的损失，不同于交叉熵的定义 $\log(p_j)$，</span></span><br><span class="line"><span class="comment"># 这里 $j$ 是真实的类别，且 $p_j$ 是对于的预测概率。我们使用一个被称之为关注损失的函数，给定正的$\gamma$和$\alpha$，它的定义是</span></span><br><span class="line"><span class="comment"># $$ - \alpha (1-p_j)^&#123;\gamma&#125; \log(p_j) $$</span></span><br><span class="line"><span class="comment"># 下图我们演示不同$\gamma$导致的变化。可以看到，增加$\gamma$可以使得对正类预测值比较大时损失变小。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">focal_loss</span><span class="params">(gamma, x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> - (<span class="number">1</span>-x)**gamma*np.log(x)</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">0.01</span>, <span class="number">1</span>, <span class="number">.01</span>)</span><br><span class="line">gammas = [<span class="number">0</span>,<span class="number">.25</span>,<span class="number">.5</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i,g <span class="keyword">in</span> enumerate(gammas):</span><br><span class="line">    plt.plot(x, focal_loss(g,x), colors[i])</span><br><span class="line"></span><br><span class="line">plt.legend([<span class="string">'gamma='</span>+str(g) <span class="keyword">for</span> g <span class="keyword">in</span> gammas])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个自定义的损失函数可以简单通过继承`gluon.loss.Loss`来实现。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FocalLoss</span><span class="params">(gluon.loss.Loss)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, axis=-<span class="number">1</span>, alpha=<span class="number">0.25</span>, gamma=<span class="number">2</span>, batch_axis=<span class="number">0</span>, **kwargs)</span>:</span></span><br><span class="line">        super(FocalLoss, self).__init__(<span class="keyword">None</span>, batch_axis, **kwargs)</span><br><span class="line">        self._axis = axis</span><br><span class="line">        self._alpha = alpha</span><br><span class="line">        self._gamma = gamma</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hybrid_forward</span><span class="params">(self, F, output, label)</span>:</span></span><br><span class="line">        output = F.softmax(output)</span><br><span class="line">        pj = output.pick(label, axis=self._axis, keepdims=<span class="keyword">True</span>)</span><br><span class="line">        loss = - self._alpha * ((<span class="number">1</span> - pj) ** self._gamma) * pj.log()</span><br><span class="line">        <span class="keyword">return</span> loss.mean(axis=self._batch_axis, exclude=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cls_loss = FocalLoss()</span><br><span class="line"><span class="keyword">print</span> cls_loss</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于边框的预测是一个回归问题。通常可以选择平方损失函数（L2损失）$f(x) = x ^ 2$。</span></span><br><span class="line"><span class="comment"># 但这个损失对于比较大的误差的惩罚很高。我们可以采用稍微缓和一点绝对损失函数（L1损失）$f(x) = | x |$，</span></span><br><span class="line"><span class="comment"># 它是随着误差线性增长，而不是平方增长。但这个函数在0点处倒是不唯一，因此可能会影响收敛。一个通常的解决办法是在0点附近使用平方函数使得它更加平滑。</span></span><br><span class="line"><span class="comment"># 它被称之为平滑L1损失函数。它通过一个参数$\sigma$来控制平滑的区域：</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># $$</span></span><br><span class="line"><span class="comment"># f(x) =</span></span><br><span class="line"><span class="comment"># \begin</span></span><br><span class="line"><span class="comment"># &#123;cases&#125;</span></span><br><span class="line"><span class="comment"># (\sigma</span></span><br><span class="line"><span class="comment"># x) ^ 2 / 2, &amp;  \text</span></span><br><span class="line"><span class="comment"># &#123; if&#125;x &lt; 1 /\sigma ^ 2\ \</span></span><br><span class="line"><span class="comment">#     | x | -0.5 /\sigma ^ 2, &amp;  \text</span></span><br><span class="line"><span class="comment"># &#123;otherwise&#125;</span></span><br><span class="line"><span class="comment"># \end</span></span><br><span class="line"><span class="comment"># &#123;cases&#125;</span></span><br><span class="line"><span class="comment"># $$</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们图示不同的$\sigma$的平滑L1损失和L2损失的区别。</span></span><br><span class="line">scales = [<span class="number">.5</span>, <span class="number">1</span>, <span class="number">10</span>]</span><br><span class="line">x = nd.arange(-<span class="number">2</span>, <span class="number">2</span>, <span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, s <span class="keyword">in</span> enumerate(scales):</span><br><span class="line">    y = nd.smooth_l1(x, scalar=s)</span><br><span class="line">    plt.plot(x.asnumpy(), y.asnumpy(), color=colors[i])</span><br><span class="line">plt.plot(x.asnumpy(), (x ** <span class="number">2</span>).asnumpy(), color=colors[len(scales)])</span><br><span class="line">plt.legend([<span class="string">'scale='</span> + str(s) <span class="keyword">for</span> s <span class="keyword">in</span> scales] + [<span class="string">'Square loss'</span>])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们同样通过继承`Loss`来定义这个损失。同时它接受一个额外参数`mask`，这是用来屏蔽掉不需要被惩罚的负例样本。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmoothL1Loss</span><span class="params">(gluon.loss.Loss)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, batch_axis=<span class="number">0</span>, **kwargs)</span>:</span></span><br><span class="line">        super(SmoothL1Loss, self).__init__(<span class="keyword">None</span>, batch_axis, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hybrid_forward</span><span class="params">(self, F, output, label, mask)</span>:</span></span><br><span class="line">        loss = F.smooth_l1((output - label) * mask, scalar=<span class="number">1.0</span>)</span><br><span class="line">        <span class="keyword">return</span> loss.mean(self._batch_axis, exclude=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">box_loss = SmoothL1Loss()</span><br><span class="line"><span class="keyword">print</span> box_loss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 评估测量</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 对于分类好坏我们可以沿用之前的分类精度。评估边框预测的好坏的一个常用是是平均绝对误差。记得在[线性回归]</span></span><br><span class="line"><span class="comment"># (.. / chapter_supervised - learning / linear - regression - scratch.md)我们使用了平均平方误差。</span></span><br><span class="line"><span class="comment"># 但跟上面对损失函数的讨论一样，平方误差对于大的误差给予过大的值，从而数值上过于敏感。平均绝对误差就是将二次项替换成绝对值，具体来说就是预测的边框和真实边框在4个维度上的差值的绝对值。</span></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> metric</span><br><span class="line">cls_metric = metric.Accuracy()</span><br><span class="line">box_metric = metric.MAE()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 初始化模型和训练器</span></span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> init</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> gpu</span><br><span class="line">ctx = gpu(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># the CUDA implementation requres each image has at least 3 lables.</span></span><br><span class="line"><span class="comment"># Padd two -1 labels for each instance</span></span><br><span class="line">train_data.reshape(label_shape=(<span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line">train_data = test_data.sync_label_shape(train_data)</span><br><span class="line"></span><br><span class="line">net = ToySSD(num_class)</span><br><span class="line">net.initialize(init.Xavier(magnitude=<span class="number">2</span>), ctx=ctx)</span><br><span class="line">trainer = gluon.Trainer(net.collect_params(),<span class="string">'sgd'</span>, &#123;<span class="string">'learning_rate'</span>: <span class="number">0.1</span>, <span class="string">'wd'</span>: <span class="number">5e-4</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 训练模型</span></span><br><span class="line"><span class="comment"># 训练函数跟前面的不一样在于网络会有多个输出，而且有两个损失函数。</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> mxnet <span class="keyword">import</span> autograd</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    <span class="comment"># reset data iterators and metrics</span></span><br><span class="line">    train_data.reset()</span><br><span class="line">    cls_metric.reset()</span><br><span class="line">    box_metric.reset()</span><br><span class="line">    tic = time.time()</span><br><span class="line">    <span class="keyword">for</span> i, batch <span class="keyword">in</span> enumerate(train_data):</span><br><span class="line">        x = batch.data[<span class="number">0</span>].as_in_context(ctx)</span><br><span class="line">        y = batch.label[<span class="number">0</span>].as_in_context(ctx)</span><br><span class="line">        <span class="keyword">with</span> autograd.record():</span><br><span class="line">            anchors, class_preds, box_preds = net(x)</span><br><span class="line">            box_target, box_mask, cls_target = training_targets(</span><br><span class="line">                anchors, class_preds, y)</span><br><span class="line">            <span class="comment"># losses</span></span><br><span class="line">            loss1 = cls_loss(class_preds, cls_target)</span><br><span class="line">            loss2 = box_loss(box_preds, box_target, box_mask)</span><br><span class="line">            loss = loss1 + loss2</span><br><span class="line">        loss.backward()</span><br><span class="line">        trainer.step(batch_size)</span><br><span class="line">        <span class="comment"># update metrics</span></span><br><span class="line">        cls_metric.update([cls_target], [class_preds.transpose((<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>))])</span><br><span class="line">        box_metric.update([box_target], [box_preds * box_mask])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print('Epoch %2d, train %s %.2f, %s %.5f, time %.1f sec' % (epoch, cls_metric.get(), box_metric.get(), time.time() - tic))</span></span><br><span class="line">    print(<span class="string">'Epoch %2d, train %s %.2f, %s %.5f, time %.1f sec'</span> % (</span><br><span class="line">            epoch, cls_metric.get()[<span class="number">0</span>], cls_metric.get()[<span class="number">1</span>], box_metric.get()[<span class="number">0</span>], box_metric.get()[<span class="number">1</span>], time.time() - tic))</span><br><span class="line"></span><br><span class="line"><span class="comment">## 预测</span></span><br><span class="line"><span class="comment"># 在预测阶段，我们希望能把图片里面所有感兴趣的物体找出来。我们先定一个数据读取和预处理函数。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_image</span><span class="params">(fname)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(fname, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        im = image.imdecode(f.read())</span><br><span class="line">    <span class="comment"># resize to data_shape</span></span><br><span class="line">    data = image.imresize(im, data_shape, data_shape)</span><br><span class="line">    <span class="comment"># minus rgb mean</span></span><br><span class="line">    data = data.astype(<span class="string">'float32'</span>) - rgb_mean</span><br><span class="line">    <span class="comment"># convert to batch x channel x height xwidth</span></span><br><span class="line">    <span class="keyword">return</span> data.transpose((<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>)).expand_dims(axis=<span class="number">0</span>), im</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后我们跟训练那样预测表框和其对应的物体。但注意到因为我们对每个像素都会生成数个锚框，这样我们可能会预测出大量相似的表框，从而导致结果非常嘈杂。</span></span><br><span class="line"><span class="comment"># 一个办法是对于IoU比较高的两个表框，我们只保留预测执行度比较高的那个。这个算法（称之为non maximum suppression）在`MultiBoxDetection`里实现了。下面我们实现预测函数：</span></span><br><span class="line"><span class="keyword">from</span> mxnet.contrib.ndarray <span class="keyword">import</span> MultiBoxDetection</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(x)</span>:</span></span><br><span class="line">    anchors, cls_preds, box_preds = net(x.as_in_context(ctx))</span><br><span class="line">    cls_probs = nd.SoftmaxActivation(</span><br><span class="line">        cls_preds.transpose((<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>)), mode=<span class="string">'channel'</span>)</span><br><span class="line">    <span class="keyword">return</span> MultiBoxDetection(cls_probs, box_preds, anchors,force_suppress=<span class="keyword">True</span>, clip=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测函数会输出所有边框，每个边框由`[class_id, confidence, xmin, ymin, xmax, ymax]`表示。其中`class_id = -1`表示要么这个边框被预测只含有背景，或者被去重掉了。</span></span><br><span class="line">x, im = process_image(<span class="string">'../data/pikachu.jpg'</span>)</span><br><span class="line">out = predict(x)</span><br><span class="line"><span class="keyword">print</span> out.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后我们将预测出置信度超过某个阈值的边框画出来：</span></span><br><span class="line">mpl.rcParams[<span class="string">'figure.figsize'</span>] = (<span class="number">6</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(im, out, threshold=<span class="number">0.5</span>)</span>:</span></span><br><span class="line">    plt.imshow(im.asnumpy())</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> out:</span><br><span class="line">        row = row.asnumpy()</span><br><span class="line">        class_id, score = int(row[<span class="number">0</span>]), row[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> class_id &lt; <span class="number">0</span> <span class="keyword">or</span> score &lt; threshold:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        color = colors[class_id % len(colors)]</span><br><span class="line">        box = row[<span class="number">2</span>:<span class="number">6</span>] * np.array([im.shape[<span class="number">0</span>], im.shape[<span class="number">1</span>]] * <span class="number">2</span>)</span><br><span class="line">        rect = box_to_rect(nd.array(box), color, <span class="number">2</span>)</span><br><span class="line">        plt.gca().add_patch(rect)</span><br><span class="line"></span><br><span class="line">        text = class_names[class_id]</span><br><span class="line">        plt.gca().text(box[<span class="number">0</span>], box[<span class="number">1</span>],</span><br><span class="line">                       <span class="string">'&#123;:s&#125; &#123;:.2f&#125;'</span>.format(text, score),</span><br><span class="line">                       bbox=dict(facecolor=color, alpha=<span class="number">0.5</span>),</span><br><span class="line">                       fontsize=<span class="number">10</span>, color=<span class="string">'white'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">display(im, out[<span class="number">0</span>], threshold=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 结论</span></span><br><span class="line"><span class="comment"># 物体检测比分类要困难很多。因为我们不仅要预测物体类别，还要找到它们的位置。这一章我们展示我们还是可以在合理篇幅里实现SSD算法。</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-1-_u524D_u8A00"><a href="#1-1-_u524D_u8A00" class="headerlink" title="1.1.前言"></a>1.1.前言</h2><p>资料详见<a href="https://zh.gluon.ai/">动手学深度学习</a><br>]]>
    
    </summary>
    
      <category term="Mxnet" scheme="http://www.bestzhangjin.com/tags/Mxnet/"/>
    
      <category term="深度学习" scheme="http://www.bestzhangjin.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CentOS]]></title>
    <link href="http://www.bestzhangjin.com/2016/11/17/linux_centos/"/>
    <id>http://www.bestzhangjin.com/2016/11/17/linux_centos/</id>
    <published>2016-11-17T10:59:00.000Z</published>
    <updated>2017-10-11T13:42:28.826Z</updated>
    <content type="html"><![CDATA[<p>主要内容：<br><a id="more"></a></p>
<h1 id="u7B2C_u4E00_u7AE0__u5B89_u88C5_u4E0E_u66F4_u65B0"><a href="#u7B2C_u4E00_u7AE0__u5B89_u88C5_u4E0E_u66F4_u65B0" class="headerlink" title="第一章 安装与更新"></a>第一章 安装与更新</h1><h2 id="1-_u7CFB_u7EDF_u5B89_u88C5"><a href="#1-_u7CFB_u7EDF_u5B89_u88C5" class="headerlink" title="1.系统安装"></a>1.系统安装</h2><p>详见<br><a href="http://bestzhangjin.com/2016/04/27/centos_windows/" target="_blank" rel="external">http://bestzhangjin.com/2016/04/27/centos_windows/</a></p>
<h2 id="2-_u66F4_u65B0yum_u6E90"><a href="#2-_u66F4_u65B0yum_u6E90" class="headerlink" title="2.更新yum源"></a>2.更新yum源</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/yum<span class="class">.repos</span><span class="class">.d</span></span><br><span class="line">mv CentOS-Base<span class="class">.repo</span> CentOS-Base<span class="class">.repo</span><span class="class">.backup</span>  <span class="comment">//备份</span></span><br><span class="line">wget http:<span class="comment">//mirrors.163.com/.help/CentOS6-Base-163.repo //源</span></span><br><span class="line">mv CentOS6-Base-<span class="number">163</span><span class="class">.repo</span> CentOS-Base<span class="class">.repo</span></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line">yum -y update</span><br></pre></td></tr></table></figure>
<h1 id="u7B2C_u4E8C_u7AE0__u8F6F_u4EF6_u5B89_u88C5"><a href="#u7B2C_u4E8C_u7AE0__u8F6F_u4EF6_u5B89_u88C5" class="headerlink" title="第二章 软件安装"></a>第二章 软件安装</h1><h2 id="1-ibus_u8F93_u5165_u6CD5"><a href="#1-ibus_u8F93_u5165_u6CD5" class="headerlink" title="1.ibus输入法"></a>1.ibus输入法</h2><p>点击系统-&gt;首选项-&gt;输入法 点击使用IBus即可 ctrl+空格键可以切换输入法<br>没有IBus则参考安装:<a href="http://jingyan.baidu.com/article/c843ea0b94d61a77931e4a3b.html" target="_blank" rel="external">http://jingyan.baidu.com/article/c843ea0b94d61a77931e4a3b.html</a></p>
<h1 id="u7B2C_u4E09_u7AE0__u5E38_u89C1_u95EE_u9898"><a href="#u7B2C_u4E09_u7AE0__u5E38_u89C1_u95EE_u9898" class="headerlink" title="第三章 常见问题"></a>第三章 常见问题</h1><h2 id="1-linux_u7F51_u7EDC_u6709_u7EBF_u8FDE_u63A5_u5931_u8D25_u201C_u8BBE_u5907_u672A_u6258_u7BA1_u201D__u89E3_u51B3_u529E_u6CD5"><a href="#1-linux_u7F51_u7EDC_u6709_u7EBF_u8FDE_u63A5_u5931_u8D25_u201C_u8BBE_u5907_u672A_u6258_u7BA1_u201D__u89E3_u51B3_u529E_u6CD5" class="headerlink" title="1.linux网络有线连接失败“设备未托管” 解决办法"></a>1.linux网络有线连接失败“设备未托管” 解决办法</h2><p>问题描述：<br>1).Linux 无线网络连接正常，有线网络无法连接<br>2).ifconfig 命令之后没有eth0 。<br>3).右上角网络连接处显示有线网络 设备未托管<br>解决方法：<br>sudo /etc/NetworkManager/NetworkManager.conf<br>将managed=false改成true，重启一下就可以了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要内容：<br>]]>
    
    </summary>
    
      <category term="CentOS" scheme="http://www.bestzhangjin.com/tags/CentOS/"/>
    
      <category term="系统" scheme="http://www.bestzhangjin.com/categories/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hadoop]]></title>
    <link href="http://www.bestzhangjin.com/2016/11/09/Hadoop/"/>
    <id>http://www.bestzhangjin.com/2016/11/09/Hadoop/</id>
    <published>2016-11-09T13:10:12.000Z</published>
    <updated>2016-11-17T14:46:44.601Z</updated>
    <content type="html"><![CDATA[<p>主要内容：Hadoop大数据分布式处理实践<br><a id="more"></a></p>
<h1 id="u7B2C_u4E00_u7AE0_Hadoop_u96C6_u7FA4_u642D_u5EFA"><a href="#u7B2C_u4E00_u7AE0_Hadoop_u96C6_u7FA4_u642D_u5EFA" class="headerlink" title="第一章 Hadoop集群搭建"></a>第一章 Hadoop集群搭建</h1><h2 id="1-_u73AF_u5883_u51C6_u5907"><a href="#1-_u73AF_u5883_u51C6_u5907" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><p>准备4台电脑，安装上centos系统,准备一台路由器，将4台电脑连上此路由器，即4台电脑在同一个局域网。</p>
<p>(1)设置静态IP<br>设置4台电脑的静态IP地址：<br>192.168.1.100<br>192.168.1.101<br>192.168.1.102<br>192.168.1.103</p>
<p>备注：192.168.1.100作为namenode  192.168.1.101-103作为datanode<br>说明：静态IP设置：<br>进入目录:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="regexp">/etc/</span>sysconfig<span class="regexp">/network-scripts/</span></span><br></pre></td></tr></table></figure></p>
<p>查看是否有ifcfg-eth0文件<br>没有则复制ifcfg-lo:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cp</span> ifcfg-<span class="keyword">lo</span> ifcfg-eth0</span><br></pre></td></tr></table></figure></p>
<p>然后对ifcfg-eth0进行修改(root模式下)：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">vi</span> ifcfg-eth0</span><br></pre></td></tr></table></figure></p>
<p>修改如下：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">DEVICE=<span class="value">eth0</span></span></span><br><span class="line"><span class="setting">IPADDR=<span class="value"><span class="number">192.168</span>.<span class="number">1.100</span></span></span></span><br><span class="line"><span class="setting">NETMASK=<span class="value"><span class="number">255.255</span>.<span class="number">255.0</span></span></span></span><br><span class="line"><span class="setting">NETWORK=<span class="value"><span class="number">192.168</span>.<span class="number">1.0</span></span></span></span><br><span class="line"><span class="comment"># If you're having problems with gated making 127.0.0.0/8 a martian,</span></span><br><span class="line"><span class="comment"># you can change this to something else (255.255.255.255, for example)</span></span><br><span class="line"><span class="setting">BROADCAST=<span class="value"><span class="number">127.255</span>.<span class="number">255.255</span></span></span></span><br><span class="line"><span class="setting">ONBOOT=<span class="value"><span class="keyword">yes</span></span></span></span><br><span class="line"><span class="setting">BOOTPROTO=<span class="value"><span class="string">"static"</span></span></span></span><br><span class="line"><span class="setting">GATEWAY=<span class="value"><span class="number">192.168</span>.<span class="number">1.1</span></span></span></span><br><span class="line"><span class="setting">NM_CONTROLLED=<span class="value"><span class="string">"no"</span></span></span></span><br></pre></td></tr></table></figure></p>
<p>NM_CONTROLLED=”no” 可以使得重启电脑后ip不变<br>静态IP设置后通过命令service network start生效<br>设置好静态IP后ping一下，保证四台电脑之间相互能够连通</p>
<p>如果电脑太多，不方便一个一个改的话可以用scp复制(scp用于不同电脑/系统的文件/文件夹(-r)复制)<br>如下命令可以将本机的ifcfg-eth0文件复制到192.168.1.101电脑下的tmp目录下<br>用这个要先安装有SSH（看下面(2)）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp ifcfg-eth0 zhang@<span class="number">192.168</span><span class="number">.1</span><span class="number">.101</span>：/tmp/</span><br></pre></td></tr></table></figure></p>
<p>如果提示Pemission denied（证明没有权限） 只需要将其复制到有权限的目录然后再用ssh进入对方电脑进行cp就可以；也可以通过修改对方文件夹权限实现。</p>
<p>(2)ssh配置与防火墙设置<br>安装SSH<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="operator"><span class="keyword">install</span> openssh-<span class="keyword">server</span></span></span><br></pre></td></tr></table></figure></p>
<p>开启SSH服务<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd <span class="literal">start</span></span><br></pre></td></tr></table></figure></p>
<p>之后可以连接和退出其他电脑:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh <span class="number">192.168</span><span class="number">.1</span><span class="number">.101</span> <span class="comment">//连接ip为192.168.1.101的电脑</span></span><br><span class="line">logout            <span class="comment">//退出连接的电脑</span></span><br></pre></td></tr></table></figure></p>
<p>重点：<br>以上设置后重启电脑(reboot)后又需要重新弄，所以必须改成永久性的<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig sshd <span class="keyword">on</span> <span class="comment">//ssh开机即启动</span></span><br><span class="line">chkconfig iptables off <span class="comment">//防火墙永久关闭</span></span><br></pre></td></tr></table></figure></p>
<p>但是上面的连接需要输入对方的密码才能访问，下面搭建免密码SSH<br>配置SSH免密码访问<br>运行ssh-keygen -t rsa 这里遇到输入时直接回车<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="comment">@localhost zhang]# ssh-keygen -t rsa</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">63:fc:01:3e:8d:21:cf:5f:ce:c3:49:c5:e0:1d:84:6f root<span class="comment">@localhost.localdomain</span></span><br><span class="line">The key's randomart image is:</span><br><span class="line">+--[ RSA 2048]----+</span><br><span class="line">|<span class="string">            .oo  </span>|</span><br><span class="line">|<span class="string">           ..+ . </span>|</span><br><span class="line">|<span class="string">      . o   ..+  </span>|</span><br><span class="line">|<span class="string">       * =   .E  </span>|</span><br><span class="line">|<span class="string">        S o o.   </span>|</span><br><span class="line">|<span class="string">       . = B .   </span>|</span><br><span class="line">|<span class="string">          o *    </span>|</span><br><span class="line">|<span class="string">             .   </span>|</span><br><span class="line">|<span class="string">                 </span>|</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure></p>
<p>之后进入目录/root/.ssh 通过ls -a可以看到.ssh文件夹目录<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="property">@localhost</span> .ssh]<span class="comment"># ls -a</span></span><br><span class="line">.  ..  id_rsa  id_rsa.pub  known_hosts</span><br></pre></td></tr></table></figure></p>
<p>其他三台电脑同理，运行如上。</p>
<p>(3)常见错误分析：<br>SSH登陆错误 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Connection to <span class="number">192.168</span><span class="number">.10</span><span class="number">.20</span> closed.</span><br><span class="line">[root<span class="variable">@localhost</span> ~]# ssh <span class="number">192.168</span><span class="number">.10</span><span class="number">.88</span></span><br><span class="line"><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span>@</span><br><span class="line">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class="line"><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span><span class="variable">@@</span>@</span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-<span class="keyword">in</span>-the-middle attack)!</span><br><span class="line">It is also possible that the RSA host key has just been changed.</span><br><span class="line">The fingerprint <span class="keyword">for</span> the RSA key sent by the remote host is</span><br><span class="line">b6:<span class="number">0</span>c:<span class="number">41</span>:<span class="number">43</span>:<span class="number">60</span>:<span class="number">79</span>:eb:<span class="number">05</span>:<span class="number">9</span>e:c9:<span class="number">72</span>:<span class="number">1</span>d:a0:<span class="number">41</span>:<span class="number">9</span>a:<span class="number">50.</span></span><br><span class="line">Please contact your <span class="keyword">system</span> administrator.</span><br><span class="line">Add correct host key <span class="keyword">in</span> /root/.ssh/known_hosts to get rid of this message.</span><br><span class="line">Offending key <span class="keyword">in</span> /root/.ssh/known_hosts:<span class="number">5</span></span><br><span class="line">RSA host key <span class="keyword">for</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.88</span> has changed and you have requested strict checking.</span><br><span class="line">Host key verification failed.</span><br></pre></td></tr></table></figure></p>
<p>方法1.在客户端执行下述指令即可 #mv /root/.ssh/known_hosts /tmp<br>方法2.当然也可以直接编辑known_hosts文件,把里面与所要连接IP(192.168.10.20)相关的内容删掉即可.</p>
<p>(4)参考文献：<br><a href="http://www.cnblogs.com/ylh1223/archive/2012/05/31/2528517.html" target="_blank" rel="external">http://www.cnblogs.com/ylh1223/archive/2012/05/31/2528517.html</a><br><a href="http://jingyan.baidu.com/article/3ea51489f9efbf52e61bba05.html" target="_blank" rel="external">http://jingyan.baidu.com/article/3ea51489f9efbf52e61bba05.html</a><br><a href="http://www.jb51.net/LINUXjishu/70474.html" target="_blank" rel="external">http://www.jb51.net/LINUXjishu/70474.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要内容：Hadoop大数据分布式处理实践<br>]]>
    
    </summary>
    
      <category term="Hadoop" scheme="http://www.bestzhangjin.com/tags/Hadoop/"/>
    
      <category term="大数据" scheme="http://www.bestzhangjin.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[知识补充]]></title>
    <link href="http://www.bestzhangjin.com/2016/10/20/bucong/"/>
    <id>http://www.bestzhangjin.com/2016/10/20/bucong/</id>
    <published>2016-10-20T02:40:20.000Z</published>
    <updated>2017-10-11T14:02:42.953Z</updated>
    <content type="html"><![CDATA[<p>千里之行始于足下，千里之堤溃于蚁穴<br><a id="more"></a></p>
<h2 id="u4F4D_u57DF"><a href="#u4F4D_u57DF" class="headerlink" title="位域"></a>位域</h2><p>引用自：<a href="http://bbs.csdn.net/topics/330120699" target="_blank" rel="external">http://bbs.csdn.net/topics/330120699</a><br>有些信息在存储时，并不需要占用一个完整的字节， 而只需占几个或一个二进制位。例如在存放一个开关量时，只有0和1 两种状态， 用一位二进位即可。为了节省存储空间，并使处理简便，Ｃ语言又提供了一种数据结构，称为“位域”或“位段”。所谓“位域”是把一个字节中的二进位划分为几个不同的区域， 并说明每个区域的位数。每个域有一个域名，允许在程序中按域名进行操作。 这样就可以把几个不同的对象用一个字节的二进制位域来表示。一、位域的定义和位域变量的说明位域定义与结构定义相仿，其形式为：<br>struct 位域结构名<br>{ 位域列表 };<br>其中位域列表的形式为： 类型说明符 位域名：位域长度<br>例如：<br>struct bs<br>{<br>int a:8;<br>int b:2;<br>int c:6;<br>};<br>位域变量的说明与结构变量说明的方式相同。 可采用先定义后说明，同时定义说明或者直接说明这三种方式。例如：<br>struct bs<br>{<br>int a:8;<br>int b:2;<br>int c:6;<br>}data;<br>说明data为bs变量，共占两个字节。其中位域a占8位，位域b占2位，位域c占6位。对于位域的定义尚有以下几点说明：</p>
<ol>
<li><p>一个位域必须存储在同一个字节中，不能跨两个字节。如一个字节所剩空间不够存放另一位域时，应从下一单元起存放该位域。也可以有意使某位域从下一单元开始。例如：<br>struct bs<br>{<br>unsigned a:4<br>unsigned :0 /<em>空域</em>/<br>unsigned b:4 /<em>从下一单元开始存放</em>/<br>unsigned c:4<br>}<br>在这个位域定义中，a占第一字节的4位，后4位填0表示不使用，b从第二字节开始，占用4位，c占用4位。</p>
</li>
<li><p>由于位域不允许跨两个字节，因此位域的长度不能大于一个字节的长度，也就是说不能超过8位二进位。</p>
</li>
<li><p>位域可以无位域名，这时它只用来作填充或调整位置。无名的位域是不能使用的。例如：<br>struct k<br>{<br>int a:1<br>int :2 /<em>该2位不能使用</em>/<br>int b:3<br>int c:2<br>};<br>从以上分析可以看出，位域在本质上就是一种结构类型， 不过其成员是按二进位分配的。</p>
</li>
</ol>
<p>二、位域的使用位域的使用和结构成员的使用相同，其一般形式为： 位域变量名·位域名 位域允许用各种格式输出。<br>main(){<br>struct bs<br>{<br>unsigned a:1;<br>unsigned b:3;<br>unsigned c:4;<br>} bit,*pbit;<br>bit.a=1;<br>bit.b=7;<br>bit.c=15;<br>printf(“%d,%d,%d\n”,bit.a,bit.b,bit.c);<br>pbit=&bit;<br>pbit-&gt;a=0;<br>pbit-&gt;b&amp;=3;<br>pbit-&gt;c|=1;<br>printf(“%d,%d,%d\n”,pbit-&gt;a,pbit-&gt;b,pbit-&gt;c);<br>}<br>上例程序中定义了位域结构bs，三个位域为a,b,c。说明了bs类型的变量bit和指向bs类型的指针变量pbit。这表示位域也是可以使用指针的。<br>程序的9、10、11三行分别给三个位域赋值。( 应注意赋值不能超过该位域的允许范围)程序第12行以整型量格式输出三个域的内容。第13行把位域变量bit的地址送给指针变量pbit。第14行用指针方式给位域a重新赋值，赋为0。第15行使用了复合的位运算符”&amp;=”， 该行相当于： pbit-&gt;b=pbit-&gt;b&amp;3位域b中原有值为7，与3作按位与运算的结果为3(111&amp;011=011,十进制值为3)。同样，程序第16行中使用了复合位运算”|=”， 相当于： pbit-&gt;c=pbit-&gt;c|1其结果为15。程序第17行用指针方式输出了这三个域的值。</p>
<h2 id="u94FE_u8868_u56DE_u8DEF_u95EE_u9898"><a href="#u94FE_u8868_u56DE_u8DEF_u95EE_u9898" class="headerlink" title="链表回路问题"></a>链表回路问题</h2><p>来自：<a href="http://www.cnblogs.com/kqingchao/archive/2011/07/06/whether_there_is_a_loop_in_link.html" target="_blank" rel="external">http://www.cnblogs.com/kqingchao/archive/2011/07/06/whether_there_is_a_loop_in_link.html</a><br>如果你曾经想过要参加面试，像我一样，你一定看过这个问题：如何判断链表中存在环路。（我不太清楚这个问题的应用在哪里，烦请各位读者能够提示一下。）</p>
<p>先简单说一下我之前看到的方法。</p>
<p>方法一：蛮力法。</p>
<p>方法二：在链表中增加一个域visited，初始化都为0，从链表的头部开始走，每走过一个链表就标记visited为1，如果要访问的下一个节点的visited域为1，那么证明链表中有环。</p>
<p>方法三：如果不能增加域，可以设置一个数组，将已经访问的链表节点依次放入到数组中，在访问下一个节点时，如果这个节点的地址已经在数组中，那么也能证明链表中有环。</p>
<p>进入正题之前，先简单说一下今天的面试。今天下午我参加面试的时候也被问到了这个问题，面试官是个南开的MM。似乎她也意识到诸如此类的问题已经在网上司空见惯，所以就试探性的问我是不是之前已经在网上看到了方法。我很老实，回答：嗯。我俩相视而笑。</p>
<p>然后，她又问我一个问题：如何找到一个链表的中间元素？我想了想，灵光一闪，说：设置两个指针p和q，p一次走一下，q一次走两下，这样当q走到链表的尾部的时候，p应该正好走到链表的中间（我当时很佩服我自己。。。）。那个MM笑了一下，表示赞同，接下来随口的一句话把我带入了漩涡：嗯，刚才那个判断链表是否有环的问题也可以用这个方法。顿时，我脸上呈现出迷茫的表情，好奇心驱使着我问道：真的？MM一看我竟然不知道这个方法，说：哦，原来你不知道啊！正好，你想想用你刚才说的方法解决一下链表有环的问题。同志们，好奇心害死猫啊！</p>
<p>然后我就囧了，折腾了半天，画了个链表，在上面试着画了一下，发现如果链表有环，有可能q会追上p，相当与长跑中的套圈。但是，有一个问题：p是不是一定会和q重合？</p>
<p>这个问题看起来有些复杂，我们现在来抽象一下，这个问题不是很难。</p>
<p>假设此时p点刚刚进入到链表中的环中，q在环中的某一个位置，如图所示。<br><img src="/img/bucong/1.png" alt="image"><br>设t时间后，p和q在环中的某一点相遇，初始时p和q相隔k个节点（0&lt;=k&lt;=n-1，其中n为环中的节点数；图中p和q相隔3个节点，而不是2个：因为假如q不动，p需要经过3步移动才可以和q重合），那么可得：</p>
<p>t(mod n) = k + 2t(mod n)</p>
<p>那么，对任意的正整数m，使得：t + mn  = k + 2t</p>
<p>那么显然此时 t = mn-k，m&gt;=1。</p>
<p>靠！原来这么简单。。。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>千里之行始于足下，千里之堤溃于蚁穴<br>]]>
    
    </summary>
    
      <category term="知识补充" scheme="http://www.bestzhangjin.com/tags/%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85/"/>
    
      <category term="知识补充" scheme="http://www.bestzhangjin.com/categories/%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据结构与算法]]></title>
    <link href="http://www.bestzhangjin.com/2016/10/07/suanfa/"/>
    <id>http://www.bestzhangjin.com/2016/10/07/suanfa/</id>
    <published>2016-10-07T13:45:02.000Z</published>
    <updated>2017-10-11T13:44:19.994Z</updated>
    <content type="html"><![CDATA[<p>主要内容：各种算法总结<br><a id="more"></a></p>
<h1 id="u4E00-_u6570_u636E_u7ED3_u6784"><a href="#u4E00-_u6570_u636E_u7ED3_u6784" class="headerlink" title="一.数据结构"></a>一.数据结构</h1><h2 id="1-_u4ECB_u7ECD"><a href="#1-_u4ECB_u7ECD" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>数据之间三种基本数据结构：<br>线性结构：数据元素之间一对一关系；<br>树形结构：数据元素之间一对多关系；<br>网状结构：数据元素之间多对多关系。</p>
<h2 id="2-_u7EBF_u6027_u8868"><a href="#2-_u7EBF_u6027_u8868" class="headerlink" title="2.线性表"></a>2.线性表</h2><p>线性表分顺序表和链表；<br>顺序表存储位置是相邻连续的，可以随即访问的一种数据结构，一个顺序表在使用前必须指定起长度，一旦分配内存，则在使用中不可以动态的更改。他的优点是访问数据是比较方便，可以随即的访问表中的任何一个数据。<br>链表是通过指针来描述元素关系的一种数据结构，他可以是物理地址不连续的物理空间。不能随即访问链表元素，必须从表头开始，一步一步搜索元素。它的优点是：对于数组，可以动态的改变数据的长度，分配物理空间。<br>在使用中：如果一个数组在使用中，查询比较多，而插入，删除数据比较少，数组的长度不变时，选顺序表比较合理。如果插入，删除，长度不定的数组，可以选链表。</p>
<p>(1)顺序表<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXSIZE <span class="number">100</span> <span class="comment">//顺序表最大长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义数据类型 数据节点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="keyword">char</span> key[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125; DATA;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义顺序表结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    DATA ListData[MAXSIZE+<span class="number">1</span>];<span class="comment">//保存顺序表的数组</span></span><br><span class="line">    <span class="keyword">int</span> ListLen;<span class="comment">//已经存储的节点数量</span></span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化顺序表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqListInit</span><span class="params">(SeqList *SL)</span></span>&#123;</span><br><span class="line">    SL-&gt;ListLen=<span class="number">0</span>;<span class="comment">//清空表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//长度查询</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqListLength</span><span class="params">(SeqList *SL)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SL-&gt;ListLen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqListADD</span><span class="params">(SeqList *SL,DATA data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(SL-&gt;ListLen&gt;=MAXSIZE)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"表满，不可添加!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    SL-&gt;ListData[++SL-&gt;ListLen]=data;<span class="comment">//在表后面添加数据同时len+1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqListInsert</span><span class="params">(SeqList *SL,<span class="keyword">int</span> n,DATA data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(SL-&gt;ListLen==MAXSIZE)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"表满,不可插入节点!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">1</span>||n&gt;SL-&gt;ListLen-<span class="number">1</span>)&#123;<span class="comment">//插入序号不对</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"插入节点序号错误，不能插入!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=SL-&gt;ListLen;i&gt;=n;i--)&#123;<span class="comment">//数据后移</span></span><br><span class="line">        SL-&gt;ListData[i+<span class="number">1</span>]=SL-&gt;ListData[i];</span><br><span class="line">    &#125;</span><br><span class="line">    SL-&gt;ListData[n]=data;</span><br><span class="line">    SL-&gt;ListLen++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqListDelete</span><span class="params">(SeqList *SL,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">1</span>||n&gt;SL-&gt;ListLen+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入节点序号错误，不能删除节点!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=n;i&lt;SL-&gt;ListLen;i++)<span class="comment">//数据表前移</span></span><br><span class="line">        SL-&gt;ListData[i]=SL-&gt;ListData[i+<span class="number">1</span>];</span><br><span class="line">    SL-&gt;ListLen--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按序号查找节点</span></span><br><span class="line"><span class="function">DATA *<span class="title">SeqListFindByNum</span><span class="params">(SeqList *SL,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">1</span> || n&gt;SL-&gt;ListLen+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"节点序号错误，不能返回节点!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*************/</span></span><br><span class="line">    <span class="keyword">return</span> &amp;(SL-&gt;ListData[n]);<span class="comment">//返回找到节点的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按关键字（这里用key）查找节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqListFindByKey</span><span class="params">(SeqList *SL,<span class="keyword">char</span> *key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=SL-&gt;ListLen;i++)&#123;</span><br><span class="line">        <span class="comment">// /////////////////////</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(SL-&gt;ListData[i].key,key)==<span class="number">0</span>)<span class="comment">//查到节点</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历输出</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqListAll</span><span class="params">(SeqList *SL)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=SL-&gt;ListLen;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"(%s,%s,%d)\n"</span>,SL-&gt;ListData[i].key,SL-&gt;ListData[i].name,SL-&gt;ListData[i].age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    SeqList SL;</span><br><span class="line">    DATA data,*data1;</span><br><span class="line">    <span class="keyword">char</span> key[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">    SeqListInit(&amp;SL);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入添加的节点(学号 姓名 年龄)："</span>);</span><br><span class="line">        fflush(<span class="built_in">stdin</span>);<span class="comment">//清空输入缓冲区</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%s%d"</span>,&amp;data.key,&amp;data.name,&amp;data.age);</span><br><span class="line">        <span class="keyword">if</span>(data.age)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!SeqListADD(&amp;SL,data))<span class="comment">//添加节点失败</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//年龄为0时退出死循环</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n顺序表中的数据为:\n"</span>);</span><br><span class="line">    SeqListAll(&amp;SL);</span><br><span class="line"></span><br><span class="line">    fflush(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n要取出节点的序号:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;i);</span><br><span class="line">    data1=SeqListFindByNum(&amp;SL,i);</span><br><span class="line">    <span class="keyword">if</span>(data1)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"第%d个节点为:(%s,%s,%d)\n"</span>,i,data1-&gt;key,data1-&gt;name,data1-&gt;age);</span><br><span class="line">    fflush(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n要查找节点的关键字:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,key);</span><br><span class="line">    i=SeqListFindByKey(&amp;SL,key);</span><br><span class="line">    data1=SeqListFindByNum(&amp;SL,i);</span><br><span class="line">    <span class="keyword">if</span>(data1)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"第%d个节点为:(%s,%s,%d)\n"</span>,i,data1-&gt;key,data1-&gt;name,data1-&gt;age);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">输入添加的节点(学号 姓名 年龄)：<span class="number">1</span> liming <span class="number">23</span></span><br><span class="line">输入添加的节点(学号 姓名 年龄)：<span class="number">2</span> wanghua <span class="number">21</span></span><br><span class="line">输入添加的节点(学号 姓名 年龄)：<span class="number">3</span> nisan <span class="number">14</span></span><br><span class="line">输入添加的节点(学号 姓名 年龄)：<span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">顺序表中的数据为:</span><br><span class="line">(<span class="number">1</span>,liming,<span class="number">23</span>)</span><br><span class="line">(<span class="number">2</span>,wanghua,<span class="number">21</span>)</span><br><span class="line">(<span class="number">3</span>,nisan,<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">要取出节点的序号:<span class="number">1</span></span><br><span class="line">第<span class="number">1</span>个节点为:(<span class="number">1</span>,liming,<span class="number">23</span>)</span><br><span class="line"></span><br><span class="line">要查找节点的关键字:<span class="number">2</span></span><br><span class="line">第<span class="number">2</span>个节点为:(<span class="number">2</span>,wanghua,<span class="number">21</span>)</span><br></pre></td></tr></table></figure></p>
<p>(2)链表<br>链表有单向链表、双向链表、循环链表<br>A.单向链表<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">char</span> key[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;DATA;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Node&#123;</span><br><span class="line">    DATA data;</span><br><span class="line">    <span class="keyword">struct</span> Node *next;</span><br><span class="line">&#125;ChainList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加节点到尾部</span></span><br><span class="line"><span class="function">ChainList *<span class="title">ChainListAddEnd</span><span class="params">(ChainList *head,DATA data)</span></span>&#123;</span><br><span class="line">    ChainList *node,*h;</span><br><span class="line">    <span class="keyword">if</span>(!(node=(ChainList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ChainList))))&#123;<span class="comment">//为节点分配空间</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"为节点数据申请内存失败!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;data=data;</span><br><span class="line">    node-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        head=node;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    h=head;</span><br><span class="line">    <span class="keyword">while</span>(h-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        h=h-&gt;next;<span class="comment">//找到尾部</span></span><br><span class="line">    &#125;</span><br><span class="line">    h-&gt;next=node;<span class="comment">//尾部插入数据</span></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加节点到头部</span></span><br><span class="line"><span class="function">ChainList *<span class="title">ChainListAddFirst</span><span class="params">(ChainList *head,DATA data)</span></span>&#123;</span><br><span class="line">    ChainList *node,*h;</span><br><span class="line">    <span class="keyword">if</span>(!(node=(ChainList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ChainList))))&#123;<span class="comment">//为节点分配空间</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"为节点数据申请内存失败!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;data=data;</span><br><span class="line">    node-&gt;next=head;</span><br><span class="line">    head=node;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找节点 按关键字key</span></span><br><span class="line"><span class="function">ChainList *<span class="title">ChainListFind</span><span class="params">(ChainList *head,<span class="keyword">char</span> *key)</span></span>&#123;<span class="comment">//注意：这里关键字key用指针 ---- 因为是数组</span></span><br><span class="line">    ChainList *h;</span><br><span class="line">    h=head;</span><br><span class="line">    <span class="keyword">while</span>(h)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(h-&gt;data.key,key)==<span class="number">0</span>)<span class="comment">//节点关键字与传入关键字对比</span></span><br><span class="line">            <span class="keyword">return</span> h;</span><br><span class="line">        h=h-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入节点</span></span><br><span class="line"><span class="function">ChainList *<span class="title">ChainListInsert</span><span class="params">(ChainList *head,<span class="keyword">char</span> *findkey,DATA data)</span></span>&#123;</span><br><span class="line">    ChainList *node ,*node1;</span><br><span class="line">    <span class="keyword">if</span>(!(node=(ChainList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ChainList))))&#123;<span class="comment">//为节点分配空间</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"为节点数据申请内存失败!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;data=data;</span><br><span class="line">    node1=ChainListFind(head,findkey);</span><br><span class="line">    <span class="keyword">if</span>(node1)&#123;<span class="comment">//插入新节点</span></span><br><span class="line">        node-&gt;next=node1-&gt;next;</span><br><span class="line">        node1-&gt;next=node;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">free</span>(node);<span class="comment">//  *******************malloc之后没有插入需要释放空间</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"没有找到插入口\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ChainListDeleteByKey</span><span class="params">(ChainList *head,<span class="keyword">char</span> *key)</span></span>&#123;</span><br><span class="line">    ChainList *node,*h;</span><br><span class="line">    node=h=head;</span><br><span class="line">    <span class="keyword">while</span>(h)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(h-&gt;data.key,key)==<span class="number">0</span>)&#123;</span><br><span class="line">            node-&gt;next=h-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(h);<span class="comment">// ****************释放节点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            node=h;<span class="comment">// *****指向当前节点</span></span><br><span class="line">            h=h-&gt;next;<span class="comment">// 指向下一节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ChainListLength</span><span class="params">(ChainList *head)</span></span>&#123;</span><br><span class="line">    ChainList *h;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    h=head;</span><br><span class="line">    <span class="keyword">while</span>(h)&#123;</span><br><span class="line">        i++;</span><br><span class="line">        h=h-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChainListAll</span><span class="params">(ChainList *head)</span></span>&#123;</span><br><span class="line">    ChainList *h;</span><br><span class="line">    DATA data;</span><br><span class="line">    h=head;</span><br><span class="line">    <span class="keyword">while</span>(h)&#123;</span><br><span class="line">        data=h-&gt;data;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"(%s,%s,%d)\n"</span>,data.key,data.name,data.age);</span><br><span class="line">        h=h-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    ChainList *node,*head=<span class="literal">NULL</span>;</span><br><span class="line">    DATA data;</span><br><span class="line">    <span class="keyword">char</span> key[<span class="number">16</span>],findkey[<span class="number">16</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入链表数据，关键字(为0时停止)、姓名、年龄:\n"</span>);</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        fflush(<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,data.key);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(data.key,<span class="string">"0"</span>)==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>,data.name,&amp;data.age);<span class="comment">// 数组本身就是地址 不用加&amp;</span></span><br><span class="line">        head=ChainListAddEnd(head,data);</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"链表有 %d 个节点:\n"</span>,ChainListLength(head));</span><br><span class="line">    ChainListAll(head);</span><br><span class="line">    fflush(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n插入节点，输入位置关键字key："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;findkey);</span><br><span class="line">    fflush(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入插入数据: 关键字 姓名 年龄 :"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s%d"</span>,data.key,data.name,&amp;data.age);</span><br><span class="line">    head=ChainListInsert(head,findkey,data);</span><br><span class="line">    ChainListAll(head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">输入链表数据，关键字(为<span class="number">0</span>时停止)、姓名、年龄:</span><br><span class="line"><span class="number">1</span> xiaoming <span class="number">32</span></span><br><span class="line"><span class="number">2</span> lixiao <span class="number">21</span></span><br><span class="line"><span class="number">3</span> xuhan <span class="number">13</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">链表有 <span class="number">3</span> 个节点:</span><br><span class="line">(<span class="number">1</span>,xiaoming,<span class="number">32</span>)</span><br><span class="line">(<span class="number">2</span>,lixiao,<span class="number">21</span>)</span><br><span class="line">(<span class="number">3</span>,xuhan,<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">插入节点，输入位置关键字key：<span class="number">1</span></span><br><span class="line">输入插入数据: 关键字 姓名 年龄 :<span class="number">4</span> shendu <span class="number">80</span></span><br><span class="line">(<span class="number">1</span>,xiaoming,<span class="number">32</span>)</span><br><span class="line">(<span class="number">4</span>,shendu,<span class="number">80</span>)</span><br><span class="line">(<span class="number">2</span>,lixiao,<span class="number">21</span>)</span><br><span class="line">(<span class="number">3</span>,xuhan,<span class="number">13</span>)</span><br></pre></td></tr></table></figure></p>
<p>B.双向链表<br>双向链表对比单项链表多了一个指向前边的指针；<br>可以定义如下：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct <span class="keyword">Node</span><span class="identifier"></span><span class="title">&#123;</span><br><span class="line">	struct</span> <span class="keyword">Node</span><span class="identifier"> </span><span class="title">*before</span>;</span><br><span class="line">    DATA data;</span><br><span class="line">    struct <span class="keyword">Node</span><span class="identifier"> </span><span class="title">*after</span>;</span><br><span class="line">&#125;ChainList;</span><br></pre></td></tr></table></figure></p>
<p>原理与单向一样。</p>
<p>C.循环链表<br>循环链表就是单项链表的尾部又指向头部，形成一个循环。</p>
<h2 id="3-_u961F_u5217"><a href="#3-_u961F_u5217" class="headerlink" title="3.队列"></a>3.队列</h2><p>先进先出。<br>只能前端删除，后端添加。插入端为队尾，删除端为队头。<br>分顺序队列和循环队列。<br>顺序队列：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> QUEUEMAX <span class="number">15</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">16</span>];</span><br><span class="line">&#125;DATA;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    DATA data[QUEUEMAX];<span class="comment">//队列数组</span></span><br><span class="line">    <span class="keyword">int</span> head;<span class="comment">//队头</span></span><br><span class="line">    <span class="keyword">int</span> tail;<span class="comment">//队尾</span></span><br><span class="line">&#125;SeqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化队列</span></span><br><span class="line"><span class="function">SeqQueue *<span class="title">SeqQueueInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SeqQueue *q;</span><br><span class="line">    <span class="keyword">if</span>(q=(SeqQueue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqQueue)))&#123;<span class="comment">//申请保存队列的内存</span></span><br><span class="line">        q-&gt;head=<span class="number">0</span>;<span class="comment">//设置队头</span></span><br><span class="line">        q-&gt;tail=<span class="number">0</span>;<span class="comment">//设置队尾</span></span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqQueueFree</span><span class="params">(SeqQueue *q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q!=<span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">free</span>(q);<span class="comment">// 释放队列   malloc申请的内存都应该释放</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取状态 空?满?长度?</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqQueueIsEmpty</span><span class="params">(SeqQueue *q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (q-&gt;head==q-&gt;tail);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqQueueIsFull</span><span class="params">(SeqQueue *q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (q-&gt;tail==QUEUEMAX);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqQueueLength</span><span class="params">(SeqQueue *q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (q-&gt;tail-q-&gt;head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqQueueIn</span><span class="params">(SeqQueue *q,DATA data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;tail==QUEUEMAX)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列满\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        q-&gt;data[q-&gt;tail++]=data;<span class="comment">//加入队列 修改对尾序号</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function">DATA *<span class="title">SeqQueueOut</span><span class="params">(SeqQueue *q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;head==q-&gt;tail)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n队列空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;(q-&gt;data[q-&gt;head++]);<span class="comment">//返回指向队列头的元素指针 修改队头序号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqQueueAll</span><span class="params">(SeqQueue *q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(SeqQueueIsEmpty(q))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列为空\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    DATA data;</span><br><span class="line">    SeqQueue *h=q;</span><br><span class="line">    <span class="keyword">while</span>(h-&gt;tail-h-&gt;head)&#123;</span><br><span class="line">        data=h-&gt;data[h-&gt;head];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"(%d,%s)\n"</span>,data.key,data.name);</span><br><span class="line">        h-&gt;head++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    SeqQueue *head=SeqQueueInit();</span><br><span class="line">    DATA data;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"输入队列元素(key(int),name(char[16])),key=0时退出:"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;data.key);</span><br><span class="line">        <span class="keyword">if</span>(data.key==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,data.name);</span><br><span class="line">        SeqQueueIn(head,data);</span><br><span class="line">    &#125;</span><br><span class="line">    SeqQueueAll(head);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">输入队列元素(key(<span class="keyword">int</span>),name(<span class="keyword">char</span>[<span class="number">16</span>])),key=<span class="number">0</span>时退出:<span class="number">1</span> limin</span><br><span class="line">输入队列元素(key(<span class="keyword">int</span>),name(<span class="keyword">char</span>[<span class="number">16</span>])),key=<span class="number">0</span>时退出:<span class="number">2</span> wanghua</span><br><span class="line">输入队列元素(key(<span class="keyword">int</span>),name(<span class="keyword">char</span>[<span class="number">16</span>])),key=<span class="number">0</span>时退出:<span class="number">3</span> xiaoming</span><br><span class="line">输入队列元素(key(<span class="keyword">int</span>),name(<span class="keyword">char</span>[<span class="number">16</span>])),key=<span class="number">0</span>时退出:<span class="number">0</span></span><br><span class="line">(<span class="number">1</span>,limin)</span><br><span class="line">(<span class="number">2</span>,wanghua)</span><br><span class="line">(<span class="number">3</span>,xiaoming)</span><br></pre></td></tr></table></figure></p>
<p>循环队列:<br>将队列的首尾相连构成一个环形区域，当第n个位置元素入队后，下一个地址就变为1，如此循环，称之为循环队列。<br>当tail=n+1时，tail=1;<br>head=tail则队列满。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> QUEUEMAX <span class="number">15</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;<span class="comment">//编号</span></span><br><span class="line">    <span class="keyword">long</span> time;<span class="comment">//加入队列时间</span></span><br><span class="line">&#125;DATA;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    DATA data[QUEUEMAX];</span><br><span class="line">    <span class="keyword">int</span> head;</span><br><span class="line">    <span class="keyword">int</span> tail;</span><br><span class="line">&#125;CycQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">CycQueue *<span class="title">CycQueueInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    CycQueue *q;</span><br><span class="line">    <span class="keyword">if</span>(q=(CycQueue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CycQueue)))&#123;<span class="comment">//申请保存队列的内存</span></span><br><span class="line">        q-&gt;head=<span class="number">0</span>;</span><br><span class="line">        q-&gt;tail=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CycQueueFree</span><span class="params">(CycQueue *q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CycQueueIsEmpty</span><span class="params">(CycQueue *q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (q-&gt;head==q-&gt;tail);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CycQueueIsFull</span><span class="params">(CycQueue *q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((q-&gt;tail+<span class="number">1</span>)%QUEUEMAX==q-&gt;head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CycQueueIn</span><span class="params">(CycQueue *q,DATA data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((q-&gt;tail+<span class="number">1</span>)%QUEUEMAX==q-&gt;head)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列满!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        q-&gt;tail=(q-&gt;tail+<span class="number">1</span>)%QUEUEMAX;</span><br><span class="line">        q-&gt;data[q-&gt;tail]=data;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DATA *<span class="title">CycQueueOut</span><span class="params">(CycQueue *q)</span></span>&#123;<span class="comment">//循环出队</span></span><br><span class="line">    <span class="keyword">if</span>(q-&gt;head==q-&gt;tail)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        q-&gt;head=(q-&gt;head+<span class="number">1</span>)%QUEUEMAX;</span><br><span class="line">        <span class="keyword">return</span> &amp;(q-&gt;data[q-&gt;head]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CycQueueLen</span><span class="params">(CycQueue *q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    n=q-&gt;tail-q-&gt;head;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        n=QUEUEMAX+n;<span class="comment">//循环队列</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DATA *<span class="title">CycQueuePeek</span><span class="params">(CycQueue *q)</span></span>&#123;<span class="comment">//获取队列中的第一个位置的数据</span></span><br><span class="line">    <span class="keyword">if</span>(q-&gt;head==q-&gt;tail)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列为空!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;(q-&gt;data[(q-&gt;head+<span class="number">1</span>)%QUEUEMAX]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;<span class="comment">//顾客序号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(CycQueue *q)</span></span>&#123;</span><br><span class="line">    DATA data;</span><br><span class="line">    <span class="keyword">if</span>(!CycQueueIsFull(q))&#123;</span><br><span class="line">        data.num=++num;</span><br><span class="line">        data.time=time(<span class="literal">NULL</span>);<span class="comment">//保存顾客排号时间</span></span><br><span class="line">        CycQueueIn(q,data);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n排队的人太多，请稍后再排!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">(CycQueue *q)</span></span>&#123;</span><br><span class="line">    DATA *data;</span><br><span class="line">    <span class="keyword">if</span>(!CycQueueIsEmpty(q))&#123;</span><br><span class="line">        data=CycQueueOut(q);<span class="comment">//取队列头部数据</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n请编号为%d的顾客办理业务!\n"</span>,data-&gt;num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!CycQueueIsEmpty(q))&#123;</span><br><span class="line">        data=CycQueuePeek(q);<span class="comment">//取队列中指定位置的数据</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请编号为%d的顾客准备，马上将为你办理业务!\n"</span>,data-&gt;num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    CycQueue *q;</span><br><span class="line">    <span class="keyword">int</span> i,n;</span><br><span class="line">    <span class="keyword">char</span> select;</span><br><span class="line">    num=<span class="number">0</span>;</span><br><span class="line">    q=CycQueueInit();</span><br><span class="line">    <span class="keyword">if</span>(q==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"创建队列时错误!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n请输入:1.新到顾客 2.下一个顾客 0.退出"</span>);</span><br><span class="line">        fflush(<span class="built_in">stdin</span>);</span><br><span class="line">        select=getch();</span><br><span class="line">        <span class="keyword">switch</span> (select) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">            add(q);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n现在共有%d位顾客在等候!\n"</span>,CycQueueLen(q));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">            next(q);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n现在共有%d位顾客在等候!\n"</span>,CycQueueLen(q));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(select!=<span class="string">'0'</span>);</span><br><span class="line">    CycQueueFree(q);<span class="comment">//释放队列</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">请输入:<span class="number">1.</span>新到顾客 <span class="number">2.</span>下一个顾客 <span class="number">0.</span>退出</span><br><span class="line">现在共有<span class="number">1</span>位顾客在等候!</span><br><span class="line"></span><br><span class="line">请输入:<span class="number">1.</span>新到顾客 <span class="number">2.</span>下一个顾客 <span class="number">0.</span>退出</span><br><span class="line">现在共有<span class="number">2</span>位顾客在等候!</span><br><span class="line"></span><br><span class="line">请输入:<span class="number">1.</span>新到顾客 <span class="number">2.</span>下一个顾客 <span class="number">0.</span>退出</span><br><span class="line">请编号为<span class="number">1</span>的顾客办理业务!</span><br><span class="line">请编号为<span class="number">2</span>的顾客准备，马上将为你办理业务!</span><br><span class="line"></span><br><span class="line">现在共有<span class="number">1</span>位顾客在等候!</span><br></pre></td></tr></table></figure></p>
<h2 id="4-_u6808"><a href="#4-_u6808" class="headerlink" title="4.栈"></a>4.栈</h2><p>后进先出；<br>顺序栈：使用一连续内存地址保存栈中数据；<br>链式栈：使用链表形式保存栈中各元素的值。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SIZE <span class="number">16</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">15</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;DATA;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="built_in">stack</span>&#123;</span><br><span class="line">    DATA data[SIZE+<span class="number">1</span>];<span class="comment">//数据元素</span></span><br><span class="line">    <span class="keyword">int</span> top;</span><br><span class="line">&#125;SeqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化栈</span></span><br><span class="line"><span class="function">SeqStack *<span class="title">SeqStackInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SeqStack *p;</span><br><span class="line">    <span class="keyword">if</span>(p=(SeqStack *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqStack)))&#123;</span><br><span class="line">        p-&gt;top=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqStackFree</span><span class="params">(SeqStack *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s)&#123;</span><br><span class="line">        <span class="built_in">free</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqStackIsEmpty</span><span class="params">(SeqStack *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (s-&gt;top==<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeqStackClear</span><span class="params">(SeqStack *s)</span></span>&#123;</span><br><span class="line">    s-&gt;top=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否满</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqStackIsFull</span><span class="params">(SeqStack *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (s-&gt;top==SIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqStackPush</span><span class="params">(SeqStack *s,DATA data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((s-&gt;top+<span class="number">1</span>)&gt;SIZE)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"栈溢出!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;data[++s-&gt;top]=data;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function">DATA <span class="title">SeqStackPop</span><span class="params">(SeqStack *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"栈为空"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (s-&gt;data[s-&gt;top--]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取栈顶元素</span></span><br><span class="line"><span class="function">DATA <span class="title">SeqStackPeek</span><span class="params">(SeqStack *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"栈为空!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (s-&gt;data[s-&gt;top]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    SeqStack *<span class="built_in">stack</span>;</span><br><span class="line">    DATA data,data1;</span><br><span class="line">    <span class="built_in">stack</span>=SeqStackInit();</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1.入栈 2.出栈 3.退出:"</span>);</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;i);</span><br><span class="line">        <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"输入姓名 年龄入栈:"</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>,data.name,&amp;data.age);</span><br><span class="line">            <span class="keyword">if</span>(data.name==<span class="string">"0"</span>||data.age==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            SeqStackPush(<span class="built_in">stack</span>,data);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            data1=SeqStackPop(<span class="built_in">stack</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"出栈数据是(%s,%d)\n"</span>,data1.name,data1.age);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            SeqStackFree(<span class="built_in">stack</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line"><span class="number">1.</span>入栈 <span class="number">2.</span>出栈 <span class="number">3.</span>退出:<span class="number">1</span></span><br><span class="line">输入姓名 年龄入栈:小明 <span class="number">23</span></span><br><span class="line"><span class="number">1.</span>入栈 <span class="number">2.</span>出栈 <span class="number">3.</span>退出:<span class="number">1</span></span><br><span class="line">输入姓名 年龄入栈:李华 <span class="number">21</span></span><br><span class="line"><span class="number">1.</span>入栈 <span class="number">2.</span>出栈 <span class="number">3.</span>退出:<span class="number">2</span></span><br><span class="line">出栈数据是(李华,<span class="number">21</span>)</span><br><span class="line"><span class="number">1.</span>入栈 <span class="number">2.</span>出栈 <span class="number">3.</span>退出:<span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<h2 id="5-_u6811"><a href="#5-_u6811" class="headerlink" title="5.树"></a>5.树</h2><p>树是n个节点的集合，集合中有一个称为根的特殊节点，根节点下分布着一些互不相交的集合，每一个集合又是一个树，这些树称为根节点的子树。<br>空集合也是树，称为空树，空树中没有节点；<br>单个节点是一棵树，树根就是节点本身；<br>有多个节点时，每个节点都可以看做根节点(整个树或者某个树的根节点)；<br>在一棵树中，有且仅有根节点没有前驱，其余每个节点有且只有一个前驱，每个节点有任意多个后继（连接当前节点的接着的后面节点）；<br>节点的度：一个节点的子树（下面的后继）的数量称为该节点的度；<br>树的度：一棵树的度是指该树中节点的最大度数；<br>叶节点：树中度为0的节点；<br>分支节点：树中度不为0的节点；<br>根节点为第一层，后面依次第二层、第三层、…<br>树的深度:一棵树的最大层数；<br>有序树：树中节点的子树（兄弟节点）是按一定的次序从左到右安排的，称为有序树；否则称为无序树。<br>森林：m(m&gt;=0)棵互不相交的树的集合。</p>
<p>二叉树：<br>任意树可以方便地转化为对应的二叉树，二叉树对许多算法应用简单。<br>二叉树任意节点最多只能有两个子节点，如果只有一个子节点，可以是左子树，也可以是右子树；<br>空树或者单个节点也是二叉树。</p>
<p>二叉树与树区别：<br>树中节点最大度数没有限制，而二叉树节点最大度数为2；<br>树的节点无左右之分，而二叉树的节点有左右之分。</p>
<p>满二叉树：除了最下面一层叶节点，每层的节点都有两个子节点；<br>完全二叉树：除了最后一层外，其他各层节点数都达到最大个数，最后一层从左到右叶节点连续存在，只缺右边若干个节点。<br>满二叉树一定是完全二叉树，完全二叉树不一定是满二叉树。</p>
<p>二叉树性质:<br>(1) 第i层节点的总数最多为2^(i-1)个；<br>(2) 深度为k的二叉树最多有2^k-1个；最少有k个节点；<br>(3) 叶节点数n余度为2的节点总数m,有n=m+1;<br>(4) 有n个节点的完全二叉树的深度k=[log2n]+1;([log2n]—以2为底n的对数再取整)<br>(5) 有n个节点的完全二叉树各节点如果顺序存储，对任意节点i有：<br>   如果i!=1,则其父节点的编号为i/2;<br>   如果2<em>i&lt;=n,则其左子树根节点的编号为2</em>i,若2<em>i&gt;n,则无左子树；<br>   如果2</em>i+1&lt;=n，则其右子树根节点编号为2<em>i+1;若2</em>i+1&gt;n,则无右子树；</p>
<p>二叉树按存储结构分为顺序存储与链式存储结构<br>顺序存储结构：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typedef DATA SeqB<span class="keyword">in</span>Tree[MAXSIZE];</span><br><span class="line">SeqB<span class="keyword">in</span>Tree SBT;//定义保存二叉树数组的变量</span><br></pre></td></tr></table></figure></p>
<p>对一个完全二叉树，用顺序结构，各节点之间有对应关系，对于节点i,其父节点为i/2(若商不整数，则进行取整)，而其左子节点的编号为2<em>i,右子节点的编号为2</em>i+1。<br>对于不是完全二叉树的的树转化为完全二叉树，将缺少的节点虚设为无数据的节点（这里以”#”表示），如图：<br><img src="/img/suanfa/2.jpg" alt="image"><br>之后每个节点的序号与数组有了对应关系</p>
<table>
<thead>
<tr>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
<th>12</th>
<th>13</th>
<th>14</th>
<th>15</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>B</td>
<td>C</td>
<td>#</td>
<td>D</td>
<td>#</td>
<td>E</td>
<td>#</td>
<td>#</td>
<td>F</td>
<td>#</td>
<td>#</td>
<td>#</td>
<td>G</td>
<td>H</td>
</tr>
</tbody>
</table>
<p>保存A~H共7个节点共占用15个节点的存储空间，空间造成了浪费。<br>顺序存储浪费空间，所以常用链式存储。</p>
<p>链式存储结构<br>二叉链表结构：一个节点由节点元素和两个分别指向左、右子树的指针组成的节点结构；<br>三叉链表结构：在二叉链表结构基础上增加父节点的指针。<br>二叉链式结构<br>—————————————————————<br>| LSon | Data | RSon |<br>—————————————————————<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef <span class="class"><span class="keyword">struct</span> <span class="title">ChainTree</span>&#123;</span></span><br><span class="line">	<span class="constant">DATA</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ChainTree</span> *<span class="title">left</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ChainTree</span> *<span class="title">right</span>;</span></span><br><span class="line">&#125;<span class="constant">ChainTreeType</span>;</span><br><span class="line"><span class="constant">ChainTreeType</span> *root=<span class="constant">NULL</span>;<span class="regexp">//</span>定义二叉树根节点指针</span><br></pre></td></tr></table></figure></p>
<p>三叉链式结构<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef <span class="class"><span class="keyword">struct</span> <span class="title">ChainTree</span>&#123;</span></span><br><span class="line">	<span class="constant">DATA</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ChainTree</span> *<span class="title">left</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ChainTree</span> *<span class="title">right</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ChainTree</span> *<span class="title">parent</span>;</span>/<span class="regexp">/父节点指针</span><br><span class="line">&#125;ChainTreeType;</span><br><span class="line">ChainTreeType *root=NULL;/</span><span class="regexp">/定义二叉树根节点指针</span></span><br></pre></td></tr></table></figure></p>
<p>——————————————————————————————<br>| LSon | Data | RSon | Parent |<br>——————————————————————————————</p>
<p>操作二叉树：<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#define QUEUE_MAXSIZE 50</span></span><br><span class="line">typedef <span class="keyword">char</span> DATA;<span class="comment">//元素类型</span></span><br><span class="line">typedef struct ChainTree&#123;<span class="comment">//二叉树节点类型</span></span><br><span class="line">    DATA data;</span><br><span class="line">    struct ChainTree *left;</span><br><span class="line">    struct ChainTree *right;</span><br><span class="line">&#125;ChainBinTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化二叉树</span></span><br><span class="line">ChainBinTree *BinTreeInit(ChainBinTree *node)&#123;</span><br><span class="line">    <span class="keyword">if</span>(node!=<span class="keyword">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加节点</span></span><br><span class="line"><span class="comment">//bt--父节点 node--子节点 n=1添加左子树 n=2添加右子树</span></span><br><span class="line"><span class="keyword">int</span> BinTreeAddNode(ChainBinTree *bt,ChainBinTree *node,<span class="keyword">int</span> n)&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt==<span class="keyword">NULL</span>)&#123;</span><br><span class="line">        printf(<span class="string">"父节点不存在,请先设置父节点！\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span>(n)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span>(bt-&gt;left)&#123;</span><br><span class="line">            printf(<span class="string">"左子树节点不为空!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            bt-&gt;left=node;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span>(bt-&gt;right)&#123;</span><br><span class="line">            printf(<span class="string">"右树节点不为空!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            bt-&gt;right=node;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        printf(<span class="string">"参数错误!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回二叉树的左右子树节点</span></span><br><span class="line">ChainBinTree *BinTreeLeft(ChainBinTree *bt)&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt)</span><br><span class="line">        <span class="keyword">return</span> bt-&gt;left;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">ChainBinTree *BinTreeRight(ChainBinTree *bt)&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt)</span><br><span class="line">        <span class="keyword">return</span> bt-&gt;right;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取二叉树状态</span></span><br><span class="line"><span class="keyword">int</span> BinTreeIsEmpty(ChainBinTree *bt)&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> BinTreeDepth(ChainBinTree *bt)&#123;</span><br><span class="line">    <span class="keyword">int</span> dep1,dep2;</span><br><span class="line">    <span class="keyword">if</span>(bt==<span class="keyword">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        dep1=BinTreeDepth(bt-&gt;left);</span><br><span class="line">        dep2=BinTreeDepth(bt-&gt;right);</span><br><span class="line">        <span class="keyword">if</span>(dep1&gt;dep2)</span><br><span class="line">            <span class="keyword">return</span> dep1+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> dep2+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line">ChainBinTree *BinTreeFind(ChainBinTree *bt,DATA data)&#123;</span><br><span class="line">    ChainBinTree *p;</span><br><span class="line">    <span class="keyword">if</span>(bt==<span class="keyword">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(bt-&gt;data==data)</span><br><span class="line">            <span class="keyword">return</span> bt;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(p=BinTreeFind(bt-&gt;left,data))</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(p=BinTreeFind(bt-&gt;right,data))</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空二叉树</span></span><br><span class="line">void BinTreeClear(ChainBinTree *bt)&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt)&#123;</span><br><span class="line">        BinTreeClear(bt-&gt;left);</span><br><span class="line">        BinTreeClear(bt-&gt;right);</span><br><span class="line">        free(bt);</span><br><span class="line">        bt=<span class="keyword">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//***********************遍历************</span></span><br><span class="line"><span class="comment">//先序遍历   oper--函数指针</span></span><br><span class="line">void BinTree_BLR(ChainBinTree *bt,void (*oper)(ChainBinTree *p))&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt)&#123;</span><br><span class="line">        oper(bt);</span><br><span class="line">        BinTree_BLR(bt-&gt;left,oper);</span><br><span class="line">        BinTree_BLR(bt-&gt;right,oper);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line">void BinTree_LDR(ChainBinTree *bt,void(*oper)(ChainBinTree *p))&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt)&#123;</span><br><span class="line">        BinTree_LDR(bt-&gt;left,oper);</span><br><span class="line">        oper(bt);</span><br><span class="line">        BinTree_LDR(bt-&gt;right,oper);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line">void BinTree_LRD(ChainBinTree *bt,void(*oper)(ChainBinTree *p))&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt)&#123;</span><br><span class="line">        BinTree_LRD(bt-&gt;left,oper);</span><br><span class="line">        BinTree_LRD(bt-&gt;right,oper);</span><br><span class="line">        oper(bt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按层遍历</span></span><br><span class="line">void Bintree_level(ChainBinTree *bt,void(*oper)(ChainBinTree *p))&#123;</span><br><span class="line">    ChainBinTree *p;</span><br><span class="line">    ChainBinTree *q[QUEUE_MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> head=<span class="number">0</span>,tail=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(bt)&#123;</span><br><span class="line">        tail=(tail+<span class="number">1</span>)%QUEUE_MAXSIZE;<span class="comment">//计算循环队列的队尾序号</span></span><br><span class="line">        q[tail]=bt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(head!=tail)&#123;</span><br><span class="line">        head=(head+<span class="number">1</span>)%QUEUE_MAXSIZE;<span class="comment">//计算循环队列队首序号</span></span><br><span class="line">        p=q[head];</span><br><span class="line">        oper(p);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;left!=<span class="keyword">NULL</span>)&#123;<span class="comment">//节点为左子树，则左子树指针进队</span></span><br><span class="line">            tail=(tail+<span class="number">1</span>)%QUEUE_MAXSIZE;</span><br><span class="line">            q[tail]=p-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;right!=<span class="keyword">NULL</span>)&#123;</span><br><span class="line">            tail=(tail+<span class="number">1</span>)%QUEUE_MAXSIZE;</span><br><span class="line">            q[tail]=p-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void oper(ChainBinTree *p)&#123;</span><br><span class="line">    printf(<span class="string">"%c "</span>,p-&gt;data);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建二叉树根节点</span></span><br><span class="line">ChainBinTree *InitRoot()&#123;</span><br><span class="line">    ChainBinTree *node;</span><br><span class="line">    <span class="keyword">if</span>(node=(ChainBinTree *)malloc(sizeof(ChainBinTree)))&#123;</span><br><span class="line">        printf(<span class="string">"\n输入根节点数据："</span>);</span><br><span class="line">        scanf(<span class="string">"%s"</span>,&amp;node-&gt;data);</span><br><span class="line">        node-&gt;left=<span class="keyword">NULL</span>;</span><br><span class="line">        node-&gt;right=<span class="keyword">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向二叉树添加子节点</span></span><br><span class="line">void ADDNode(ChainBinTree *bt)&#123;</span><br><span class="line">    ChainBinTree *node,*<span class="keyword">parent</span>;</span><br><span class="line">    DATA data;</span><br><span class="line">    <span class="keyword">char</span> select;</span><br><span class="line">    <span class="keyword">if</span>(node=(ChainBinTree *)malloc(sizeof(ChainBinTree)))&#123;</span><br><span class="line">        printf(<span class="string">"\n输入二叉树节点数据:"</span>);</span><br><span class="line">        fflush(stdin);</span><br><span class="line">        scanf(<span class="string">"%s"</span>,&amp;node-&gt;data);</span><br><span class="line">        node-&gt;left=<span class="keyword">NULL</span>;</span><br><span class="line">        node-&gt;right=<span class="keyword">NULL</span>;</span><br><span class="line">        printf(<span class="string">"输入父节点数据："</span>);</span><br><span class="line">        fflush(stdin);</span><br><span class="line">        scanf(<span class="string">"%s"</span>,&amp;data);</span><br><span class="line">        <span class="keyword">parent</span>=BinTreeFind(bt,data);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">parent</span>)&#123;</span><br><span class="line">            printf(<span class="string">"没有找到父节点!\n"</span>);</span><br><span class="line">            free(node);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">"1.添加到左子树\n2.添加到右子树\n"</span>);</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            select=getch();</span><br><span class="line">            select-=<span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span>(select==<span class="number">1</span>||select==<span class="number">2</span>)</span><br><span class="line">                BinTreeAddNode(<span class="keyword">parent</span>,node,select);</span><br><span class="line">        &#125;<span class="keyword">while</span>(select!=<span class="number">1</span>&amp;&amp;select!=<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(void)</span><br><span class="line">&#123;</span><br><span class="line">    ChainBinTree *root=<span class="keyword">NULL</span>;</span><br><span class="line">    <span class="keyword">char</span> select;</span><br><span class="line">    void (*oper1)();<span class="comment">//指向函数的指针</span></span><br><span class="line">    oper1=oper;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        printf(<span class="string">"\n1.设置二叉树根元素 2.添加二叉树节点 3.先序遍历 4.中序遍历 5.后序遍历 6.按层遍历 7.二叉树深度 0.退出\n"</span>);</span><br><span class="line">        select=getch();</span><br><span class="line">        <span class="keyword">switch</span> (select) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">            root=InitRoot();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">            ADDNode(root);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line">            printf(<span class="string">"先序遍历结果:\n"</span>);</span><br><span class="line">            BinTree_BLR(root,oper1);</span><br><span class="line">            printf(<span class="string">"\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'4'</span>:</span><br><span class="line">            printf(<span class="string">"中序遍历结果：\n"</span>);</span><br><span class="line">            BinTree_LDR(root,oper1);</span><br><span class="line">            printf(<span class="string">"\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'5'</span>:</span><br><span class="line">            printf(<span class="string">"后序遍历结果:\n"</span>);</span><br><span class="line">            BinTree_LRD(root,oper1);</span><br><span class="line">            printf(<span class="string">"\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'6'</span>:</span><br><span class="line">            printf(<span class="string">"按层遍历结果：\n"</span>);</span><br><span class="line">            Bintree_level(root,oper1);</span><br><span class="line">            printf(<span class="string">"\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'7'</span>:</span><br><span class="line">            printf(<span class="string">"二叉树深度:%d\n"</span>,BinTreeDepth(root));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(select!=<span class="number">0</span>);</span><br><span class="line">    BinTreeClear(root);</span><br><span class="line">    root=<span class="keyword">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line"><span class="number">1.</span>设置二叉树根元素 <span class="number">2.</span>添加二叉树节点 <span class="number">3.</span>先序遍历 <span class="number">4.</span>中序遍历 <span class="number">5.</span>后序遍历 <span class="number">6.</span>按层遍历 <span class="number">7.</span>二叉树深度 <span class="number">0.</span>退出</span><br><span class="line">先序遍历结果:</span><br><span class="line">A B D E C F G</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>设置二叉树根元素 <span class="number">2.</span>添加二叉树节点 <span class="number">3.</span>先序遍历 <span class="number">4.</span>中序遍历 <span class="number">5.</span>后序遍历 <span class="number">6.</span>按层遍历 <span class="number">7.</span>二叉树深度 <span class="number">0.</span>退出</span><br><span class="line">中序遍历结果：</span><br><span class="line">D B E A F C G</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>设置二叉树根元素 <span class="number">2.</span>添加二叉树节点 <span class="number">3.</span>先序遍历 <span class="number">4.</span>中序遍历 <span class="number">5.</span>后序遍历 <span class="number">6.</span>按层遍历 <span class="number">7.</span>二叉树深度 <span class="number">0.</span>退出</span><br><span class="line">后序遍历结果:</span><br><span class="line">D E B F G C A</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>设置二叉树根元素 <span class="number">2.</span>添加二叉树节点 <span class="number">3.</span>先序遍历 <span class="number">4.</span>中序遍历 <span class="number">5.</span>后序遍历 <span class="number">6.</span>按层遍历 <span class="number">7.</span>二叉树深度 <span class="number">0.</span>退出</span><br><span class="line">按层遍历结果：</span><br><span class="line">A B C D E F G</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>设置二叉树根元素 <span class="number">2.</span>添加二叉树节点 <span class="number">3.</span>先序遍历 <span class="number">4.</span>中序遍历 <span class="number">5.</span>后序遍历 <span class="number">6.</span>按层遍历 <span class="number">7.</span>二叉树深度 <span class="number">0.</span>退出</span><br><span class="line">二叉树深度:<span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<p>线索二叉树：<br>二叉树遍历结果可以看成一个线性表（节点序列），除了第1个节点外，每个节点有且仅有一个前驱，除最后一个节点，每个节点有且仅有一个后继。<br>二叉树链表保存二叉树只能找到节点的左右子树，不能直接得到节点的前驱和后继（只有遍历才行）<br>为了将二叉树在遍历过程中的前驱后继谢谢保存起来，将每个节点为空的左右指针分别用于指向节点的前驱和后继得到线索二叉树<br>左线索：左指针域中存放的指向前驱节点的指针<br>右线索：右这边域中存放的指向后继节点的指针<br>按遍历顺序不同保存的线索二叉树分先序，中序，后序。<br><img src="/img/suanfa/3.jpg" alt="image"><br>上图中序遍历为BFDACGEH<br>为了区别每个节点左右指针域存放的是子树的指针还是线索，必须在节点结构中添加两个标志域：一个左线索域lflag另外一个右线索域rflag,这个标志为1则表示指针域为线索，否则为子树指针。<br><img src="/img/suanfa/4.jpg" alt="image"><br>操作线索二叉树<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#define QUEUE_MAXSIZE 50</span></span><br><span class="line">typedef <span class="keyword">char</span> DATA;       <span class="comment">//定义元素类型</span></span><br><span class="line">typedef enum</span><br><span class="line">&#123;</span><br><span class="line">    SubTree,</span><br><span class="line">    Thread</span><br><span class="line">&#125;NodeFlag;  <span class="comment">//枚举值SubTree(子树)和Thread(线索)分别为0，1</span></span><br><span class="line">typedef struct ThreadTree  <span class="comment">//定义线索二叉树结点类型</span></span><br><span class="line">&#123;</span><br><span class="line">    DATA data;	<span class="comment">//元素数据</span></span><br><span class="line">    NodeFlag lflag; <span class="comment">//左标志</span></span><br><span class="line">    NodeFlag rflag; <span class="comment">//右标志</span></span><br><span class="line">    struct ThreadTree *left;	<span class="comment">//左子树结点指针</span></span><br><span class="line">    struct ThreadTree *right;	<span class="comment">//右子树结点指针</span></span><br><span class="line">&#125;ThreadBinTree;</span><br><span class="line"></span><br><span class="line">ThreadBinTree *Previous=<span class="keyword">NULL</span>;     <span class="comment">//前驱结点指针</span></span><br><span class="line"></span><br><span class="line">ThreadBinTree *BinTreeInit(ThreadBinTree *node) <span class="comment">//初始化二叉树根结点</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">if</span>(node!=<span class="keyword">NULL</span>) <span class="comment">//若二叉树根结点不为空</span></span><br><span class="line">         <span class="keyword">return</span> node;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> BinTreeAddNode(ThreadBinTree *bt,ThreadBinTree *node,<span class="keyword">int</span> n) <span class="comment">//添加数据到二叉树</span></span><br><span class="line"><span class="comment">//bt为父结点，node为子结点,n=1表示添加左子树，n=2表示添加右子树</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt==<span class="keyword">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">"父结点不存在，请先设置父结点!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">//添加到左结点</span></span><br><span class="line">            <span class="keyword">if</span>(bt-&gt;left) <span class="comment">//左子树不为空</span></span><br><span class="line">            &#123;</span><br><span class="line">                printf(<span class="string">"左子树结点不为空!\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                bt-&gt;left=node;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//添加到右结点</span></span><br><span class="line">            <span class="keyword">if</span>( bt-&gt;right) <span class="comment">//右子树不为空</span></span><br><span class="line">            &#123;</span><br><span class="line">                printf(<span class="string">"右子树结点不为空!\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                bt-&gt;right=node;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            printf(<span class="string">"参数错误!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ThreadBinTree *BinTreeLeft(ThreadBinTree *bt) <span class="comment">//返回左子结点</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt)</span><br><span class="line">        <span class="keyword">return</span> bt-&gt;left;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">ThreadBinTree *BinTreeRight(ThreadBinTree *bt) <span class="comment">//返回右子结点</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt)</span><br><span class="line">        <span class="keyword">return</span> bt-&gt;right;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> BinTreeIsEmpty(ThreadBinTree *bt) <span class="comment">//检查二叉树是否为空，为空则返回1,否则返回0</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> BinTreeDepth(ThreadBinTree *bt) <span class="comment">//求二叉树深度</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> dep1,dep2;</span><br><span class="line">    <span class="keyword">if</span>(bt==<span class="keyword">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//对于空树，深度为0</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        dep1 = BinTreeDepth(bt-&gt;left); <span class="comment">//左子树深度 (递归调用)</span></span><br><span class="line">        dep2 = BinTreeDepth(bt-&gt;right); <span class="comment">//右子树深度 (递归调用)</span></span><br><span class="line">        <span class="keyword">if</span>(dep1&gt;dep2)</span><br><span class="line">           <span class="keyword">return</span> dep1 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> dep2 + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ThreadBinTree *BinTreeFind(ThreadBinTree *bt,DATA data) <span class="comment">//在二叉树中查找值为data的结点</span></span><br><span class="line">&#123;</span><br><span class="line">    ThreadBinTree *p;</span><br><span class="line">    <span class="keyword">if</span>(bt==<span class="keyword">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(bt-&gt;data==data)</span><br><span class="line">            <span class="keyword">return</span> bt;</span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">// 分别向左右子树递归查找</span></span><br><span class="line">            <span class="keyword">if</span>(p=BinTreeFind(bt-&gt;left,data))</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(p=BinTreeFind(bt-&gt;right, data))</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void BinTreeClear(ThreadBinTree *bt) <span class="comment">// 清空二叉树，使之变为一棵空树</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">if</span>(bt)</span><br><span class="line">     &#123;</span><br><span class="line">         BinTreeClear(bt-&gt;left); <span class="comment">//清空左子树</span></span><br><span class="line">         BinTreeClear(bt-&gt;right);<span class="comment">//清空右子树</span></span><br><span class="line">         free(bt);<span class="comment">//释放当前结点所占内存</span></span><br><span class="line">         bt=<span class="keyword">NULL</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">void BinTree_DLR(ThreadBinTree *bt,void (*oper)(ThreadBinTree *p))  <span class="comment">//先序遍历</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">if</span>(bt)<span class="comment">//树不为空，则执行如下操作</span></span><br><span class="line">     &#123;</span><br><span class="line">         oper(bt); <span class="comment">//处理结点的数据</span></span><br><span class="line">         BinTree_DLR(bt-&gt;left,oper);</span><br><span class="line">         BinTree_DLR(bt-&gt;right,oper);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">void BinTree_LDR(ThreadBinTree *bt,void(*oper)(ThreadBinTree *p))  <span class="comment">//中序遍历</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">if</span>(bt)<span class="comment">//树不为空，则执行如下操作</span></span><br><span class="line">     &#123;</span><br><span class="line">         BinTree_LDR(bt-&gt;left,oper); <span class="comment">//中序遍历左子树</span></span><br><span class="line">         oper(bt);<span class="comment">//处理结点数据</span></span><br><span class="line">         BinTree_LDR(bt-&gt;right,oper); <span class="comment">//中序遍历右子树/</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">void BinTree_LRD(ThreadBinTree *bt,void (*oper)(ThreadBinTree *p)) <span class="comment">//后序遍历</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">if</span>(bt)</span><br><span class="line">     &#123;</span><br><span class="line">         BinTree_LRD(bt-&gt;left,oper); <span class="comment">//后序遍历左子树</span></span><br><span class="line">         BinTree_LRD(bt-&gt;right,oper); <span class="comment">//后序遍历右子树/</span></span><br><span class="line">         oper(bt); <span class="comment">//处理结点数据</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">void BinTree_Level(ThreadBinTree *bt,void (*oper)(ThreadBinTree *p)) <span class="comment">//按层遍历</span></span><br><span class="line">&#123;</span><br><span class="line">     ThreadBinTree *p;</span><br><span class="line">     ThreadBinTree *q[QUEUE_MAXSIZE]; <span class="comment">//定义一个顺序栈</span></span><br><span class="line">     <span class="keyword">int</span> head=<span class="number">0</span>,tail=<span class="number">0</span>;<span class="comment">//队首、队尾序号</span></span><br><span class="line">     <span class="keyword">if</span>(bt)<span class="comment">//若队首指针不为空</span></span><br><span class="line">     &#123;</span><br><span class="line">         tail=(tail+<span class="number">1</span>)%QUEUE_MAXSIZE;<span class="comment">//计算循环队列队尾序号</span></span><br><span class="line">         q[tail] = bt;<span class="comment">//将二叉树根指针进队</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">while</span>(head!=tail) <span class="comment">//队列不为空，进行循环</span></span><br><span class="line">     &#123;</span><br><span class="line">         head=(head+<span class="number">1</span>)%QUEUE_MAXSIZE; <span class="comment">//计算循环队列的队首序号</span></span><br><span class="line">         p=q[head]; <span class="comment">//获取队首元素</span></span><br><span class="line">         oper(p);<span class="comment">//处理队首元素</span></span><br><span class="line">         <span class="keyword">if</span>(p-&gt;left!=<span class="keyword">NULL</span>) <span class="comment">//若结点存在左子树，则左子树指针进队</span></span><br><span class="line">         &#123;</span><br><span class="line">             tail=(tail+<span class="number">1</span>)%QUEUE_MAXSIZE;<span class="comment">//计算循环队列的队尾序号</span></span><br><span class="line">             q[tail]=p-&gt;left;<span class="comment">//将左子树指针进队</span></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span>(p-&gt;right!=<span class="keyword">NULL</span>)<span class="comment">//若结点存在右孩子，则右孩子结点指针进队</span></span><br><span class="line">         &#123;</span><br><span class="line">             tail=(tail+<span class="number">1</span>)%QUEUE_MAXSIZE;<span class="comment">//计算循环队列的队尾序号</span></span><br><span class="line">             q[tail]=p-&gt;right;<span class="comment">//将右子树指针进队</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">void BinTreeThreading_LDR(ThreadBinTree *bt)     <span class="comment">//二叉树按中序线索化</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt) <span class="comment">//结点非空时，当前访问结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        BinTreeThreading_LDR(bt-&gt;left); <span class="comment">//递归调用，将左子树线索化</span></span><br><span class="line">        bt-&gt;lflag=(bt-&gt;left)?SubTree:Thread; <span class="comment">//设置左指针域的标志</span></span><br><span class="line">        bt-&gt;rflag=(bt-&gt;right)?SubTree:Thread;<span class="comment">//设置右指针域的标志</span></span><br><span class="line">        <span class="keyword">if</span>(Previous) <span class="comment">//若当前结点的前驱Previous存在</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Previous-&gt;rflag==Thread) <span class="comment">//若当前结点的前驱右标志为线索</span></span><br><span class="line">                Previous-&gt;right=bt;<span class="comment">//设Previous的右线索指向后继</span></span><br><span class="line">            <span class="keyword">if</span>(bt-&gt;lflag==Thread) <span class="comment">//若当前结点的左标志为线索</span></span><br><span class="line">                bt-&gt;left=Previous;<span class="comment">//设当前结点的左线索指向中序前驱</span></span><br><span class="line">        &#125;</span><br><span class="line">        Previous=bt;<span class="comment">//让Previous保存刚访问的结点</span></span><br><span class="line">        BinTreeThreading_LDR(bt-&gt;right);<span class="comment">//递归调用，将右子树线索化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ThreadBinTree *BinTreeNext_LDR(ThreadBinTree *bt) <span class="comment">//求指定结点的后继</span></span><br><span class="line">&#123;</span><br><span class="line">    ThreadBinTree *nextnode;</span><br><span class="line">    <span class="keyword">if</span>(!bt) <span class="keyword">return</span> <span class="keyword">NULL</span>; <span class="comment">//若当前结点为空，则返回空</span></span><br><span class="line">    <span class="keyword">if</span>(bt-&gt;rflag==Thread) <span class="comment">//若当前结点的右子树为空</span></span><br><span class="line">        <span class="keyword">return</span> bt-&gt;right; <span class="comment">//返回右线索所指的中序后继</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        nextnode=bt-&gt;right; <span class="comment">//从当前结点的右子树开始查找</span></span><br><span class="line">        <span class="keyword">while</span>(nextnode-&gt;lflag==SubTree) <span class="comment">//循环处理所有左子树不为空的结点</span></span><br><span class="line">            nextnode=nextnode-&gt;left;</span><br><span class="line">        <span class="keyword">return</span> nextnode; <span class="comment">//返回左下方的结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">ThreadBinTree *BinTreePrevious_LDR(ThreadBinTree *bt) <span class="comment">//求指定结点的前驱</span></span><br><span class="line">&#123;</span><br><span class="line">    ThreadBinTree *prenode;</span><br><span class="line">    <span class="keyword">if</span>(!bt) <span class="keyword">return</span> <span class="keyword">NULL</span>; <span class="comment">//若当前结点为空，则返回空</span></span><br><span class="line">    <span class="keyword">if</span>(bt-&gt;lflag==Thread) <span class="comment">//若当前结点的左子树为空</span></span><br><span class="line">        <span class="keyword">return</span> bt-&gt;left; <span class="comment">//返回左线索所指的中序后继</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        prenode=bt-&gt;left; <span class="comment">//从当前结点的左子树开始查找</span></span><br><span class="line">        <span class="keyword">while</span>(prenode-&gt;rflag==SubTree) <span class="comment">//循环处理所有右子树不为空的结点</span></span><br><span class="line">            prenode=prenode-&gt;right;<span class="comment">//书中错误为 prenode=prenode-&gt;left;</span></span><br><span class="line">        <span class="keyword">return</span> prenode; <span class="comment">//返回右下方的结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ThreadBinTree_LDR(ThreadBinTree *bt,void (*oper)(ThreadBinTree *p)) <span class="comment">//遍历中序线索二叉树</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt) <span class="comment">//二叉树不为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(bt-&gt;lflag==SubTree)<span class="comment">//有左子树</span></span><br><span class="line">            bt=bt-&gt;left; <span class="comment">//从根往下找最左下结点，即中序序列的开始结点</span></span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">           oper(bt); <span class="comment">//处理结点</span></span><br><span class="line">           bt=BinTreeNext_LDR(bt);<span class="comment">//找中序后继结点</span></span><br><span class="line">        &#125;<span class="keyword">while</span>(bt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void oper(ThreadBinTree *p) <span class="comment">//操作二叉树结点数据</span></span><br><span class="line">&#123;</span><br><span class="line">     printf(<span class="string">"%c "</span>,p-&gt;data); <span class="comment">//输出数据</span></span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ThreadBinTree *InitRoot()  <span class="comment">//初始化二叉树的根</span></span><br><span class="line">&#123;</span><br><span class="line">    ThreadBinTree *node;</span><br><span class="line">    <span class="keyword">if</span>(node=(ThreadBinTree *)malloc(sizeof(ThreadBinTree))) <span class="comment">//分配内存</span></span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">"\n输入根结点数据:"</span>);</span><br><span class="line">        scanf(<span class="string">"%s"</span>,&amp;node-&gt;data);</span><br><span class="line">        node-&gt;left=<span class="keyword">NULL</span>;</span><br><span class="line">        node-&gt;right=<span class="keyword">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> BinTreeInit(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">void AddNode(ThreadBinTree *bt)</span><br><span class="line">&#123;</span><br><span class="line">     ThreadBinTree *node,*<span class="keyword">parent</span>;</span><br><span class="line">     DATA data;</span><br><span class="line">     <span class="keyword">char</span> select;</span><br><span class="line">    <span class="keyword">if</span>(node=(ThreadBinTree *)malloc(sizeof(ThreadBinTree))) <span class="comment">//分配内存</span></span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">"\n输入二叉树结点数据:"</span>);</span><br><span class="line">        fflush(stdin);<span class="comment">//清空输入缓冲区</span></span><br><span class="line">        scanf(<span class="string">"%s"</span>,&amp;node-&gt;data);</span><br><span class="line">        node-&gt;left=<span class="keyword">NULL</span>; <span class="comment">//设置左右子树为空</span></span><br><span class="line">        node-&gt;right=<span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        printf(<span class="string">"输入父结点数据:"</span>);</span><br><span class="line">        fflush(stdin);<span class="comment">//清空输入缓冲区</span></span><br><span class="line">        scanf(<span class="string">"%s"</span>,&amp;data);</span><br><span class="line">        <span class="keyword">parent</span>=BinTreeFind(bt,data);<span class="comment">//查找指定数据的结点</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">parent</span>)<span class="comment">//若未找到指定数据的结点</span></span><br><span class="line">        &#123;</span><br><span class="line">            printf(<span class="string">"未找到父结点!\n"</span>);</span><br><span class="line">            free(node); <span class="comment">//释放创建的结点内存</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         printf(<span class="string">"1.添加到左子树\n2.添加到右子树\n"</span>);</span><br><span class="line">         <span class="keyword">do</span>&#123;</span><br><span class="line">            select=getch();</span><br><span class="line">            select-=<span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span>(select==<span class="number">1</span> || select==<span class="number">2</span>)</span><br><span class="line">                BinTreeAddNode(<span class="keyword">parent</span>,node,select); <span class="comment">//添加结点到二叉树</span></span><br><span class="line">         &#125;<span class="keyword">while</span>(select!=<span class="number">1</span> &amp;&amp; select!=<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    ThreadBinTree *root=<span class="keyword">NULL</span>; <span class="comment">//root为指向二叉树根结点的指针</span></span><br><span class="line">    <span class="keyword">char</span> select;</span><br><span class="line">    void (*oper1)(); <span class="comment">//指向函数的指针</span></span><br><span class="line">    oper1=oper; <span class="comment">//指向具体操作的函数</span></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        printf(<span class="string">"\n1.设置二叉树根元素    2.添加二叉树结点\n"</span>);</span><br><span class="line">        printf(<span class="string">"3.生成中序线索二叉树  4.遍历线索二叉树\n"</span>);</span><br><span class="line">        printf(<span class="string">"0.退出\n"</span>);</span><br><span class="line">        select=getch();</span><br><span class="line">        <span class="keyword">switch</span>(select)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'1'</span>: <span class="comment">//设置根元素</span></span><br><span class="line">             root=InitRoot();</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'2'</span>: <span class="comment">//添加结点</span></span><br><span class="line">             AddNode(root);</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'3'</span>:<span class="comment">//生成中序线索二叉树</span></span><br><span class="line">             BinTreeThreading_LDR(root);</span><br><span class="line">             printf(<span class="string">"\n生成中序线索二叉树完毕！\n"</span>);</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'4'</span>:<span class="comment">//遍历中序线索二叉树</span></span><br><span class="line">             printf(<span class="string">"\n中序线索二叉树遍历的结果："</span>);</span><br><span class="line">             ThreadBinTree_LDR(root,oper1);</span><br><span class="line">             printf(<span class="string">"\n"</span>);</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'0'</span>:</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(select!=<span class="string">'0'</span>);</span><br><span class="line">    BinTreeClear(root);<span class="comment">//清空二叉树</span></span><br><span class="line">    root=<span class="keyword">NULL</span>;</span><br><span class="line">    getch();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line"><span class="number">1.</span>设置二叉树根元素    <span class="number">2.</span>添加二叉树结点</span><br><span class="line"><span class="number">3.</span>生成中序线索二叉树  <span class="number">4.</span>遍历线索二叉树</span><br><span class="line"><span class="number">0.</span>退出</span><br><span class="line"></span><br><span class="line">输入根结点数据:A</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>设置二叉树根元素    <span class="number">2.</span>添加二叉树结点</span><br><span class="line"><span class="number">3.</span>生成中序线索二叉树  <span class="number">4.</span>遍历线索二叉树</span><br><span class="line"><span class="number">0.</span>退出</span><br><span class="line"></span><br><span class="line">输入二叉树结点数据:B</span><br><span class="line">输入父结点数据:A</span><br><span class="line"><span class="number">1.</span>添加到左子树</span><br><span class="line"><span class="number">2.</span>添加到右子树</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>设置二叉树根元素    <span class="number">2.</span>添加二叉树结点</span><br><span class="line"><span class="number">3.</span>生成中序线索二叉树  <span class="number">4.</span>遍历线索二叉树</span><br><span class="line"><span class="number">0.</span>退出</span><br><span class="line"></span><br><span class="line">输入二叉树结点数据:C</span><br><span class="line">输入父结点数据:B</span><br><span class="line"><span class="number">1.</span>添加到左子树</span><br><span class="line"><span class="number">2.</span>添加到右子树</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>设置二叉树根元素    <span class="number">2.</span>添加二叉树结点</span><br><span class="line"><span class="number">3.</span>生成中序线索二叉树  <span class="number">4.</span>遍历线索二叉树</span><br><span class="line"><span class="number">0.</span>退出</span><br><span class="line"></span><br><span class="line">生成中序线索二叉树完毕！</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>设置二叉树根元素    <span class="number">2.</span>添加二叉树结点</span><br><span class="line"><span class="number">3.</span>生成中序线索二叉树  <span class="number">4.</span>遍历线索二叉树</span><br><span class="line"><span class="number">0.</span>退出</span><br><span class="line"></span><br><span class="line">中序线索二叉树遍历的结果：B C A</span><br></pre></td></tr></table></figure></p>
<p>哈夫曼树(最优二叉树)基本概念：<br>节点的权：根据各节点数据的重要性赋予节点的数；<br>路径：树中从一个节点到另外一个节点的分支，称为这两个节点之间的路径；<br>路径长度：一个路径上分支数量；<br>树的路径长度：从树的根节点到每个节点的路径长度之和，节点数目相同的二叉树，完全二叉树路径最短；<br>节点的带权路径长度：若节点是带权的，从节点到根节点的路径长度与该节点的权的乘积；<br>树的带权路径长度：树中所有节点的带权路径长度之和(WPL)<br><img src="/img/suanfa/5.jpg" alt="image"><br>上图中带权路径长度分别为节点A B C D的带权路径长度之和：<br>(a)WPL=5x2+7x2+2x2+13x2=54;<br>(b)WPL=5x1+7x2+2x3+13x3=64;<br>(c)WPL=1x13+2x7+3x2+5x3=48;<br>图c最小，为一棵哈夫曼树。<br>哈夫曼树创建过程：<br>(1)首先根据n个有权值的节点构建n棵二叉树，每个节点为一棵二叉树，其权值保存在根节点中，其左右子树均为空；<br>(2)在这n棵二叉树中找到两棵权值最小的树，用这两棵树作为左右子树构建一棵新的二叉树，将左右子树根节点的权值相加，作为新二叉树根节点的权值；<br>(3)将上面找到的两棵权值最小二叉树排除在下次寻找范围之外，将新创建的二叉树添加到查找范围之内；<br>(4)重复2,3直到只剩下一棵树，即为哈夫曼树。<br><img src="/img/suanfa/6.jpg" alt="image"><br><img src="/img/suanfa/7.png" alt="image"><br>用途：<br>假设A B C D四个出现次数分别5 7 2 13<br>原始（等长编码）:A-00 B-01 C-10 D-11 编码总长度：5x2+7x2+2x2+13x2=54<br>不等长码：A-01 B-1 C-10 D-0 则0101编码字符串出现歧义<br>所以采用哈夫曼编码：A-110 B-10 C-111 D-0<br><img src="/img/suanfa/8.jpg" alt="image"><br>实现代码：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">include</span> &lt;stdlib.<span class="keyword">h</span>&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;stdio.<span class="keyword">h</span>&gt;</span><br><span class="line">#<span class="keyword">include</span> &lt;string.<span class="keyword">h</span>&gt;</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">    int weight; <span class="comment">//权值</span></span><br><span class="line">    int parent; <span class="comment">//父结点序号</span></span><br><span class="line">    int left; <span class="comment">//左子树序号</span></span><br><span class="line">    int right; <span class="comment">//右子树序号</span></span><br><span class="line">&#125;HuffmanTree;</span><br><span class="line">typedef <span class="keyword">char</span> *HuffmanCode;  <span class="comment">//Huffman编码</span></span><br><span class="line">void SelectNode(HuffmanTree *ht,int <span class="keyword">n</span>,int *bt1,int *bt2)</span><br><span class="line"><span class="comment">//从1~x个结点选择parent结点为0,权重最小的两个结点</span></span><br><span class="line">&#123;</span><br><span class="line">     int i;</span><br><span class="line">     HuffmanTree *ht1,*ht2,*t;</span><br><span class="line">     ht1=ht2=NULL; <span class="comment">//初始化两个结点为空</span></span><br><span class="line">     <span class="keyword">for</span>(i=1;i&lt;=<span class="keyword">n</span>;++i) <span class="comment">//循环处理1~n个结点（包括叶结点和非叶结点）</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">if</span>(!ht[i].parent) <span class="comment">//父结点为空(结点的parent=0)</span></span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span>(ht1==NULL) <span class="comment">//结点指针1为空</span></span><br><span class="line">             &#123;</span><br><span class="line">                 ht1=ht+i; <span class="comment">//指向第i个结点</span></span><br><span class="line">                 <span class="keyword">continue</span>; <span class="comment">//继续循环</span></span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span>(ht2==NULL) <span class="comment">//结点指针2为空</span></span><br><span class="line">             &#123;</span><br><span class="line">                 ht2=ht+i; <span class="comment">//指向第i个结点</span></span><br><span class="line">                 <span class="keyword">if</span>(ht1-&gt;weight&gt;ht2-&gt;weight) <span class="comment">//比较两个结点的权重，使ht1指向的结点权重小</span></span><br><span class="line">                 &#123;</span><br><span class="line">                     t=ht2;</span><br><span class="line">                     ht2=ht1;</span><br><span class="line">                     ht1=t;</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">continue</span>; <span class="comment">//继续循环</span></span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span>(ht1 &amp;&amp; ht2) <span class="comment">//若ht1、ht2两个指针都有效</span></span><br><span class="line">             &#123;</span><br><span class="line">                 <span class="keyword">if</span>(ht[i].weight&lt;=ht1-&gt;weight) <span class="comment">//第i个结点权重小于ht1指向的结点</span></span><br><span class="line">                 &#123;</span><br><span class="line">                     ht2=ht1; <span class="comment">//ht2保存ht1，因为这时ht1指向的结点成为第2小的</span></span><br><span class="line">                     ht1=ht+i; <span class="comment">//ht1指向第i个结点</span></span><br><span class="line">                 &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ht[i].weight&lt;ht2-&gt;weight)&#123; <span class="comment">//若第i个结点权重小于ht2指向的结点</span></span><br><span class="line">                     ht2=ht+i; <span class="comment">//ht2指向第i个结点</span></span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(ht1&gt;ht2)&#123; <span class="comment">//增加比较，使二叉树左侧为叶结点</span></span><br><span class="line"><span class="comment">         *bt2=ht1-ht;</span></span><br><span class="line"><span class="comment">         *bt1=ht2-ht;</span></span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">         *bt1=ht1-ht;</span></span><br><span class="line"><span class="comment">         *bt2=ht2-ht;</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void CreateTree(HuffmanTree *ht,int <span class="keyword">n</span>,int *w)</span><br><span class="line">&#123;</span><br><span class="line">    int i,<span class="keyword">m</span>=2*<span class="keyword">n</span>-1;<span class="comment">//总的节点数</span></span><br><span class="line">    int bt1,bt2; <span class="comment">//二叉树结点序与</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">n</span>&lt;=1) <span class="keyword">return</span> ; <span class="comment">//只有一个结点，无法创建</span></span><br><span class="line">    <span class="keyword">for</span>(i=1;i&lt;=<span class="keyword">n</span>;++i) <span class="comment">//初始化叶结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        ht[i].weight=w[i-1];</span><br><span class="line">        ht[i].parent=0;</span><br><span class="line">        ht[i].left=0;</span><br><span class="line">        ht[i].right=0;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(;i&lt;=<span class="keyword">m</span>;++i)<span class="comment">//初始化后续结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        ht[i].weight=0;</span><br><span class="line">        ht[i].parent=0;</span><br><span class="line">        ht[i].left=0;</span><br><span class="line">        ht[i].right=0;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="keyword">n</span>+1;i&lt;=<span class="keyword">m</span>;++i) <span class="comment">//逐个计算非叶结点，创建Huffman树</span></span><br><span class="line">    &#123;</span><br><span class="line">        SelectNode(ht,i-1,&amp;bt1,&amp;bt2); <span class="comment">//从1~i-1个结点选择parent结点为0,权重最小的两个结点</span></span><br><span class="line">        ht[bt1].parent=i;</span><br><span class="line">        ht[bt2].parent=i;</span><br><span class="line">        ht[i].left=bt1;</span><br><span class="line">        ht[i].right=bt2;</span><br><span class="line">        ht[i].weight=ht[bt1].weight+ht[bt2].weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void HuffmanCoding(HuffmanTree *ht,int <span class="keyword">n</span>,HuffmanCode *hc)<span class="comment">//,char *letters)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">char</span> *<span class="keyword">cd</span>;</span><br><span class="line">     int start,i;</span><br><span class="line">     int current,parent;</span><br><span class="line">     <span class="keyword">cd</span>=(<span class="keyword">char</span>*)malloc(sizeof(<span class="keyword">char</span>)*<span class="keyword">n</span>);<span class="comment">//用来临时存放一个字符的编码结果</span></span><br><span class="line">     <span class="keyword">cd</span>[<span class="keyword">n</span>-1]='\0'; <span class="comment">//设置字符串结束标志</span></span><br><span class="line">     <span class="keyword">for</span>(i=1;i&lt;=<span class="keyword">n</span>;i++)</span><br><span class="line">     &#123;</span><br><span class="line">         start=<span class="keyword">n</span>-1;</span><br><span class="line">         current=i;</span><br><span class="line">         parent=ht[current].parent;<span class="comment">//获取当前结点的父结点</span></span><br><span class="line">         <span class="keyword">while</span>(parent) <span class="comment">//父结点不为空</span></span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span>(current==ht[parent].left)<span class="comment">//若该结点是父结点的左子树</span></span><br><span class="line">               <span class="keyword">cd</span>[--start]='0'; <span class="comment">//编码为0</span></span><br><span class="line">             <span class="keyword">else</span> <span class="comment">//若结点是父结点的右子树</span></span><br><span class="line">               <span class="keyword">cd</span>[--start]='1'; <span class="comment">//编码为1</span></span><br><span class="line">             current=parent; <span class="comment">//设置当前结点指向父结点</span></span><br><span class="line">             parent=ht[parent].parent; <span class="comment">//获取当前结点的父结点序号</span></span><br><span class="line">         &#125;</span><br><span class="line">         hc[i-1]=(<span class="keyword">char</span>*)malloc(sizeof(<span class="keyword">char</span>)*(<span class="keyword">n</span>-start));<span class="comment">//分配保存编码的内存</span></span><br><span class="line">         strcpy(hc[i-1],&amp;<span class="keyword">cd</span>[start]); <span class="comment">//复制生成的编码</span></span><br><span class="line">     &#125;</span><br><span class="line">     free(<span class="keyword">cd</span>); <span class="comment">//释放编码占用的内存</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void <span class="keyword">Encode</span>(HuffmanCode *hc,<span class="keyword">char</span> *alphabet,<span class="keyword">char</span> *str,<span class="keyword">char</span> *code)</span><br><span class="line"><span class="comment">//将一个字符串转换为Huffman编码</span></span><br><span class="line"><span class="comment">//hc为Huffman编码表 ,alphabet为对应的字母表,str为需要转换的字符串,code返回转换的结果</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">     int len=0,i=0,j;</span><br><span class="line">     code[0]='\0';</span><br><span class="line">     <span class="keyword">while</span>(str[i])</span><br><span class="line">     &#123;</span><br><span class="line">         j=0;</span><br><span class="line">         <span class="keyword">while</span>(alphabet[j]!=str[i])</span><br><span class="line">             j++;</span><br><span class="line">         strcpy(code+len,hc[j]); <span class="comment">//将对应字母的Huffman编码复制到code指定位置</span></span><br><span class="line">         len=len+<span class="literal">strlen</span>(hc[j]); <span class="comment">//累加字符串长度</span></span><br><span class="line">         i++;</span><br><span class="line">     &#125;</span><br><span class="line">     code[len]='\0';</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void <span class="keyword">Decode</span>(HuffmanTree *ht,int <span class="keyword">m</span>,<span class="keyword">char</span> *code,<span class="keyword">char</span> *alphabet,<span class="keyword">char</span> *<span class="keyword">decode</span>)</span><br><span class="line"><span class="comment">//将一个Huffman编码组成的字符串转换为明文字符串</span></span><br><span class="line"><span class="comment">//ht为Huffman二叉树,m为字符数量,alphabet为对应的字母表,str为需要转换的字符串,decode返回转换的结果</span></span><br><span class="line">&#123;</span><br><span class="line">     int position=0,i,j=0;</span><br><span class="line">     <span class="keyword">m</span>=2*<span class="keyword">m</span>-1;</span><br><span class="line">     <span class="keyword">while</span>(code[position]) <span class="comment">//字符串未结束</span></span><br><span class="line">     &#123;</span><br><span class="line">          <span class="keyword">for</span>(i=<span class="keyword">m</span>;ht[i].left &amp;&amp; ht[i].right; position++) <span class="comment">//在Huffman树中查找左右子树为空 ，以构造一个Huffman编码</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">if</span>(code[position]=='0') <span class="comment">//编码位为0</span></span><br><span class="line">                  i=ht[i].left; <span class="comment">//处理左子树</span></span><br><span class="line">              <span class="keyword">else</span> <span class="comment">//编译位为 1</span></span><br><span class="line">                  i=ht[i].right; <span class="comment">//处理右子树</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">decode</span>[j]=alphabet[i-1]; <span class="comment">//得到一个字母</span></span><br><span class="line">          j++;<span class="comment">//处理下一字符</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">decode</span>[j]='\0'; <span class="comment">//字符串结尾</span></span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i,<span class="keyword">n</span>=4,<span class="keyword">m</span>;</span><br><span class="line">    <span class="keyword">char</span> <span class="keyword">test</span>[]=<span class="string">"DBDBDABDCDADBDADBDADACDBDBD"</span>;</span><br><span class="line">    <span class="keyword">char</span> code[100],code1[100];</span><br><span class="line">    <span class="keyword">char</span> alphabet[]=&#123;'A','B','C','<span class="keyword">D</span>'&#125;; <span class="comment">//4个字符</span></span><br><span class="line">    int w[]=&#123;5,7,2,13&#125; ;<span class="comment">//4个字符的权重</span></span><br><span class="line">    HuffmanTree *ht;</span><br><span class="line">    HuffmanCode *hc;</span><br><span class="line">    <span class="keyword">m</span>=2*<span class="keyword">n</span>-1;</span><br><span class="line">    ht=(HuffmanTree *)malloc((<span class="keyword">m</span>+1)*sizeof(HuffmanTree)); <span class="comment">//申请内存，保存赫夫曼树</span></span><br><span class="line">    <span class="keyword">if</span>(!ht)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">"内存分配失败！\n"</span>);</span><br><span class="line">        <span class="keyword">exit</span>(0);</span><br><span class="line">    &#125;</span><br><span class="line">    hc=(HuffmanCode *)malloc(<span class="keyword">n</span>*sizeof(<span class="keyword">char</span>*));</span><br><span class="line">    <span class="keyword">if</span>(!hc)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">"内存分配失败！\n"</span>);</span><br><span class="line">        <span class="keyword">exit</span>(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CreateTree(ht,<span class="keyword">n</span>,w); <span class="comment">//创建赫夫曼树</span></span><br><span class="line">    HuffmanCoding(ht,<span class="keyword">n</span>,hc); <span class="comment">//根据赫夫曼树生成赫夫曼编码</span></span><br><span class="line">    <span class="keyword">for</span>(i=1;i&lt;=<span class="keyword">n</span>;i++) <span class="comment">//循环输出赫夫曼编码</span></span><br><span class="line">        printf(<span class="string">"字母:%c,权重:%d,编码为 %s\n"</span>,alphabet[i-1],ht[i].weight,hc[i-1]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Encode</span>(hc,alphabet,<span class="keyword">test</span>,code); <span class="comment">//根据赫夫曼编码生成编码字符串</span></span><br><span class="line">    printf(<span class="string">"\n字符串:\n%s\n转换后为:\n%s\n"</span>,<span class="keyword">test</span>,code);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Decode</span>(ht,<span class="keyword">n</span>,code,alphabet,code1); <span class="comment">//根据编码字符串生成解码后的字符串</span></span><br><span class="line">    printf(<span class="string">"\n编码:\n%s\n转换后为:\n%s\n"</span>,code,code1);</span><br><span class="line">    getch();</span><br><span class="line">    <span class="keyword">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output：</span><br><span class="line">字母:A,权重:5,编码为 110</span><br><span class="line">字母:B,权重:7,编码为 10</span><br><span class="line">字母:C,权重:2,编码为 111</span><br><span class="line">字母:<span class="keyword">D</span>,权重:13,编码为 0</span><br><span class="line"></span><br><span class="line">字符串:</span><br><span class="line">DBDBDABDCDADBDADBDADACDBDBD</span><br><span class="line">转换后为:</span><br><span class="line">010010011010011101100100110010011001101110100100</span><br><span class="line"></span><br><span class="line">编码:</span><br><span class="line">010010011010011101100100110010011001101110100100</span><br><span class="line">转换后为:</span><br><span class="line">DBDBDABDCDADBDADBDADACDBDBD</span><br></pre></td></tr></table></figure></p>
<h2 id="6-_u56FE"><a href="#6-_u56FE" class="headerlink" title="6.图"></a>6.图</h2><p>图是多对多关系，每一个数据元素都可以与其他任意元素相关；<br>图由数据元素和连接数据元素的线构成；<br>数据元素称为顶点，线称为边。<br>一个图由顶点集合与边集合组成，如下：<br>G=(V,E)或者G=(V(G),E(G))<br>V(G)表示顶点的非空集合（至少一个顶点），每个顶点可以用不同的字母或者数字表示；<br>E(G)是图里面所有边的集合，可以为空，图的每一条边由连接的两个顶点表示。<br>边没有方向的为无向图，有方向的为有向图。<br><img src="/img/suanfa/9.jpg" alt="image"><br>无向图：V(G)={V1，V2，V3，V4，V5} E(G)={(V1,V2),(V1,V3),(V1,V5),(V2,V4),(V3,V5),(V4,V5)}<br>有向图：V(G)={V1，V2，V3，V4，V5，V6} E(G)=&lt;V1,V2&gt;,&lt;V2,V1&gt;,&lt;V2,V3&gt;,&lt;V3,V4&gt;,&lt;V4,V5&gt;,&lt;V5,V6&gt;,&lt;V6,V4&gt;,&lt;V6,V2&gt;}</p>
<p>常用概念：<br>邻接点：一条边的两个顶点互称邻接点；有向图中有起点和终点之分，<v1,v2>中，V1是V2的入边邻接点，V2是V1的出边邻接点。<br>顶点的度D(V)：在图中连接某顶点的边的数量。对于有向图有入度ID(V)和出度OD(V)之分,D(V)=ID(V)+OD(V).<br>完全图：图中每两个顶点之间都存在一条边。<br><img src="/img/suanfa/10.jpg" alt="image"><br>n个顶点的无向完全图总边数为 n(n-1)/2,有向完全图总边数为 n(n-1).<br>子图：一个图的所有顶点和边都是另外一个图的子集，则称这个图是另外一个图的子图。必须顶点和边都是子集。<br>路径：从顶点Vm到Vn之间存在的一个顶点序列Vm、V1 … Vi、Vn,有(Vm,V1)、(V1,V2)…（Vi,Vn）,则表示Vm到Vn的一条路径；<br>路径长度：路径上边的数量<br>回路：第一个顶点与最后一个顶点相同的路径如(V2,V1),(V1,V3),(V3,V4),(V4,V1)<br>无向图中任意两个顶点可以连通称为连通图，否则为非连通图，有些分连通图可以分为多个连通分量；<br>有向图中任意两个顶点连通(Vi到Vj连通，反之不一定)称为强连通图；<br>带权值的图为带权图或者网：<br><img src="/img/suanfa/11.jpg" alt="image"></v1,v2></p>
<p>图的存储有邻接矩阵和邻接表两种。<br>邻接矩阵：<br><img src="/img/suanfa/12.jpg" alt="image"><br>Aij为1表示(Vi,Vj)或者<vi,vj>构成一条边，为0表示不构成一条边；<br>无向图邻接矩阵左下角和右上角对称，有向图则不一定。<br>带权图只要把1改为权值，将0改为最大MAX(大于所有边的权值之和)即可。<br>邻接矩阵：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">define</span> VERTEX_MAX <span class="number">26</span>   <span class="comment">//图的最大顶点数</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXVALUE <span class="number">32767</span> <span class="comment">//最大值(可设为一个最大整数)</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> Vertex[VERTEX_MAX]; <span class="comment">//保存顶点信息(序号或字母)</span></span><br><span class="line">    <span class="keyword">int</span> Edges[VERTEX_MAX][VERTEX_MAX]; <span class="comment">//保存边的权</span></span><br><span class="line">    <span class="keyword">int</span> isTrav[VERTEX_MAX]; <span class="comment">//遍历标志</span></span><br><span class="line">    <span class="keyword">int</span> VertexNum; <span class="comment">//顶点数量</span></span><br><span class="line">    <span class="keyword">int</span> EdgeNum;<span class="comment">//边数量</span></span><br><span class="line">    <span class="keyword">int</span> GraphType; <span class="comment">//图的类型(0:无向图，1:有向图)</span></span><br><span class="line">&#125;MatrixGraph; <span class="comment">//定义邻接矩阵图结构</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMatrixGraph</span><span class="params">(MatrixGraph *G)</span></span>;<span class="comment">//创建邻接矩阵图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OutMatrix</span><span class="params">(MatrixGraph *G)</span></span>; <span class="comment">//输出邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateMatrixGraph</span><span class="params">(MatrixGraph *G)</span><span class="comment">//创建邻接矩阵图</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,weight;</span><br><span class="line">    <span class="keyword">char</span> start,end; <span class="comment">//边的起始顶点</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入各顶点信息\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G-&gt;VertexNum;i++) <span class="comment">//输入顶点</span></span><br><span class="line">    &#123;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"第%d个顶点:"</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;(G-&gt;Vertex[i])); <span class="comment">//保存到各顶点数组元素中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入构成各边的两个顶点及权值(用逗号分隔):\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;G-&gt;EdgeNum;k++)  <span class="comment">//输入边的信息</span></span><br><span class="line">    &#123;</span><br><span class="line">        getchar(); <span class="comment">//暂停输入</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"第%d条边："</span>,k+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%c,%c,%d"</span>,&amp;start,&amp;end,&amp;weight);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;start!=G-&gt;Vertex[i];i++); <span class="comment">//在已有顶点中查找始点</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;end!=G-&gt;Vertex[j];j++); <span class="comment">//在已有顶点中查找结终点</span></span><br><span class="line">        G-&gt;Edges[i][j]=weight; <span class="comment">//对应位置保存权值，表示有一条边</span></span><br><span class="line">        <span class="keyword">if</span>(G-&gt;GraphType==<span class="number">0</span>)  <span class="comment">//若是无向图</span></span><br><span class="line">            G-&gt;Edges[j][i]=weight;<span class="comment">//在对角位置保存权值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OutMatrix</span><span class="params">(MatrixGraph *G)</span><span class="comment">//输出邻接矩阵</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;G-&gt;VertexNum;j++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\t%c"</span>,G-&gt;Vertex[j]);          <span class="comment">//在第1行输出顶点信息</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G-&gt;VertexNum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,G-&gt;Vertex[i]);</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;G-&gt;VertexNum;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(G-&gt;Edges[i][j]==MAXVALUE) <span class="comment">//若权值为最大值</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\t∞"</span>);          <span class="comment">//输出无穷大符号</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\t%d"</span>,G-&gt;Edges[i][j]); <span class="comment">//输出边的权值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    MatrixGraph G; <span class="comment">//定义保存邻接矩阵结构的图</span></span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入生成图的类型(0:无向图,1:有向图):"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;G.GraphType); <span class="comment">//图的种类</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入图的顶点数量和边数量:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;G.VertexNum,&amp;G.EdgeNum); <span class="comment">//输入图顶点数和边数</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G.VertexNum;i++)  <span class="comment">//清空矩阵</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;G.VertexNum;j++)</span><br><span class="line">            G.Edges[i][j]=MAXVALUE; <span class="comment">//设置矩阵中各元素的值为最大值</span></span><br><span class="line">    CreateMatrixGraph(&amp;G); <span class="comment">//创建用邻接表保存的图</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"邻接矩阵数据如下:\n"</span>);</span><br><span class="line">    OutMatrix(&amp;G);</span><br><span class="line">    getch();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输入生成图的类型(<span class="number">0</span>:无向图,<span class="number">1</span>:有向图):<span class="number">0</span></span><br><span class="line">输入图的顶点数量和边数量:<span class="number">5</span>,<span class="number">6</span></span><br><span class="line">输入各顶点信息</span><br><span class="line">第<span class="number">1</span>个顶点:<span class="number">1</span></span><br><span class="line">第<span class="number">2</span>个顶点:<span class="number">2</span></span><br><span class="line">第<span class="number">3</span>个顶点:<span class="number">3</span></span><br><span class="line">第<span class="number">4</span>个顶点:<span class="number">4</span></span><br><span class="line">第<span class="number">5</span>个顶点:<span class="number">5</span></span><br><span class="line">输入构成各边的两个顶点及权值(用逗号分隔):</span><br><span class="line">第<span class="number">1</span>条边：<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span></span><br><span class="line">第<span class="number">2</span>条边：<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span></span><br><span class="line">第<span class="number">3</span>条边：<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span></span><br><span class="line">第<span class="number">4</span>条边：<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span></span><br><span class="line">第<span class="number">5</span>条边：<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span></span><br><span class="line">第<span class="number">6</span>条边：<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span></span><br><span class="line">邻接矩阵数据如下:</span><br><span class="line">        <span class="number">1</span>       <span class="number">2</span>       <span class="number">3</span>       <span class="number">4</span>       <span class="number">5</span></span><br><span class="line"><span class="number">1</span>       ∞      <span class="number">2</span>       <span class="number">5</span>       ∞      <span class="number">3</span></span><br><span class="line"><span class="number">2</span>       <span class="number">2</span>       ∞      ∞      <span class="number">4</span>       ∞</span><br><span class="line"><span class="number">3</span>       <span class="number">5</span>       ∞      ∞      ∞      <span class="number">5</span></span><br><span class="line"><span class="number">4</span>       ∞      <span class="number">4</span>       ∞      ∞      <span class="number">2</span></span><br><span class="line"><span class="number">5</span>       <span class="number">3</span>       ∞      <span class="number">5</span>       <span class="number">2</span>       ∞</span><br></pre></td></tr></table></figure></vi,vj></p>
<p>邻接表：<br>从邻接矩阵表示图可以看出很多元素值为0，造成存储空间浪费。<br><img src="/img/suanfa/13.jpg" alt="image"><br>邻接表对每个顶点建立一个邻接关系的单链表，如图中V1连接三个顶点次序是任意的，只要是邻接点就行。<br>邻接表保存图：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> VERTEX_MAX <span class="number">20</span>   <span class="comment">//图的最大顶点数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> edgeNode</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> Vertex; <span class="comment">//顶点信息(序号或字母)</span></span><br><span class="line">    <span class="keyword">int</span> weight; <span class="comment">//权值</span></span><br><span class="line">    <span class="keyword">struct</span> edgeNode *next; <span class="comment">//指向下一个顶点指针 (当前顶点和指向的下一顶点构成一条边)</span></span><br><span class="line">&#125;EdgeNode; <span class="comment">//邻接表边结构</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    EdgeNode* AdjList[VERTEX_MAX]; <span class="comment">//指向每个顶点的指针</span></span><br><span class="line">    <span class="keyword">int</span> VextexNum,EdgeNum; <span class="comment">//图的顶点的数量和边的数量</span></span><br><span class="line">    <span class="keyword">int</span> GraphType; <span class="comment">//图的类型(0:无向图，1:有向图)</span></span><br><span class="line">&#125;ListGraph;  <span class="comment">//图的结构</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span><span class="params">(ListGraph *G)</span></span>; <span class="comment">//生成图的邻接表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OutList</span><span class="params">(ListGraph *G)</span></span>; <span class="comment">//输出邻接表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span><span class="params">(ListGraph *G)</span>  <span class="comment">//构造邻接表结构图</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,weight;</span><br><span class="line">    <span class="keyword">int</span> start,end;</span><br><span class="line">    EdgeNode *s;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=G-&gt;VextexNum;i++)<span class="comment">//将图中各顶点指针清空</span></span><br><span class="line">        G-&gt;AdjList[i]= <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=G-&gt;EdgeNum;i++) <span class="comment">//输入各边的两个顶点</span></span><br><span class="line">    &#123;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"第%d条边:"</span>,i);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d,%d,%d"</span>,&amp;start,&amp;end,&amp;weight); <span class="comment">//输入边的起点和终点</span></span><br><span class="line">        s=(EdgeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode)); <span class="comment">//申请保存一个顶点的内存</span></span><br><span class="line">        s-&gt;next=G-&gt;AdjList[start]; <span class="comment">//插入到邻接表中</span></span><br><span class="line">        s-&gt;Vertex=end; <span class="comment">//保存终点编号</span></span><br><span class="line">        s-&gt;weight=weight; <span class="comment">//保存权值</span></span><br><span class="line">        G-&gt;AdjList[start]=s; <span class="comment">//邻接表对应顶点指向该点</span></span><br><span class="line">        <span class="keyword">if</span>(G-&gt;GraphType==<span class="number">0</span>) <span class="comment">//若是无向图，再插入到终点的边链中</span></span><br><span class="line">        &#123;</span><br><span class="line">            s=(EdgeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode)); <span class="comment">//申请保存一个顶点的内存</span></span><br><span class="line">            s-&gt;next=G-&gt;AdjList[end];</span><br><span class="line">            s-&gt;Vertex=start;</span><br><span class="line">            s-&gt;weight=weight;</span><br><span class="line">            G-&gt;AdjList[end]=s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OutList</span><span class="params">(ListGraph *G)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    EdgeNode *s;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=G-&gt;VextexNum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"顶点%d"</span>,i);</span><br><span class="line">        s=G-&gt;AdjList[i];</span><br><span class="line">        <span class="keyword">while</span>(s)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-&gt;%d(%d)"</span>,s-&gt;Vertex,s-&gt;weight);</span><br><span class="line">            s=s-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    ListGraph G; <span class="comment">//定义保存邻接表结构的图</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入生成图的类型(0:无向图,1:有向图):"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;G.GraphType); <span class="comment">//图的种类</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入图的顶点数量和边数量:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;G.VextexNum,&amp;G.EdgeNum); <span class="comment">//输入图顶点数和边数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入构成各边的两个顶点及权值(用逗号分隔):\n"</span>);</span><br><span class="line">    CreateGraph(&amp;G); <span class="comment">//生成邻接表结构的图</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输出图的邻接表:\n"</span>);</span><br><span class="line">    OutList(&amp;G);</span><br><span class="line">    getch();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">输入生成图的类型(<span class="number">0</span>:无向图,<span class="number">1</span>:有向图):<span class="number">1</span></span><br><span class="line">输入图的顶点数量和边数量:<span class="number">5</span>,<span class="number">6</span></span><br><span class="line">输入构成各边的两个顶点及权值(用逗号分隔):</span><br><span class="line">第<span class="number">1</span>条边:<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span></span><br><span class="line">第<span class="number">2</span>条边:<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span></span><br><span class="line">第<span class="number">3</span>条边:<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span></span><br><span class="line">第<span class="number">4</span>条边:<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span></span><br><span class="line">第<span class="number">5</span>条边:<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span></span><br><span class="line">第<span class="number">6</span>条边:<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span></span><br><span class="line">输出图的邻接表:</span><br><span class="line">顶点<span class="number">1</span>-&gt;<span class="number">5</span>(<span class="number">3</span>)-&gt;<span class="number">3</span>(<span class="number">5</span>)-&gt;<span class="number">2</span>(<span class="number">2</span>)</span><br><span class="line">顶点<span class="number">2</span>-&gt;<span class="number">4</span>(<span class="number">4</span>)</span><br><span class="line">顶点<span class="number">3</span>-&gt;<span class="number">5</span>(<span class="number">5</span>)</span><br><span class="line">顶点<span class="number">4</span>-&gt;<span class="number">5</span>(<span class="number">2</span>)</span><br><span class="line">顶点<span class="number">5</span></span><br></pre></td></tr></table></figure></p>
<h1 id="u4E8C-_u7B97_u6CD5"><a href="#u4E8C-_u7B97_u6CD5" class="headerlink" title="二.算法"></a>二.算法</h1><h1 id="u4E09-_u5E38_u7528_u7A0B_u5E8F"><a href="#u4E09-_u5E38_u7528_u7A0B_u5E8F" class="headerlink" title="三.常用程序"></a>三.常用程序</h1><h2 id="1__u8FDB_u5236_u8F6C_u5316"><a href="#1__u8FDB_u5236_u8F6C_u5316" class="headerlink" title="1 进制转化"></a>1 进制转化</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">/** **********进制转换</span><br><span class="line"> *输入10进制数和需要转换的进制</span><br><span class="line"> *输出对应进制数</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">convto</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> n,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> bit[]=&#123;<span class="string">"0123456789ABCDEF"</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(s,<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    convto(s,n/b,b);</span><br><span class="line">    len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    s[len]=bit[n%b];</span><br><span class="line">    s[len+<span class="number">1</span>]=<span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">80</span>];</span><br><span class="line">    <span class="keyword">int</span> base,old;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入十进制数:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;old);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入转换的进制:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;base);</span><br><span class="line">    convto(s,old,base);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,s);</span><br><span class="line">    <span class="comment">//char i=getch(); //从控制台读取一个字符，但不显示在屏幕上 会等待你按下任意键，再继续执行下面的语句</span></span><br><span class="line">    <span class="comment">//printf("%c\n",i);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="u56DB-_u9898_u5E93"><a href="#u56DB-_u9898_u5E93" class="headerlink" title="四.题库"></a>四.题库</h1><h2 id="1-_u8BD5_u63A2_u6CD5_u751F_u6210_u5F69_u7968_u7EC4_u5408"><a href="#1-_u8BD5_u63A2_u6CD5_u751F_u6210_u5F69_u7968_u7EC4_u5408" class="headerlink" title="1.试探法生成彩票组合"></a>1.试探法生成彩票组合</h2><p>描述：通过每一注彩票的位数和组成彩票的数字输出彩票号码。不可重复。<br>如:位数3 数字4<br>则组合：<br>4 3 2<br>4 3 1<br>4 2 1<br>3 2 1</p>
<p>程序如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAXN <span class="number">3</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> NUM <span class="number">4</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num[NUM];</span><br><span class="line"><span class="keyword">int</span> lottery[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combine</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=n;i&gt;=m;i--)&#123;</span><br><span class="line">        lottery[m-<span class="number">1</span>]=num[i-<span class="number">1</span>];<span class="comment">//保存一位数字</span></span><br><span class="line">        <span class="keyword">if</span>(m&gt;<span class="number">1</span>)</span><br><span class="line">            combine(i-<span class="number">1</span>,m-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=MAXN-<span class="number">1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%3d"</span>,lottery[j]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;NUM;i++)</span><br><span class="line">        num[i]=i+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;MAXN;j++)</span><br><span class="line">        lottery[j]=<span class="number">0</span>;</span><br><span class="line">    combine(NUM,MAXN);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output：</span><br><span class="line">  <span class="number">4</span>  <span class="number">3</span>  <span class="number">2</span></span><br><span class="line">  <span class="number">4</span>  <span class="number">3</span>  <span class="number">1</span></span><br><span class="line">  <span class="number">4</span>  <span class="number">2</span>  <span class="number">1</span></span><br><span class="line">  <span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-_u6C49_u8BFA_u5854_u95EE_u9898"><a href="#2-_u6C49_u8BFA_u5854_u95EE_u9898" class="headerlink" title="2.汉诺塔问题"></a>2.汉诺塔问题</h2><p>汉诺塔问题是使用递归解决问题的经典范例。<br>汉诺（Hanoi）塔问题：古代有一个梵塔，塔内有三个座A、B、C，A座上有64个盘子，盘子大小不等，大的在下，小的在上。有一个和尚想把这64个盘子从A座移到C座，但每次只能允许移动一个盘子，并且在移动过程中，3个座上的盘子始终保持大盘在下，小盘在上。在移动过程中可以利用B座，要求打印移动的步骤。如果只有一个盘子，则不需要利用B座，直接将盘子从A移动到C。<br>分析：<br>(1)如果只有一个圆盘，则把该圆盘从A棒移动到C棒，完成任务；<br>(2)如果圆盘数量n&gt;1,移动过程分三步：<br>第一步：将A棒的n-1个圆盘移动到B棒上，<br>第二步：将A棒的1个盘移动到C棒上，<br>第三步：将B棒的n-1个圆盘移动到C棒上。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">hanio</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">char</span> one ,<span class="keyword">char</span> two,<span class="keyword">char</span> three)</span></span>;</span><br><span class="line">  <span class="keyword">int</span> m;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"输入盘子的数量"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"移动个%d盘子步骤\n"</span>,m);</span><br><span class="line">  hanio(m,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"总共移动了%d次"</span>,count);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanio</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">char</span> one,<span class="keyword">char</span> two,<span class="keyword">char</span> three)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">char</span> x,<span class="keyword">char</span> y)</span></span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="number">1</span>==n) move(one,three);</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">        hanio(n-<span class="number">1</span>,one ,three,two);</span><br><span class="line">        move(one,three);</span><br><span class="line">        hanio(n-<span class="number">1</span>,two,one,three);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">char</span> x,<span class="keyword">char</span> y)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c---&gt;%c\n"</span>,x,y);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">输入盘子的数量<span class="number">3</span></span><br><span class="line">移动个<span class="number">3</span>盘子步骤</span><br><span class="line">A---&gt;C</span><br><span class="line">A---&gt;B</span><br><span class="line">C---&gt;B</span><br><span class="line">A---&gt;C</span><br><span class="line">B---&gt;A</span><br><span class="line">B---&gt;C</span><br><span class="line">A---&gt;C</span><br><span class="line">总共移动了<span class="number">7</span>次</span><br></pre></td></tr></table></figure></p>
<h2 id="3-_u7B97_u672F_u8868_u8FBE_u5F0F_u6C42_u503C"><a href="#3-_u7B97_u672F_u8868_u8FBE_u5F0F_u6C42_u503C" class="headerlink" title="3.算术表达式求值"></a>3.算术表达式求值</h2><p>输入表达式，输出计算值,这里只有数字和加减乘除小括号。<br>如:<br>输入:(1+1)*2=<br>输出:4<br>分析如下:<br><img src="/img/suanfa/1.png" alt="image"><br>运算符优先级：</p>
<table>
<thead>
<tr>
<th>O1\O2</th>
<th>+、-</th>
<th>*、/</th>
<th>（</th>
<th>）</th>
</tr>
</thead>
<tbody>
<tr>
<td>+、-</td>
<td>1</td>
<td>-1</td>
<td>-1</td>
<td>1</td>
</tr>
<tr>
<td>*、/</td>
<td>1</td>
<td>1</td>
<td>-1</td>
<td>1</td>
</tr>
<tr>
<td>（</td>
<td>-1</td>
<td>-1</td>
<td>-1</td>
<td>0</td>
</tr>
<tr>
<td>）</td>
<td>1</td>
<td>1</td>
<td></td>
<td>1</td>
</tr>
</tbody>
</table>
<p>程序：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要内容：各种算法总结<br>]]>
    
    </summary>
    
      <category term="数据结构" scheme="http://www.bestzhangjin.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://www.bestzhangjin.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法" scheme="http://www.bestzhangjin.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PHP]]></title>
    <link href="http://www.bestzhangjin.com/2016/07/19/PHP/"/>
    <id>http://www.bestzhangjin.com/2016/07/19/PHP/</id>
    <published>2016-07-19T09:25:00.000Z</published>
    <updated>2016-09-13T13:30:27.398Z</updated>
    <content type="html"><![CDATA[<p>主要内容：PHP<br><a id="more"></a></p>
<h1 id="u7B2C_u4E00_u7AE0__u73AF_u5883_u642D_u5EFA"><a href="#u7B2C_u4E00_u7AE0__u73AF_u5883_u642D_u5EFA" class="headerlink" title="第一章 环境搭建"></a>第一章 环境搭建</h1><p>下载软件:<br>xampp-win32-5.6.21-0-VC11-installer.exe<br>PhpStorm-2016.2.exe<br>XAMPP(Apache+MySQL+PHP+PERL)是一个功能强大的建 XAMPP 软件站集成软件包；<br>PhpStorm是JetBrains公司开发的一款商业的PHP集成开发工具。<br>先安装XAMPP，完成如下:<br><img src="/img/php/1.png" alt="image"><br>再安装PhpStorm，之后指定php目录为XAMPP安装目录下的php文件夹就可以用啦，编写完代码后在鼠标移到右上角有显示浏览器，直接点击一个已经安装的浏览器就可以在页面看到效果。<br>指定php目录:file-&gt;setting-&gt;languages-&gt;php<br><img src="/img/php/2.png" alt="image"></p>
<h1 id="u7B2C_u4E8C_u7AE0__u8BED_u6CD5"><a href="#u7B2C_u4E8C_u7AE0__u8BED_u6CD5" class="headerlink" title="第二章 语法"></a>第二章 语法</h1><h2 id="1-_u6807_u8BB0_u7B26"><a href="#1-_u6807_u8BB0_u7B26" class="headerlink" title="1.标记符"></a>1.标记符</h2><p>php文件开头&lt;?php 结尾为?&gt; 只有php代码时可以不要结尾；<br>与html混编时要结尾.<br>如下是html中嵌入php代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>PHP<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">HTML!<span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'PHP'</span>;</span><br><span class="line"><span class="preprocessor">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>输出:<br>HTML!<br>PHP</p>
<h2 id="2-_u5E38_u91CF_u4E0E_u53D8_u91CF"><a href="#2-_u5E38_u91CF_u4E0E_u53D8_u91CF" class="headerlink" title="2.常量与变量"></a>2.常量与变量</h2><p>变量声明以$符号开头,常量用const.<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$a</span>=<span class="number">1</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="number">120</span>;</span><br><span class="line">echo <span class="variable">$a</span>;//变量值可以改变</span><br><span class="line">const b=<span class="number">21</span>;</span><br><span class="line">echo b;//常量值不可以改变</span><br><span class="line">define(<span class="string">'VALUE'</span>,<span class="number">289</span>);//常量的另外一种定义方法</span><br><span class="line">echo VALUE;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-_u51FD_u6570"><a href="#3-_u51FD_u6570" class="headerlink" title="3.函数"></a>3.函数</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">function</span> echoHello()&#123;</span><br><span class="line">    echo <span class="string">'hello&lt;br&gt;'</span>;</span><br><span class="line">    echo <span class="string">'php'</span>;</span><br><span class="line">&#125;</span><br><span class="line">echoHello();</span><br><span class="line">////输出:</span><br><span class="line">//hello</span><br><span class="line">//php</span><br><span class="line"></span><br><span class="line">//函数可以通过变量执行，如下</span><br><span class="line"><span class="variable">$func</span>=<span class="string">'echoHello'</span>;</span><br><span class="line"><span class="variable">$func</span>();</span><br><span class="line">//输出效果与:echoHello();相同</span><br><span class="line"></span><br><span class="line">//传参</span><br><span class="line"><span class="keyword">function</span> sayHello(<span class="variable">$name</span>)&#123;</span><br><span class="line">    echo <span class="string">'Hello '</span>,<span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line">sayHello(<span class="string">'zhangsan'</span>);//Hello zhangsan</span><br><span class="line"><span class="keyword">function</span> echoNUM(<span class="variable">$a</span>,<span class="variable">$b</span>)&#123;</span><br><span class="line">    echo <span class="string">'a='</span>.<span class="variable">$a</span>.<span class="string">',b='</span>.<span class="variable">$b</span>.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">    //也可以如下写</span><br><span class="line">    //echo <span class="string">"a=$a,b=$b"</span>; //a=<span class="number">1</span>,b=<span class="number">2</span> //这里双引号不能换为单引号</span><br><span class="line">    //echo <span class="string">'a=$a,b=$b'</span>;//a=<span class="variable">$a</span>,b=<span class="variable">$b</span></span><br><span class="line">&#125;</span><br><span class="line">echoNUM(<span class="number">1</span>,<span class="number">2</span>);//a=<span class="number">1</span>,b=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">//返回值</span><br><span class="line"><span class="keyword">function</span> add(<span class="variable">$a</span>,<span class="variable">$b</span>)&#123;</span><br><span class="line">    return <span class="variable">$a</span>+<span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br><span class="line">echo add(<span class="number">3</span>,<span class="number">4</span>) //<span class="number">7</span></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h2 id="4-_u6D41_u7A0B_u63A7_u5236"><a href="#4-_u6D41_u7A0B_u63A7_u5236" class="headerlink" title="4.流程控制"></a>4.流程控制</h2><p>选中代码Ctrl+/可以注释<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span><span class="comment">&lt;!-- 这里用html目的是用charset='utf-8'防止乱码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>PHP<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="php"><span class="preprocessor">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLevel</span><span class="params">(<span class="variable">$score</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//if语句</span></span><br><span class="line"><span class="comment">//    if($score&gt;90)&#123;</span></span><br><span class="line"><span class="comment">//        return '优秀';</span></span><br><span class="line"><span class="comment">//    &#125;elseif ($score&gt;60)&#123;</span></span><br><span class="line"><span class="comment">//        return '及格';</span></span><br><span class="line"><span class="comment">//    &#125;else&#123;</span></span><br><span class="line"><span class="comment">//        return '差';</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//swith语句</span></span><br><span class="line">    <span class="variable">$result</span>=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">switch</span> (intval(<span class="variable">$score</span>/<span class="number">10</span>))&#123;<span class="comment">//要强转为整数 否则都是default</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">            <span class="variable">$result</span>=<span class="string">'优秀'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="variable">$result</span>=<span class="string">'及格'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="variable">$result</span>=<span class="string">'差'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> getLevel(<span class="number">72</span>);<span class="comment">//及格</span></span><br><span class="line"><span class="preprocessor">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="5-_u5FAA_u73AF"><a href="#5-_u5FAA_u73AF" class="headerlink" title="5.循环"></a>5.循环</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//以下三个都输出:hello <span class="number">0</span>, hello <span class="number">1</span>, hello <span class="number">2</span>, hello <span class="number">3</span>, hello <span class="number">4</span>,</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">9</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    echo <span class="string">'hello '</span>.<span class="variable">$i</span>.<span class="string">', '</span>;</span><br><span class="line">    if(<span class="variable">$i</span>==<span class="number">4</span>)&#123;</span><br><span class="line">        break;//注意break与continue的区别</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$i</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$i</span>&lt;<span class="number">5</span>)&#123;</span><br><span class="line">    echo <span class="string">'hello '</span>.<span class="variable">$i</span>.<span class="string">', '</span>;</span><br><span class="line">    <span class="variable">$i</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$i</span>=<span class="number">0</span>;</span><br><span class="line">do&#123;</span><br><span class="line">    echo <span class="string">'hello '</span>.<span class="variable">$i</span>.<span class="string">', '</span>;</span><br><span class="line">    <span class="variable">$i</span>++;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="variable">$i</span>&lt;<span class="number">5</span>)</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h2 id="6-_u903B_u8F91_u8FD0_u7B97"><a href="#6-_u903B_u8F91_u8FD0_u7B97" class="headerlink" title="6.逻辑运算"></a>6.逻辑运算</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">30</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    //与 &amp;&amp;</span><br><span class="line">    if(<span class="variable">$i</span><span class="decorator">%2</span>==<span class="number">0</span> &amp;&amp; <span class="variable">$i</span><span class="decorator">%3</span>==<span class="number">0</span>) &#123;</span><br><span class="line">        echo <span class="variable">$i</span>;</span><br><span class="line">        //或 ||</span><br><span class="line">        //非 !</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<h1 id="u7B2C_u4E09_u7AE0__u90E8_u7F72_PHP__u4EE3_u7801"><a href="#u7B2C_u4E09_u7AE0__u90E8_u7F72_PHP__u4EE3_u7801" class="headerlink" title="第三章 部署 PHP 代码"></a>第三章 部署 PHP 代码</h1><p>在服务器上安装lampp</p>
<h1 id="u9644_u5F55_uFF1A"><a href="#u9644_u5F55_uFF1A" class="headerlink" title="附录："></a>附录：</h1><h2 id="1-ubuntu_u4E0A_u90E8_u7F72php_u9879_u76EE"><a href="#1-ubuntu_u4E0A_u90E8_u7F72php_u9879_u76EE" class="headerlink" title="1.ubuntu上部署php项目"></a>1.ubuntu上部署php项目</h2><p>安装php<br>安装tomcat<br>使用quercus支持<br>去官网上下载一个<a href="http://quercus.caucho.com/，是war格式的，放到tomcat的webapps目录下，运行tomcat，会在当前目录下生成一个名字一样的项目，把php文件放进去就可以了，和管理普通jsp项目一样，简单方便！" target="_blank" rel="external">http://quercus.caucho.com/，是war格式的，放到tomcat的webapps目录下，运行tomcat，会在当前目录下生成一个名字一样的项目，把php文件放进去就可以了，和管理普通jsp项目一样，简单方便！</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要内容：PHP<br>]]>
    
    </summary>
    
      <category term="PHP" scheme="http://www.bestzhangjin.com/tags/PHP/"/>
    
      <category term="PHP" scheme="http://www.bestzhangjin.com/categories/PHP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[传感器与外部设备]]></title>
    <link href="http://www.bestzhangjin.com/2016/07/09/chuanganqi/"/>
    <id>http://www.bestzhangjin.com/2016/07/09/chuanganqi/</id>
    <published>2016-07-09T11:18:00.000Z</published>
    <updated>2017-10-11T13:40:53.538Z</updated>
    <content type="html"><![CDATA[<p>主要内容： 传感器<br><a id="more"></a></p>
<h1 id="1-_u57FA_u672C_u5143_u5668_u4EF6"><a href="#1-_u57FA_u672C_u5143_u5668_u4EF6" class="headerlink" title="1.基本元器件"></a>1.基本元器件</h1><h2 id="281_29_u7535_u963B"><a href="#281_29_u7535_u963B" class="headerlink" title="(1)电阻"></a>(1)电阻</h2><p>阻值读取<br><img src="/img/chuanganqi/1.png" alt="image"><br><img src="/img/chuanganqi/2.png" alt="image"></p>
<h1 id="2-_u6E29_u6E7F_u5EA6_u4F20_u611F_u5668DHT11"><a href="#2-_u6E29_u6E7F_u5EA6_u4F20_u611F_u5668DHT11" class="headerlink" title="2.温湿度传感器DHT11"></a>2.温湿度传感器DHT11</h1><p>DHT11是一款有已校准数字信号输出的温湿度传感器。 精度湿度+-5%RH， 温度+-2℃，量程湿度20-90%RH， 温度0~50℃。<br>封装信息如下：<br><img src="/img/chuanganqi/3.jpg" alt="image"><br>引脚说明如下：<br><img src="/img/chuanganqi/4.png" alt="image"><br>DATA信号线材质量会影响通讯距离和通讯质量,推荐使用高质量屏蔽线。焊接信息手动焊接，在最高260℃的温度条件下接触时间须少于10秒。<br>注意事项<br>(1)避免结露情况下使用。<br>(2)长期保存条件：温度10－40℃，湿度60%以下<br>详情见DHT11中文说明书</p>
<p>实例程序：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//****************************************************************//</span></span><br><span class="line"><span class="comment">// DHT21使用范例</span></span><br><span class="line"><span class="comment">//单片机 ： AT89S52 或 STC89C52RC</span></span><br><span class="line"><span class="comment">// 功能 ：串口发送温湿度数据 波特率 9600</span></span><br><span class="line"><span class="comment">//硬件连接： P2.0口为通讯口连接DHT11,DHT11的电源和地连接单片机的电源和地，单片机串口加MAX232连接电脑</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;reg51.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;intrins.h&gt;</span></span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> U8; <span class="comment">/* defined for unsigned 8-bits integer variable 无符号8位整型变量 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">char</span> S8; <span class="comment">/* defined for signed 8-bits integer variable 有符号8位整型变量 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> U16; <span class="comment">/* defined for unsigned 16-bits integer variable 无符号16位整型变量 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">int</span> S16; <span class="comment">/* defined for signed 16-bits integer variable 有符号16位整型变量 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> U32; <span class="comment">/* defined for unsigned 32-bits integer variable 无符号32位整型变量 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">long</span> S32; <span class="comment">/* defined for signed 32-bits integer variable 有符号32位整型变量 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> F32; <span class="comment">/* single precision floating point variable (32bits) 单精度浮点数（32位长度） */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> F64; <span class="comment">/* double precision floating point variable (64bits) 双精度浮点数（64位长度） */</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> uchar unsigned char</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> uint unsigned int</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> Data_0_time <span class="number">4</span></span></span><br><span class="line"><span class="comment">//--------------- --------------------//</span></span><br><span class="line"><span class="comment">//----------------IO口定义区--------------------//</span></span><br><span class="line"><span class="comment">//-------------- --------------------------//</span></span><br><span class="line">sbit P2_0 = P2^<span class="number">0</span> ;<span class="comment">//DATA</span></span><br><span class="line">sbit P2_1 = P2^<span class="number">1</span> ;</span><br><span class="line">sbit P2_2 = P2^<span class="number">2</span> ;</span><br><span class="line">sbit P2_3 = P2^<span class="number">3</span> ;</span><br><span class="line"><span class="comment">//--------- ------------------------------------//</span></span><br><span class="line"><span class="comment">//----------------定义区--------------------//</span></span><br><span class="line"><span class="comment">//--------------------- -----------------------//</span></span><br><span class="line">U8 U8FLAG,k;</span><br><span class="line">U8 U8count,U8temp;</span><br><span class="line">U8 U8T_data_H,U8T_data_L,U8RH_data_H,U8RH_data_L,U8checkdata;</span><br><span class="line">U8 U8T_data_H_temp,U8T_data_L_temp,U8RH_data_H_temp,U8RH_data_L_temp,U8checkdata_temp;</span><br><span class="line">U8 U8comdata;</span><br><span class="line">U8 outdata[<span class="number">5</span>]; <span class="comment">//定义发送的字节数</span></span><br><span class="line">U8 indata[<span class="number">5</span>];</span><br><span class="line">U8 count, count_r=<span class="number">0</span>;</span><br><span class="line">U8 str[<span class="number">5</span>]=&#123;<span class="string">"RS232"</span>&#125;;</span><br><span class="line">U16 U16temp1,U16temp2;</span><br><span class="line">SendData(U8 *a)</span><br><span class="line">&#123;</span><br><span class="line">outdata[<span class="number">0</span>] = a[<span class="number">0</span>];</span><br><span class="line">outdata[<span class="number">1</span>] = a[<span class="number">1</span>];</span><br><span class="line">outdata[<span class="number">2</span>] = a[<span class="number">2</span>];</span><br><span class="line">outdata[<span class="number">3</span>] = a[<span class="number">3</span>];</span><br><span class="line">outdata[<span class="number">4</span>] = a[<span class="number">4</span>];</span><br><span class="line">count = <span class="number">1</span>;</span><br><span class="line">SBUF=outdata[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(U16 j)</span></span><br><span class="line"></span>&#123; U8 i;</span><br><span class="line"><span class="keyword">for</span>(;j&gt;<span class="number">0</span>;j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">27</span>;i++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay_10us</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">U8 i;</span><br><span class="line">i--;</span><br><span class="line">i--;</span><br><span class="line">i--;</span><br><span class="line">i--;</span><br><span class="line">i--;</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">COM</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">U8 i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">U8FLAG=<span class="number">2</span>;</span><br><span class="line"><span class="comment">//----------------------</span></span><br><span class="line">P2_1=<span class="number">0</span> ; <span class="comment">//T</span></span><br><span class="line">P2_1=<span class="number">1</span> ; <span class="comment">//T</span></span><br><span class="line"><span class="comment">//----------------------</span></span><br><span class="line"><span class="keyword">while</span>((!P2_0)&amp;&amp;U8FLAG++);</span><br><span class="line">Delay_10us();</span><br><span class="line">Delay_10us();</span><br><span class="line"><span class="comment">// Delay_10us();</span></span><br><span class="line">U8temp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(P2_0)U8temp=<span class="number">1</span>;</span><br><span class="line">U8FLAG=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>((P2_0)&amp;&amp;U8FLAG++);</span><br><span class="line"><span class="comment">//----------------------</span></span><br><span class="line">P2_1=<span class="number">0</span> ; <span class="comment">//T</span></span><br><span class="line">P2_1=<span class="number">1</span> ; <span class="comment">//T</span></span><br><span class="line"><span class="comment">//----------------------</span></span><br><span class="line"><span class="comment">//超时则跳出for循环</span></span><br><span class="line"><span class="keyword">if</span>(U8FLAG==<span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//判断数据位是0还是1</span></span><br><span class="line"><span class="comment">// 如果高电平高过预定0高电平值则数据位为 1</span></span><br><span class="line">U8comdata&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">U8comdata|=U8temp; <span class="comment">//0</span></span><br><span class="line">&#125;<span class="comment">//rof</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------  --------------------</span></span><br><span class="line"><span class="comment">//-----湿度读取子程序 ------------</span></span><br><span class="line"><span class="comment">//----------------------  ----------</span></span><br><span class="line"><span class="comment">//----以下变量均为全局变量--------</span></span><br><span class="line"><span class="comment">//----温度高8位== U8T_data_H------</span></span><br><span class="line"><span class="comment">//----温度低8位== U8T_data_L------</span></span><br><span class="line"><span class="comment">//----湿度高8位== U8RH_data_H-----</span></span><br><span class="line"><span class="comment">//----湿度低8位== U8RH_data_L-----</span></span><br><span class="line"><span class="comment">//----校验 8位 == U8checkdata-----</span></span><br><span class="line"><span class="comment">//----调用相关子程序如下----------</span></span><br><span class="line"><span class="comment">//---- Delay();, Delay_10us();COM();</span></span><br><span class="line"><span class="comment">//---------------------    -----------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RH</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line"><span class="comment">//主机拉低18ms</span></span><br><span class="line">P2_0=<span class="number">0</span>;</span><br><span class="line">Delay(<span class="number">180</span>);</span><br><span class="line">P2_0=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//总线由上拉电阻拉高 主机延时20us</span></span><br><span class="line">Delay_10us();</span><br><span class="line">Delay_10us();</span><br><span class="line">Delay_10us();</span><br><span class="line">Delay_10us();</span><br><span class="line"><span class="comment">//主机设为输入 判断从机响应信号</span></span><br><span class="line">P2_0=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//判断从机是否有低电平响应信号 如不响应则跳出，响应则向下运行</span></span><br><span class="line"><span class="keyword">if</span>(!P2_0) <span class="comment">//T !</span></span><br><span class="line">&#123;</span><br><span class="line">U8FLAG=<span class="number">2</span>;</span><br><span class="line"><span class="comment">//判断从机是否发出 80us 的低电平响应信号是否结束</span></span><br><span class="line"><span class="keyword">while</span>((!P2_0)&amp;&amp;U8FLAG++);</span><br><span class="line">U8FLAG=<span class="number">2</span>;</span><br><span class="line"><span class="comment">//判断从机是否发出 80us 的高电平，如发出则进入数据接收状态</span></span><br><span class="line"><span class="keyword">while</span>((P2_0)&amp;&amp;U8FLAG++);</span><br><span class="line"><span class="comment">//数据接收状态</span></span><br><span class="line">COM();</span><br><span class="line">U8RH_data_H_temp=U8comdata;</span><br><span class="line">COM();</span><br><span class="line">U8RH_data_L_temp=U8comdata;</span><br><span class="line">COM();</span><br><span class="line">U8T_data_H_temp=U8comdata;</span><br><span class="line">COM();</span><br><span class="line">U8T_data_L_temp=U8comdata;</span><br><span class="line">COM();</span><br><span class="line">U8checkdata_temp=U8comdata;</span><br><span class="line">P2_0=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//数据校验</span></span><br><span class="line">U8temp=(U8T_data_H_temp+U8T_data_L_temp+U8RH_data_H_temp+U8RH_data_L_temp);</span><br><span class="line"><span class="keyword">if</span>(U8temp==U8checkdata_temp)</span><br><span class="line">&#123;</span><br><span class="line">U8RH_data_H=U8RH_data_H_temp;</span><br><span class="line">U8RH_data_L=U8RH_data_L_temp;</span><br><span class="line">U8T_data_H=U8T_data_H_temp;</span><br><span class="line">U8T_data_L=U8T_data_L_temp;</span><br><span class="line">U8checkdata=U8checkdata_temp;</span><br><span class="line">&#125;<span class="comment">//fi</span></span><br><span class="line">&#125;<span class="comment">//fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------</span></span><br><span class="line"><span class="comment">//main()功能描述: AT89C51 11.0592MHz 串口发</span></span><br><span class="line"><span class="comment">//送温湿度数据,波特率 9600</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">U8 i,j;</span><br><span class="line"><span class="comment">//uchar str[6]=&#123;"RS232"&#125;;</span></span><br><span class="line"><span class="comment">/* 系统初始化 */</span></span><br><span class="line">TMOD = <span class="number">0x20</span>; <span class="comment">//定时器T1使用工作方式2</span></span><br><span class="line">TH1 = <span class="number">253</span>; <span class="comment">// 设置初值</span></span><br><span class="line">TL1 = <span class="number">253</span>;</span><br><span class="line">TR1 = <span class="number">1</span>; <span class="comment">// 开始计时</span></span><br><span class="line">SCON = <span class="number">0x50</span>; <span class="comment">//工作方式1，波特率9600bps，允许接收</span></span><br><span class="line">ES = <span class="number">1</span>;</span><br><span class="line">EA = <span class="number">1</span>; <span class="comment">// 打开所以中断</span></span><br><span class="line">TI = <span class="number">0</span>;</span><br><span class="line">RI = <span class="number">0</span>;</span><br><span class="line">SendData(str) ; <span class="comment">//发送到串口</span></span><br><span class="line">Delay(<span class="number">1</span>); <span class="comment">//延时100US（12M晶振)</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//------------------------</span></span><br><span class="line"><span class="comment">//调用温湿度读取子程序</span></span><br><span class="line">RH();</span><br><span class="line"><span class="comment">//串口显示程序</span></span><br><span class="line"><span class="comment">//--------------------------</span></span><br><span class="line">str[<span class="number">0</span>]=U8RH_data_H;</span><br><span class="line">str[<span class="number">1</span>]=U8RH_data_L;</span><br><span class="line">str[<span class="number">2</span>]=U8T_data_H;</span><br><span class="line">str[<span class="number">3</span>]=U8T_data_L;</span><br><span class="line">str[<span class="number">4</span>]=U8checkdata;</span><br><span class="line">SendData(str) ; <span class="comment">//发送到串口</span></span><br><span class="line"><span class="comment">//读取模块数据周期不易小于 2S</span></span><br><span class="line">Delay(<span class="number">20000</span>);</span><br><span class="line">&#125;<span class="comment">//elihw</span></span><br><span class="line">&#125;<span class="comment">// main</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RSINTR</span><span class="params">()</span> interrupt 4 <span class="keyword">using</span> 2</span><br><span class="line"></span>&#123;</span><br><span class="line">U8 InPut3;</span><br><span class="line"><span class="keyword">if</span>(TI==<span class="number">1</span>) <span class="comment">//发送中断</span></span><br><span class="line">&#123;</span><br><span class="line">TI=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(count!=<span class="number">5</span>) <span class="comment">//发送完5位数据</span></span><br><span class="line">&#123;</span><br><span class="line">SBUF= outdata[count];</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(RI==<span class="number">1</span>) <span class="comment">//接收中断</span></span><br><span class="line">&#123;</span><br><span class="line">InPut3=SBUF;</span><br><span class="line">indata[count_r]=InPut3;</span><br><span class="line">count_r++;</span><br><span class="line">RI=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (count_r==<span class="number">5</span>)<span class="comment">//接收完4位数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//数据接收完毕处理。</span></span><br><span class="line">count_r=<span class="number">0</span>;</span><br><span class="line">str[<span class="number">0</span>]=indata[<span class="number">0</span>];</span><br><span class="line">str[<span class="number">1</span>]=indata[<span class="number">1</span>];</span><br><span class="line">str[<span class="number">2</span>]=indata[<span class="number">2</span>];</span><br><span class="line">str[<span class="number">3</span>]=indata[<span class="number">3</span>];</span><br><span class="line">str[<span class="number">4</span>]=indata[<span class="number">4</span>];</span><br><span class="line">P0=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要内容： 传感器<br>]]>
    
    </summary>
    
      <category term="传感器" scheme="http://www.bestzhangjin.com/tags/%E4%BC%A0%E6%84%9F%E5%99%A8/"/>
    
      <category term="硬件" scheme="http://www.bestzhangjin.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ardunio]]></title>
    <link href="http://www.bestzhangjin.com/2016/07/06/Ardunio/"/>
    <id>http://www.bestzhangjin.com/2016/07/06/Ardunio/</id>
    <published>2016-07-06T08:28:00.000Z</published>
    <updated>2017-10-11T13:41:17.510Z</updated>
    <content type="html"><![CDATA[<p>主要内容： Ardunio<br><a id="more"></a></p>
<h1 id="u7B2C_u4E00_u7AE0_Ardunio_u73AF_u5883_u642D_u5EFA"><a href="#u7B2C_u4E00_u7AE0_Ardunio_u73AF_u5883_u642D_u5EFA" class="headerlink" title="第一章 Ardunio环境搭建"></a>第一章 Ardunio环境搭建</h1><h2 id="1-Ardunio_u4ECB_u7ECD"><a href="#1-Ardunio_u4ECB_u7ECD" class="headerlink" title="1.Ardunio介绍"></a>1.Ardunio介绍</h2><p>Ardunio是一块单板的微控制器和一整套的开发软件，它的硬件包含一个以AVR单片机为核心的开发板和其他各种I/O板；软件包含一个标准编程语言开发环境和在开发板上运行的烧录程序。Ardunio主要为业余爱好者设计，所以被设计成小型计算机形式。</p>
<h2 id="2-_u73AF_u5883_u642D_u5EFA"><a href="#2-_u73AF_u5883_u642D_u5EFA" class="headerlink" title="2.环境搭建"></a>2.环境搭建</h2><p>首先到淘宝上购买一块Ardunio（可以只要一块主板，需要其他拓展版的时候再购买），主板如下：<br><img src="/img/arduino/1.png" alt="image"><br>Ardunio IDE下载：网上比较多，可以到官网或者其他网站上下载一个免安装压缩包直接解压就可以用。<br>软件界面如下：<br><img src="/img/arduino/2.png" alt="image"><br>图中标志勾代表编译，标志左箭头代表烧录程序。烧录程序前先要保证工具-&gt;端口 选中其中的com端口号；<br>打开时默认只有setup()和loop()函数，setup()函数里面的内容只执行一次，loop()中的内容无限循环的执行。<br>在工具-&gt;串口监视器中可以查看串口输出。</p>
<h1 id="u7B2C_u4E8C_u7AE0__u7B80_u5355Led_u529F_u80FD"><a href="#u7B2C_u4E8C_u7AE0__u7B80_u5355Led_u529F_u80FD" class="headerlink" title="第二章 简单Led功能"></a>第二章 简单Led功能</h1><h2 id="1-Led_u95EA_u70C1"><a href="#1-Led_u95EA_u70C1" class="headerlink" title="1.Led闪烁"></a>1.Led闪烁</h2><p>电路连接：从ardunio的10引脚连接到Led的正极，<br>程序如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> led=<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  pinMode(led,OUTPUT);<span class="comment">//将IO口设置为输出模式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  digitalWrite(led,HIGH);<span class="comment">//led引脚电平拉高</span></span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">  digitalWrite(led,LOW);<span class="comment">//led电平拉低</span></span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-Led_u6548_u679C_u706F"><a href="#2-Led_u6548_u679C_u706F" class="headerlink" title="2.Led效果灯"></a>2.Led效果灯</h2><p>(1)Led跑马灯<br>实现led灯从左到右再从右到左循环；<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">byte ledPin[]=&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;<span class="comment">//也可以先声明大小byte ledPin[6]，再初始化</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ledDelay</span><span class="params">(<span class="number">65</span>)</span></span>;<span class="comment">//int ledDelay=65;</span></span><br><span class="line"><span class="keyword">int</span> direction=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> currentLED=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> changeTime;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;<span class="number">6</span>;x++)&#123;</span><br><span class="line">    pinMode(ledPin[x],OUTPUT);</span><br><span class="line">  &#125;</span><br><span class="line">  changeTime=millis();<span class="comment">//记录当前时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>((millis()-changeTime)&gt;ledDelay)&#123;</span><br><span class="line">    changeLED();</span><br><span class="line">    changeTime=millis();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeLED</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;<span class="number">6</span>;x++)&#123;</span><br><span class="line">    digitalWrite(ledPin[x],LOW);<span class="comment">//关闭所有LED</span></span><br><span class="line">  &#125;</span><br><span class="line">  digitalWrite(ledPin[currentLED],HIGH);</span><br><span class="line">  currentLED+=direction;</span><br><span class="line">  <span class="keyword">if</span>(currentLED==<span class="number">5</span>)&#123;direction=-<span class="number">1</span>;&#125;<span class="comment">//达到最右边时开始向左走</span></span><br><span class="line">  <span class="keyword">if</span>(currentLED==<span class="number">0</span>)&#123;direction=<span class="number">1</span>;&#125;<span class="comment">//达到最左边时开始向右走</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>(2)控制跑马灯的速度<br>和上面的电路和程序基本一样，只需要在一个端口上连接一个电位计(如4.7K欧姆旋转电位计)，通过ledDelay=analogRead(potPin);//其中potPin为电位计的输入引脚，就可以读到一个0-1023之间的整数值，每个分度5V/1024=4.9mV.<br>代码和上面一样，只需要在loop()里面加上ledDelay=analogRead(potPin);即可通过电位计旋转控制跑马灯的跑动速度。</p>
<p>(3)通过PWM功能实现led的亮度变化<br>analogWrite(ledPin,ledVal); //ledPin是单片机的输出接口，ledVal是0到255之间的一个值，通过调节ledVal可以调节输出占空比，从而调节接口对于led的亮度。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要内容： Ardunio<br>]]>
    
    </summary>
    
      <category term="Ardunio" scheme="http://www.bestzhangjin.com/tags/Ardunio/"/>
    
      <category term="硬件" scheme="http://www.bestzhangjin.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python]]></title>
    <link href="http://www.bestzhangjin.com/2016/06/15/python/"/>
    <id>http://www.bestzhangjin.com/2016/06/15/python/</id>
    <published>2016-06-15T12:36:00.000Z</published>
    <updated>2016-07-14T07:05:13.525Z</updated>
    <content type="html"><![CDATA[<p>主要内容：Python<br><a id="more"></a></p>
<h1 id="u7B2C_u4E00_u7AE0__u73AF_u5883_u642D_u5EFA"><a href="#u7B2C_u4E00_u7AE0__u73AF_u5883_u642D_u5EFA" class="headerlink" title="第一章 环境搭建"></a>第一章 环境搭建</h1><p>python有2.x和3.x之分，2.x运行速度较快，3.x功能更多，2.x开发程序更多，这里用2.x。<br>python以及开发工具PyCharm下载地址如下：<br>官网下载：<a href="https://www.python.org/downloads/" target="_blank" rel="external">https://www.python.org/downloads/</a> 注意：分64位和32位<br>官网下载：<a href="http://www.jetbrains.com/pycharm/download/#section=windows" target="_blank" rel="external">http://www.jetbrains.com/pycharm/download/#section=windows</a><br>具体安装步骤自己百度</p>
<h1 id="u7B2C_u4E8C_u7AE0__u57FA_u672C_u77E5_u8BC6"><a href="#u7B2C_u4E8C_u7AE0__u57FA_u672C_u77E5_u8BC6" class="headerlink" title="第二章 基本知识"></a>第二章 基本知识</h1><h2 id="1-_u53D8_u91CF"><a href="#1-_u53D8_u91CF" class="headerlink" title="1.变量"></a>1.变量</h2><p>python会自动识别变量类型，不用加变量类型<br>如：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line">b=<span class="number">2</span></span><br><span class="line"><span class="built_in">c</span>=a+b</span><br><span class="line"><span class="built_in">print</span> <span class="string">"c="</span>,<span class="built_in">c</span></span><br></pre></td></tr></table></figure></p>
<p>就可以得到c= 3</p>
<p>2.判断语句<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-<span class="number">8</span>  #程序中有中文时必须加#coding=utf-<span class="number">8</span> 不然会提示错误</span><br><span class="line"></span><br><span class="line">s=<span class="number">80</span></span><br><span class="line"><span class="keyword">if</span> s&gt;=<span class="number">80</span>: #注意要加冒号 :</span><br><span class="line">    <span class="function"><span class="title">print</span><span class="params">(<span class="string">"很好"</span>)</span></span> #格式必须用tab键缩进</span><br><span class="line">elif s&gt;=<span class="number">60</span>:</span><br><span class="line">    <span class="function"><span class="title">print</span><span class="params">(<span class="string">"及格"</span>)</span></span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="function"><span class="title">print</span><span class="params">(<span class="string">"很差"</span>)</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-_u5FAA_u73AF"><a href="#3-_u5FAA_u73AF" class="headerlink" title="3.循环"></a>3.循环</h2><p>输出0-9<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">range</span>(0,10):</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"out &#123;0&#125;,&#123;1&#125;"</span>.<span class="keyword">format</span>(<span class="string">"hello"</span>,i)); #&#123;0&#125;&#123;1&#125;对应被<span class="string">"hello"</span>,i替换</span><br></pre></td></tr></table></figure></p>
<p>输出结果：<br>out hello,0<br>out hello,1<br>out hello,2<br>out hello,3<br>out hello,4<br>out hello,5<br>out hello,6<br>out hello,7<br>out hello,8<br>out hello,9</p>
<h2 id="4-_u5B9A_u4E49_u51FD_u6570"><a href="#4-_u5B9A_u4E49_u51FD_u6570" class="headerlink" title="4.定义函数"></a>4.定义函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello"</span>) <span class="comment">#缩进部分都属于函数sayHello</span></span><br><span class="line"></span><br><span class="line">sayHello() <span class="comment">#函数调用 不能有缩进，否则认为属于上面函数的一部分</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a&gt;b:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (max(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<p>输出结果：<br>hello<br>2</p>
<h2 id="5-_u7C7B-_u9762_u5411_u5BF9_u8C61"><a href="#5-_u7C7B-_u9762_u5411_u5BF9_u8C61" class="headerlink" title="5.类-面向对象"></a>5.类-面向对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span>  <span class="comment">#构造方法 注意init两边是两杠__</span></span><br><span class="line">        self.name=name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span><span class="params">(self)</span>:</span> <span class="comment">#方法</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"Hello &#123;0&#125;"</span>.format(self.name))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hi</span><span class="params">(Hello)</span>:</span> <span class="comment">#继承自Hello</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        Hello.__init__(self,name)<span class="comment">#继承后需要执行父类构造方法 不然会出错TypeError: __init__() takes exactly2 arguments(1 given)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"Hi &#123;0&#125;"</span>.format(self.name))</span><br><span class="line"></span><br><span class="line">h=Hello(<span class="string">"liming"</span>) <span class="comment">#定义类</span></span><br><span class="line">h.sayHello() <span class="comment">#调用方法</span></span><br><span class="line"></span><br><span class="line">h1=Hi(<span class="string">"xiaohua"</span>)</span><br><span class="line">h1.sayHi()</span><br></pre></td></tr></table></figure>
<p>输出结果:<br>Hello liming<br>Hi xiaohua</p>
<h2 id="6-_u5F15_u5165Python_u6587_u4EF6"><a href="#6-_u5F15_u5165Python_u6587_u4EF6" class="headerlink" title="6.引入Python文件"></a>6.引入Python文件</h2><p>pi.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHello</span><span class="params">(self)</span>:</span>  <span class="comment"># 方法</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"Hello"</span>)</span><br></pre></td></tr></table></figure></p>
<p>my.py<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-<span class="number">8</span></span><br><span class="line">#方法一</span><br><span class="line">import pi</span><br><span class="line">h=pi.<span class="function"><span class="title">Hello</span><span class="params">()</span></span></span><br><span class="line">h.<span class="function"><span class="title">sayHello</span><span class="params">()</span></span>#输出Hello</span><br><span class="line"></span><br><span class="line">#方法二</span><br><span class="line">from pi import Hello</span><br><span class="line">h=<span class="function"><span class="title">Hello</span><span class="params">()</span></span></span><br><span class="line">h.<span class="function"><span class="title">sayHello</span><span class="params">()</span></span>#输出Hello</span><br></pre></td></tr></table></figure></p>
<h1 id="u7B2C_u4E09_u7AE0_Python_u8BED_u8A00Web_u5F00_u53D1_u6846_u67B6web2py"><a href="#u7B2C_u4E09_u7AE0_Python_u8BED_u8A00Web_u5F00_u53D1_u6846_u67B6web2py" class="headerlink" title="第三章 Python语言Web开发框架web2py"></a>第三章 Python语言Web开发框架web2py</h1><h2 id="1-_u521B_u5EFAweb2py_u9879_u76EE"><a href="#1-_u521B_u5EFAweb2py_u9879_u76EE" class="headerlink" title="1.创建web2py项目"></a>1.创建web2py项目</h2><p>创建如下<br><img src="/img/python/1.png" alt="image"><br>没有选择local的话会下载文件<br>当然也可以在<a href="http://web2py.com/init/default/download选择source" target="_blank" rel="external">http://web2py.com/init/default/download选择source</a> code下载之后，以后选择local<br>创建好如下：<br><img src="/img/python/2.png" alt="image"><br>可以直接点击运行如下：<br><img src="/img/python/3.png" alt="image"><br>端口用默认的8000，密码自己输入一个，这里输入123456，点击start server如下：<br><img src="/img/python/4.png" alt="image"></p>
<p>如果在创建的时候application name填写main则可以管理如下：<br><img src="/img/python/5.png" alt="image"><br>点击admin<br><img src="/img/python/6.png" alt="image"><br>密码和刚进入时设置的一样<br>登录后可以管理如下<br><img src="/img/python/7.png" alt="image"></p>
<h2 id="2-_u5904_u7406_u9759_u6001_u6587_u4EF6"><a href="#2-_u5904_u7406_u9759_u6001_u6587_u4EF6" class="headerlink" title="2.处理静态文件"></a>2.处理静态文件</h2><p>可以直接输入static里面的地址访问内容，如下：<br><img src="/img/python/8.png" alt="image"></p>
<h2 id="3-_u7F16_u5199_u63A7_u5236_u5668"><a href="#3-_u7F16_u5199_u63A7_u5236_u5668" class="headerlink" title="3.编写控制器"></a>3.编写控制器</h2><p>在controllers（控制）目录下可以新建python文件<br><img src="/img/python/9.png" alt="image"><br>新建一个hello.py访问:直接新建文件写上代码就可以访问，不用自己重新部署，会自动实时部署<br><img src="/img/python/10.png" alt="image"><br>可以直接访问方法，不写方法默认访问index方法<br><img src="/img/python/11.png" alt="image"></p>
<h1 id="u7B2C_u56DB_u7AE0_Python__u521D_u8BC6"><a href="#u7B2C_u56DB_u7AE0_Python__u521D_u8BC6" class="headerlink" title="第四章 Python 初识"></a>第四章 Python 初识</h1><h2 id="1-python_u7279_u70B9"><a href="#1-python_u7279_u70B9" class="headerlink" title="1.python特点"></a>1.python特点</h2><p>大小写严格区分。简单、支持面向对象，开源、库丰富（如邮件标准库可以实现邮件功能）,跨平台使用，解释性语言（区别于C++等编译性语言 直接通过解释器执行），高级语言。</p>
<h2 id="2-cmd_u4E0B_u7F16_u5199"><a href="#2-cmd_u4E0B_u7F16_u5199" class="headerlink" title="2.cmd下编写"></a>2.cmd下编写</h2><p><img src="/img/python/12.png" alt="image"><br>cmd下运行python文件<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> xxx.<span class="keyword">py</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-Python__u8BED_u6CD5_u57FA_u7840"><a href="#3-Python__u8BED_u6CD5_u57FA_u7840" class="headerlink" title="3.Python 语法基础"></a>3.Python 语法基础</h2><p>(1)常量与变量<br>常量不可以更改<br>常量是指一旦初始化后就不能修改的固定值。c++中使用const保留字指定常量，而Python并没有定义常量的保留字。但是python是一门功能强大的语言，可以自己定义一个常量类来实现常量的功能。<br>新建const.py放python安装目录下的Lib目录下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*- </span></span><br><span class="line"><span class="comment"># Filename: const.py </span></span><br><span class="line"><span class="comment"># 定义一个常量类实现常量的功能 </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 该类定义了一个方法__setattr()__，和一个异常ConstError, ConstError类继承 </span></span><br><span class="line"><span class="comment"># 自类TypeError. 通过调用类自带的字典__dict__, 判断定义的常量是否包含在字典 </span></span><br><span class="line"><span class="comment"># 中。如果字典中包含此变量，将抛出异常，否则，给新创建的常量赋值。 </span></span><br><span class="line"><span class="comment"># 最后两行代码的作用是把const类注册到sys.modules这个全局字典中。 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_const</span>:</span> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ConstError</span><span class="params">(TypeError)</span>:</span><span class="keyword">pass</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span> </span><br><span class="line">        <span class="keyword">if</span> self.__dict__.has_key(name): </span><br><span class="line">            <span class="keyword">raise</span> self.ConstError, <span class="string">"Can't rebind const (%s)"</span> %name </span><br><span class="line">        self.__dict__[name]=value </span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line">sys.modules[__name__] = _const()</span><br></pre></td></tr></table></figure></p>
<p>test.py引入const定义常量，重复赋值常量则会出错<br><img src="/img/python/13.png" alt="image"></p>
<p>变量可以更改 如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">1</span></span><br><span class="line">i=<span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<p>(2)数与字符串<br>数类型:有符号型(int),长整型(long),浮点型(float),布尔型(bool),复数型(complex)。<br><img src="/img/python/14.png" alt="image"></p>
<p>字符串:用引号包含的字符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line">a=<span class="string">'hello'</span><span class="comment">#单引号</span></span><br><span class="line"><span class="built_in">print</span> a</span><br><span class="line">b=<span class="string">'It is a "boy" '</span></span><br><span class="line"><span class="built_in">print</span> b</span><br><span class="line">c=<span class="string">"It's a gril"</span></span><br><span class="line"><span class="built_in">print</span> c</span><br></pre></td></tr></table></figure></p>
<p>运行结果:<br>hello<br>It is a “boy”<br>It’s a gril</p>
<p>##单引号和双引号可以交叉使用，但是单引号中不能使用单引号，双引号中不能使用双引号</p>
<p>三引号:三个单引号或者三个双引号<br>三引号中的字符串是可以换行的，但是单引号或者双引号中是不可以换行的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#三引号 '''也可以用"""但是前后必须一致</span></span><br><span class="line">a=<span class="string">'''my</span><br><span class="line">you</span><br><span class="line">he</span><br><span class="line">she</span><br><span class="line">'''</span></span><br><span class="line"><span class="keyword">print</span> a</span><br></pre></td></tr></table></figure></p>
<p>输出：<br>my<br>you<br>he<br>she</p>
<p>转义符 \<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">'It\'s a boy'</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">"my\nyou"</span></span><br></pre></td></tr></table></figure></p>
<p>输出:<br>It’s a boy<br>my<br>you</p>
<p>自然字符串:如果一串字符串有转义符，也要按原样保留，可以用自然字符串，即在字符串前加上r<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'It\'s a boy'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">r"my\nyou"</span></span><br></pre></td></tr></table></figure></p>
<p>输出:<br>It’s a boy<br>my\nyou</p>
<p>字符串的重复，可以使用重复字符串，如将hello重复5次<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">a</span>=<span class="string">"hello\n"</span>*<span class="number">5</span></span><br><span class="line">print <span class="literal">a</span></span><br></pre></td></tr></table></figure></p>
<p>输出:<br>hello<br>hello<br>hello<br>hello<br>hello</p>
<p>子字符串:如”HelloWorld”中”He”,”Hello”,”World”等都是”HelloWorld”的子字符串，可以进行子字符串运输找出一个字符串中子字符串。<br>方法一：索引运算符[]<br>方法二：切片运算符[:]<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#coding=utf-<span class="number">8</span></span></span><br><span class="line"></span><br><span class="line">a=<span class="string">"HelloWorld"</span></span><br><span class="line"><span class="preprocessor">#索引运算从<span class="number">0</span>开始 返回下标对应的那个字符</span></span><br><span class="line">a1=a[<span class="number">0</span>]</span><br><span class="line">print a1</span><br><span class="line"><span class="preprocessor">#切片运算符[a:b]从第a下标开始到第b-<span class="number">1</span>下标，第一个下标为<span class="number">0</span></span></span><br><span class="line">a2=a[:<span class="number">2</span>]</span><br><span class="line">print a2</span><br><span class="line">a3=a[<span class="number">2</span>:]</span><br><span class="line">print a3</span><br><span class="line">a4=a[<span class="number">2</span>:<span class="number">6</span>]</span><br><span class="line">print a4</span><br></pre></td></tr></table></figure></p>
<p>输出:<br>H<br>He<br>lloWorld<br>lloW</p>
<p>(3).数据类型<br>python中没有数组，跟数组最接近的是列表和元组<br>列表：用来储存一连串元素的容器，用[]表示，元素内容可以修改<br>元组:元组用()表示，元素内容只能读取，不能修改<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#<span class="atom">coding</span>=<span class="atom">utf</span>-<span class="number">8</span></span><br><span class="line">#列表</span><br><span class="line"><span class="atom">stu</span>=[<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span>] #下标从<span class="number">0</span>开始</span><br><span class="line"><span class="atom">print</span> <span class="atom">stu</span>[<span class="number">2</span>]</span><br><span class="line"><span class="atom">stu</span>[<span class="number">2</span>]=<span class="string">"小明"</span></span><br><span class="line"><span class="atom">print</span> <span class="atom">stu</span>[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="atom">stu1</span>=(<span class="string">"张三"</span>,<span class="string">"李四"</span>,<span class="string">"王五"</span>)</span><br><span class="line"><span class="atom">print</span> <span class="atom">stu1</span>[<span class="number">2</span>]</span><br><span class="line">#<span class="atom">stu1</span>[<span class="number">2</span>]=<span class="string">"小明"</span>  #<span class="name">TypeError</span>: <span class="string">'tuple'</span> <span class="atom">object</span> <span class="atom">does</span> <span class="atom">not</span> <span class="atom">support</span> <span class="atom">item</span> <span class="atom">assignment</span></span><br></pre></td></tr></table></figure></p>
<p>输出：<br>王五<br>小明<br>王五</p>
<p>集合：格式set(元素) 功能：建立关系，消除重复元素<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#coding=utf-8</span></span><br><span class="line"><span class="preprocessor">#集合</span></span><br><span class="line">a=<span class="keyword">set</span>(<span class="string">"abcdaaafg"</span>) #<span class="keyword">set</span>([<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'g'</span>, <span class="string">'f'</span>])</span><br><span class="line">b=<span class="keyword">set</span>(<span class="string">"cderr"</span>)</span><br><span class="line"><span class="preprocessor">#交集</span></span><br><span class="line">x=a&amp;b #<span class="keyword">set</span>([<span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="preprocessor">#并集</span></span><br><span class="line">y=a|b #<span class="keyword">set</span>([<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'e'</span>, <span class="string">'d'</span>, <span class="string">'g'</span>, <span class="string">'f'</span>, <span class="string">'r'</span>])</span><br><span class="line"><span class="preprocessor">#差集</span></span><br><span class="line">z=a-b #<span class="keyword">set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'g'</span>, <span class="string">'f'</span>])</span><br><span class="line"><span class="preprocessor">#去除重复元素</span></span><br><span class="line"><span class="keyword">new</span>=<span class="keyword">set</span>(a) #<span class="keyword">set</span>([<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'g'</span>, <span class="string">'f'</span>])</span><br><span class="line">print a,x,y,z,<span class="keyword">new</span></span><br></pre></td></tr></table></figure></p>
<p>输出：<br>set([‘a’, ‘c’, ‘b’, ‘d’, ‘g’, ‘f’]) set([‘c’, ‘d’]) set([‘a’, ‘c’, ‘b’, ‘e’, ‘d’, ‘g’, ‘f’, ‘r’]) set([‘a’, ‘b’, ‘g’, ‘f’]) set([‘a’, ‘c’, ‘b’, ‘d’, ‘g’, ‘f’])</p>
<p>字典:也叫关联数组，用{}括起来如a={‘name’:’小明’,’home’:’北京’,’like’:’音乐’}<br>每个元素分为两部分。冒号左边为项目名称，右边为其值<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#字典  ''也可以用""替换</span></span><br><span class="line"><span class="operator">a</span>=&#123;<span class="string">'姓名'</span>:<span class="string">'小明'</span>,<span class="string">'家乡'</span>:<span class="string">'北京'</span>,<span class="string">'爱好'</span>:<span class="string">'音乐'</span>&#125;</span><br><span class="line">print <span class="operator">a</span>[<span class="string">'姓名'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加数据</span></span><br><span class="line"><span class="operator">a</span>[<span class="string">'QQ'</span>]=<span class="string">"123456"</span></span><br><span class="line">print <span class="operator">a</span>[<span class="string">"QQ"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#改数据</span></span><br><span class="line"><span class="operator">a</span>[<span class="string">'家乡'</span>]=<span class="string">'重庆'</span></span><br><span class="line">print <span class="operator">a</span>[<span class="string">'家乡'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#a.clear()#删除 a中所有的条目</span></span><br><span class="line"><span class="comment">#del a#删除整个 dict2 字典</span></span><br><span class="line"><span class="comment">#a.pop('姓名')#删除并返回键为“name”的条目</span></span><br><span class="line"><span class="comment">#print a['姓名']  #KeyError: '\xe5\xa7\x93\xe5\x90\x8d'</span></span><br></pre></td></tr></table></figure></p>
<p>输出:<br>小明<br>123456<br>重庆</p>
<p>(4).标识符<br>编程的时候起的名字统称为标识符<br>命名规则：<br>第一个字符必须只能是字母或者下划线，不能出现数字或者其他字符<br>标识符除第一个字符外，其他部分可以是字母、下划线、数字<br>对大小写敏感，name与Name不同</p>
<p>关键字：系统自带的具备特定含义的标识符，<br>常见有and,elif,global,or,else,pass,break,continue,import,class,return,for,while等</p>
<p>(5).对象<br>一切都是对象，如数字，字符串，元组等都是对象。<br>pickle(腌制):一些对象需要持久性储存，并且不丢失对象的类型与数据，我们则需要对其进行序列化，需要的时候再恢复数据，这种序列化的过程叫pickle.<br>序列化叫pickle腌制，恢复叫反pickle腌制<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-<span class="number">8</span></span><br><span class="line">#pickle腌制</span><br><span class="line"></span><br><span class="line">import pickle</span><br><span class="line"></span><br><span class="line">#<span class="function"><span class="title">dumps</span><span class="params">(object)</span></span>将对象序列化</span><br><span class="line">lista=[<span class="string">"aaa"</span>,<span class="string">"bbb"</span>]</span><br><span class="line">print lista               #[<span class="string">'aaa'</span>, <span class="string">'bbb'</span>]</span><br><span class="line">listb=pickle.<span class="function"><span class="title">dumps</span><span class="params">(lista)</span></span></span><br><span class="line">print listb               #(lp0 S<span class="string">'aaa'</span> p1 aS<span class="string">'bbb'</span> p2 <span class="tag">a</span>.</span><br><span class="line"></span><br><span class="line">#<span class="function"><span class="title">loads</span><span class="params">(string)</span></span>将对象原样恢复,并且对象类型也是恢复为原来的格式</span><br><span class="line">listc=pickle.<span class="function"><span class="title">loads</span><span class="params">(listb)</span></span></span><br><span class="line">print listc              #[<span class="string">'aaa'</span>, <span class="string">'bbb'</span>]</span><br><span class="line"></span><br><span class="line">#<span class="function"><span class="title">dump</span><span class="params">(object,file)</span></span>将对象储存到文件里面序列化</span><br><span class="line">fa=(<span class="string">"google"</span>,<span class="string">"baidu"</span>)</span><br><span class="line">f1=<span class="function"><span class="title">file</span><span class="params">(<span class="string">'1.pkl'</span>,<span class="string">'wb'</span>)</span></span></span><br><span class="line">fa1=pickle.<span class="function"><span class="title">dump</span><span class="params">(fa,f1,True)</span></span></span><br><span class="line">print fa1                      <span class="id">#None</span></span><br><span class="line">f1.<span class="function"><span class="title">close</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">#<span class="function"><span class="title">load</span><span class="params">(object,file)</span></span>将<span class="function"><span class="title">dump</span><span class="params">()</span></span>储存在文件里面的数据恢复</span><br><span class="line">f2=<span class="function"><span class="title">file</span><span class="params">(<span class="string">'1.pkl'</span>,<span class="string">'rb'</span>)</span></span></span><br><span class="line">fb=pickle.<span class="function"><span class="title">load</span><span class="params">(f2)</span></span></span><br><span class="line">print fb                       #(<span class="string">'google'</span>, <span class="string">'baidu'</span>)</span><br><span class="line">f2.<span class="function"><span class="title">close</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p>
<p>(6).行与缩进<br>逻辑行:一段代码在实际意义上的行数<br>物理行:实际看到的行数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一个物理行，三个逻辑行</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"abc"</span>;<span class="keyword">print</span> <span class="string">"def"</span>;<span class="keyword">print</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一个逻辑行，两个物理行</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'''hello</span><br><span class="line">你好</span><br><span class="line">'''</span></span><br></pre></td></tr></table></figure></p>
<p>一个物理行包含多个逻辑行时需要用分号“;”隔开，最后一个可以省略</p>
<p>行连接<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#行连接 \</span></span><br><span class="line">print <span class="string">"我们都是\</span></span><br><span class="line">好孩子<span class="string">"</span></span><br></pre></td></tr></table></figure></p>
<p>输出:<br>我们都是好孩子</p>
<p>缩进:<br>python逻辑行行首的空白是有规定的，逻辑行行首的空白不对就会导致程序出错，这与其他语言不同<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">a</span>=<span class="string">"abc"</span></span><br><span class="line"> print <span class="operator">a</span> <span class="comment">#print前面多了一个空格 出错IndentationError: unexpected indent</span></span><br></pre></td></tr></table></figure></p>
<p>一般情况逻辑行行首不会有空白，但是if,while需要缩进<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#coding=utf-<span class="number">8</span></span></span><br><span class="line"></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> a&gt;<span class="number">0</span>:</span><br><span class="line">    print <span class="string">"a&gt;0"</span> <span class="preprocessor">#缩进一个tab字符或者任意个空格 否则错</span></span><br><span class="line"><span class="preprocessor"># <span class="keyword">if</span> a &gt; <span class="number">0</span>:</span></span><br><span class="line"><span class="preprocessor"># print <span class="string">"a&gt;0"</span>  #错误 IndentationError: expected an indented block</span></span><br><span class="line"><span class="keyword">while</span> a&gt;<span class="number">0</span>:</span><br><span class="line">    print a</span><br><span class="line">    a-=<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>输出：<br>a&gt;0<br>1</p>
<h1 id="u7B2C_u4E94_u7AE0_Python_u6838_u5FC3_u7F16_u7A0B_u57FA_u7840_u6559_u7A0B_u4E4BPython_u8FD0_u7B97_u7B26_u3001_u8FD0_u7B97_u7B26_u4F18_u5148_u7EA7_u3001_u8868_u8FBE_u5F0F_u7B80_u4ECB"><a href="#u7B2C_u4E94_u7AE0_Python_u6838_u5FC3_u7F16_u7A0B_u57FA_u7840_u6559_u7A0B_u4E4BPython_u8FD0_u7B97_u7B26_u3001_u8FD0_u7B97_u7B26_u4F18_u5148_u7EA7_u3001_u8868_u8FBE_u5F0F_u7B80_u4ECB" class="headerlink" title="第五章 Python核心编程基础教程之Python运算符、运算符优先级、表达式简介"></a>第五章 Python核心编程基础教程之Python运算符、运算符优先级、表达式简介</h1><h2 id="1-_u8FD0_u7B97_u7B26"><a href="#1-_u8FD0_u7B97_u7B26" class="headerlink" title="1.运算符"></a>1.运算符</h2><p>常见运算符:+、-、<em>、/、*</em>、&lt;、&gt;、!=、//、%、&amp;、|、^、~、&gt;&gt;、&lt;&lt;、&lt;=、&gt;=、==、not、and、or。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#coding=utf-<span class="number">8</span></span></span><br><span class="line">a=<span class="number">7</span>+<span class="number">8</span> <span class="preprocessor">#<span class="number">15</span></span></span><br><span class="line">b=<span class="string">"Hello"</span>+<span class="string">" World"</span><span class="preprocessor">#Hello+World</span></span><br><span class="line">c = -(-<span class="number">8</span>)<span class="preprocessor">#<span class="number">8</span></span></span><br><span class="line">d=<span class="string">"my"</span>*<span class="number">3</span><span class="preprocessor">#mymymy</span></span><br><span class="line">e=<span class="number">7</span>/<span class="number">2</span><span class="preprocessor">#<span class="number">3</span></span></span><br><span class="line">f=<span class="number">7.0</span>/<span class="number">2</span><span class="preprocessor">#<span class="number">3.5</span></span></span><br><span class="line">g=<span class="number">7</span>/<span class="number">2.0</span><span class="preprocessor">#<span class="number">3.5</span></span></span><br><span class="line">h=<span class="number">2</span>**<span class="number">3</span><span class="preprocessor">#<span class="number">8</span></span></span><br><span class="line">k=<span class="number">3</span>&lt;<span class="number">7</span><span class="preprocessor">#True</span></span><br><span class="line">l=<span class="number">3</span>&lt;<span class="number">3</span><span class="preprocessor">#False</span></span><br><span class="line"></span><br><span class="line">a=<span class="number">2</span>!=<span class="number">3</span><span class="preprocessor">#True</span></span><br><span class="line">b=<span class="number">2</span>!=<span class="number">2</span><span class="preprocessor">#False</span></span><br><span class="line">c=<span class="number">10</span><span class="comment">//3 #返回商的整数部分</span></span><br><span class="line">d=<span class="number">10</span>%<span class="number">3</span><span class="preprocessor">#返回商的余数</span></span><br><span class="line">e=<span class="number">10</span>%<span class="number">1</span><span class="preprocessor">#<span class="number">0</span></span></span><br><span class="line">f=<span class="number">7</span>&amp;<span class="number">18</span><span class="preprocessor">#按位与 <span class="number">2</span> <span class="number">7</span>和<span class="number">18</span>的<span class="number">2</span>进制与为<span class="number">2</span></span></span><br><span class="line">g=<span class="number">7</span>|<span class="number">18</span><span class="preprocessor">#<span class="number">23</span> 按位或</span></span><br><span class="line">h=<span class="number">7</span>^<span class="number">18</span><span class="preprocessor">#按位异或</span></span><br><span class="line">i=~<span class="number">18</span><span class="preprocessor">#按位翻转 #x=-(x+<span class="number">1</span>) ~<span class="number">18</span>=-(<span class="number">18</span>+<span class="number">1</span>)=-<span class="number">19</span></span></span><br><span class="line">j=<span class="number">18</span>&lt;&lt;<span class="number">1</span><span class="preprocessor">#<span class="number">36</span>   #左移n个单位相当于乘以<span class="number">2</span>的n次幂</span></span><br><span class="line">k=<span class="number">2</span>&lt;&lt;<span class="number">1</span><span class="preprocessor">#<span class="number">4</span></span></span><br><span class="line"></span><br><span class="line">a=<span class="number">18</span>&gt;&gt;<span class="number">1</span>  <span class="preprocessor">#<span class="number">9</span> 向右移动n个单位相当于除以<span class="number">2</span>的n次幂</span></span><br><span class="line">b=<span class="number">3</span>&lt;=<span class="number">3</span> <span class="preprocessor">#True</span></span><br><span class="line">c=<span class="number">12</span>==<span class="number">13</span> <span class="preprocessor">#False</span></span><br><span class="line">d=<span class="string">"hello"</span>==<span class="string">"hello"</span><span class="preprocessor">#True</span></span><br><span class="line">e=not d <span class="preprocessor">#False #################  逻辑非 not</span></span><br><span class="line">f=True and True <span class="preprocessor">#True #逻辑与 两个为真才为真 #逻辑与 and</span></span><br><span class="line">g=True or False <span class="preprocessor">#True 逻辑或 两个为False才为False #逻辑或 or</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-python_u4F18_u5148_u7EA7"><a href="#2-python_u4F18_u5148_u7EA7" class="headerlink" title="2.python优先级"></a>2.python优先级</h2><p>选择优先级高的运算符先执行<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#优先级排行榜</span></span><br><span class="line"><span class="preprocessor">#<span class="number">1.</span>函数调用，寻址，下标</span></span><br><span class="line"><span class="preprocessor">#<span class="number">2.</span>幂运算 **</span></span><br><span class="line">a=<span class="number">2</span>*<span class="number">3</span>**<span class="number">2</span> <span class="preprocessor">#<span class="number">18</span></span></span><br><span class="line"><span class="preprocessor">#<span class="number">3.</span>翻转运算 ~</span></span><br><span class="line"><span class="preprocessor">#<span class="number">4.</span>正负号</span></span><br><span class="line">b=<span class="number">4</span>*-<span class="number">2</span> <span class="preprocessor">#-<span class="number">8</span></span></span><br><span class="line"><span class="preprocessor">#<span class="number">5.</span>乘除符号</span></span><br><span class="line"><span class="preprocessor">#<span class="number">6.</span>加减符号 + -</span></span><br><span class="line"><span class="preprocessor">#<span class="number">7.</span>向左移动向右移动 &lt;&lt;,&gt;&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="number">8.</span>按位&amp;,^,|</span></span><br><span class="line"><span class="preprocessor">#<span class="number">9.</span>比较运算符</span></span><br><span class="line">c=<span class="number">2</span>*<span class="number">2</span>+<span class="number">1</span>&lt;<span class="number">6</span> <span class="preprocessor">#True</span></span><br><span class="line"><span class="preprocessor">#<span class="number">10.</span>逻辑not,and,or</span></span><br><span class="line"><span class="preprocessor">#<span class="number">11.l</span>ambda表达式</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#优先级使用规律</span></span><br><span class="line"><span class="preprocessor">#一般情况是左结合的</span></span><br><span class="line"><span class="preprocessor">#出现赋值时候一般是右结合的</span></span><br></pre></td></tr></table></figure></p>
<p>优先级记忆规律:<br>函数寻址下标一，幂运算小二小(<em>^__^</em>) 嘻嘻……；<br>全体单元第三位；单元运算符就是操作一个操作对象的运算符，如~，正负号<br>乘除求余四千里；<br>乘除完了五加减；<br>六娃玩耍左右移；<br>七是按位或跟与; 同时包括异或<br>八仙生气要比敌； 比较运算符<br>倒数第一逻辑或非与；<br>lambda表达式刚开始很少遇到，遇到时候将其放最低优先级；</p>
<p>不知道可以用()包含则先计算，优先级最高的是()里面的。</p>
<h2 id="3-_u8868_u8FBE_u5F0F"><a href="#3-_u8868_u8FBE_u5F0F" class="headerlink" title="3.表达式"></a>3.表达式</h2><p>值，变量，运算符共同组成的整体叫表达式。<br>如：”ok”,a=”hello”<br>实例:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#coding=utf-<span class="number">8</span></span></span><br><span class="line"><span class="number">4</span> <span class="preprocessor">#值表达式</span></span><br><span class="line"><span class="string">"hello"</span> <span class="preprocessor">#字符串表达式</span></span><br><span class="line"><span class="number">25</span>+<span class="number">7</span> <span class="preprocessor">#计算表达式</span></span><br><span class="line">a=<span class="number">5</span> <span class="preprocessor">#赋值表达式</span></span><br></pre></td></tr></table></figure></p>
<h1 id="u7B2C_u516D_u7AE0__u63A7_u5236_u6D41"><a href="#u7B2C_u516D_u7AE0__u63A7_u5236_u6D41" class="headerlink" title="第六章 控制流"></a>第六章 控制流</h1><h2 id="1-_u63A7_u5236_u6D41_u7C7B_u578B"><a href="#1-_u63A7_u5236_u6D41_u7C7B_u578B" class="headerlink" title="1.控制流类型"></a>1.控制流类型</h2><p>顺序结构，分支结构，循环结构</p>
<h2 id="2-if_uFF0Cwhile_2Cfor"><a href="#2-if_uFF0Cwhile_2Cfor" class="headerlink" title="2.if，while,for"></a>2.if，while,for</h2><p>if用法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="string">'''</span><br><span class="line">if 条件:</span><br><span class="line">    语句;</span><br><span class="line">elif 条件:</span><br><span class="line">    语句;</span><br><span class="line">else:</span><br><span class="line">    语句;</span><br><span class="line">'''</span></span><br><span class="line">a=<span class="number">78</span>;</span><br><span class="line"><span class="keyword">if</span> a&lt;<span class="number">60</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'不及格'</span>;</span><br><span class="line"><span class="keyword">elif</span> <span class="number">60</span>&lt;=a&lt;=<span class="number">80</span>: <span class="comment">#可以用a&lt;=80</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'良好'</span>;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'优秀'</span>;</span><br></pre></td></tr></table></figure></p>
<p>while语句用法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="string">'''</span><br><span class="line">while 条件为真:</span><br><span class="line">    循环执行语句;</span><br><span class="line">else:  #else部分可以省略</span><br><span class="line">    条件为假执行语句:</span><br><span class="line">'''</span></span><br><span class="line">a=<span class="keyword">False</span></span><br><span class="line"><span class="keyword">while</span> a:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello"</span> <span class="comment">#死循环 需要避免</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"你好"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多层嵌套</span></span><br><span class="line">b=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> b&lt;<span class="number">5</span>:</span><br><span class="line">    <span class="keyword">if</span> b&lt;<span class="number">3</span>:</span><br><span class="line">        <span class="keyword">print</span> b;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"hello"</span></span><br><span class="line">    b+=<span class="number">1</span>;<span class="comment">#不在else的缩进,属于while语句</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"b&gt;=5"</span></span><br><span class="line"><span class="comment">#输出 1，2，hello，hello，b&gt;=5</span></span><br></pre></td></tr></table></figure></p>
<p>for语句用法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="string">'''</span><br><span class="line">for 格式:</span><br><span class="line">for i in 集合:</span><br><span class="line">    执行语句;</span><br><span class="line">else:</span><br><span class="line">    执行语句：</span><br><span class="line">'''</span></span><br><span class="line">k=range(<span class="number">1</span>,<span class="number">4</span>);<span class="comment">#[1, 2, 3]</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">3</span>,<span class="number">45</span>]:</span><br><span class="line">    <span class="keyword">print</span> i;<span class="comment">#1,3,45</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">print</span> j;<span class="comment">#1,2,3</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>):<span class="comment">#2代表步长 ，每两个输出一个</span></span><br><span class="line">    <span class="keyword">print</span> m;<span class="comment">#1,3</span></span><br><span class="line"><span class="comment">#嵌套分支结构</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">if</span> n%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"&#123;0&#125;是偶数"</span>.format(n));</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"&#123;0&#125;是奇数"</span>.format(n));</span><br><span class="line"><span class="comment">#输出:1是奇数,2是偶数,3是奇数,4是偶数</span></span><br></pre></td></tr></table></figure></p>
<p>break语句用法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="string">'''</span><br><span class="line">break语句退出循环</span><br><span class="line">'''</span></span><br><span class="line">a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> a:</span><br><span class="line">    <span class="keyword">print</span> a; <span class="comment">#输出1，2  因为下面有a==3时退出循环</span></span><br><span class="line">    a+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">#输出结果:1,2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#双层嵌套循环</span></span><br><span class="line">a=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">while</span> a&lt;<span class="number">6</span>: <span class="comment">#4,5循环两次</span></span><br><span class="line">    a+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>):<span class="comment">#输出1,2,3跳出当前循环，进入嵌套循环继续输出1,2,3</span></span><br><span class="line">        <span class="keyword">print</span> i;</span><br><span class="line">        <span class="keyword">if</span> i==<span class="number">3</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">#运行结果:1,2,3,1,2,3</span></span><br><span class="line"></span><br><span class="line">a=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span> a&lt;<span class="number">7</span>:</span><br><span class="line">    a+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"&#123;0&#125;输出"</span>.format(i));</span><br><span class="line">        <span class="keyword">if</span> i==<span class="number">4</span>:</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">#跳出for</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">#跳出while</span></span><br><span class="line"><span class="comment">#运行结果:1输出,2输出,3输出,4输出,1输出,2输出,3输出,4输出</span></span><br></pre></td></tr></table></figure></p>
<p>continue语句用法<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line"><span class="horizontal_rule">'''</span></span><br><span class="line">continue语句结束本次循环，继续下一次循环</span><br><span class="line"><span class="horizontal_rule">'''</span></span><br><span class="line">for i in range(1,5):</span><br><span class="line"><span class="code">    if i==3:</span></span><br><span class="line"><span class="code">        continue;</span></span><br><span class="line"><span class="code">    print i;</span></span><br><span class="line">#输出结果：1，2，4</span><br></pre></td></tr></table></figure></p>
<h1 id="u7B2C_u4E03_u7AE0__u51FD_u6570"><a href="#u7B2C_u4E03_u7AE0__u51FD_u6570" class="headerlink" title="第七章 函数"></a>第七章 函数</h1><h2 id="1-_u51FD_u6570_u8BA4_u8BC6"><a href="#1-_u51FD_u6570_u8BA4_u8BC6" class="headerlink" title="1.函数认识"></a>1.函数认识</h2><p>函数(function)是用来封装特定功能的；分系统自带函数和用户自己定义的自定义函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#系统自带的函数</span></span><br><span class="line"><span class="comment">#1,取字符串长度</span></span><br><span class="line">a=<span class="string">"hello"</span></span><br><span class="line"><span class="keyword">print</span> len(a) <span class="comment">#5</span></span><br><span class="line"><span class="comment">#字符串切割</span></span><br><span class="line">b=a.split(<span class="string">"e"</span>) <span class="comment">#['h', 'llo']</span></span><br><span class="line"><span class="comment">#自定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"hello"</span></span><br><span class="line">m(); <span class="comment">#hello</span></span><br></pre></td></tr></table></figure></p>
<p>函数定义格式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">()</span>:</span></span><br><span class="line">	函数内容;...</span><br><span class="line">	函数内容;...</span><br></pre></td></tr></table></figure></p>
<h2 id="2-_u5F62_u53C2_u4E0E_u5B9E_u53C2"><a href="#2-_u5F62_u53C2_u4E0E_u5B9E_u53C2" class="headerlink" title="2.形参与实参"></a>2.形参与实参</h2><p>形参一般发生在函数定义中，指参数的名称，而不代表参数的指；<br>实参一般在函数调用的时候出现，指的是具体的值；<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmax</span><span class="params">(a,b)</span>:</span>  <span class="comment">#a,b代表形参，只是一个名称而已</span></span><br><span class="line">    <span class="keyword">if</span> a&gt;b:</span><br><span class="line">        <span class="keyword">print</span> a;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> b;</span><br><span class="line">fmax(<span class="number">1</span>,<span class="number">3</span>);  <span class="comment">#1,3代表实参</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-_u53C2_u6570_u7684_u4F20_u9012"><a href="#3-_u53C2_u6570_u7684_u4F20_u9012" class="headerlink" title="3.参数的传递"></a>3.参数的传递</h2><p>关键参数：一个函数出现多个参数的时候，我们可以通过参数的名字直接给我们的参数赋值，那么这些参数叫关键参数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#参数传递</span></span><br><span class="line"><span class="comment">#1.简单传递</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmax</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a&gt;b:</span><br><span class="line">        <span class="keyword">print</span> a;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> b;</span><br><span class="line">fmax(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">#2.赋值传递</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmax2</span><span class="params">(a,b=<span class="number">8</span>)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> a;<span class="keyword">print</span> b;</span><br><span class="line">fmax2(<span class="number">2</span>);<span class="comment">#输出2,8</span></span><br><span class="line">fmax2(<span class="number">2</span>,<span class="number">9</span>);<span class="comment">#输出2,9</span></span><br><span class="line"><span class="comment">#3.关键参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmax3</span><span class="params">(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> a;<span class="keyword">print</span> b;<span class="keyword">print</span> c;</span><br><span class="line">fmax3(<span class="number">5</span>); <span class="comment">#a=5  输出5,2,3</span></span><br><span class="line">fmax3(b=<span class="number">4</span>,a=<span class="number">6</span>); <span class="comment">#按关键字传递 不会考虑参数位置 a=6,b=4,c=3 输出:6,4，3</span></span><br><span class="line">fmax3(<span class="number">5</span>,c=<span class="number">6</span>,b=<span class="number">7</span>); <span class="comment">#5没有关键字，默认为第一个 有关键字的对应 输出:5,7,6</span></span><br><span class="line">fmax3(b=<span class="number">5</span>,c=<span class="number">6</span>,a=<span class="number">4</span>); <span class="comment">#输出4,5,6</span></span><br><span class="line"><span class="comment">#注意参数不能冲突</span></span><br><span class="line"><span class="comment">#fmax3(b=2,c=1,5); #error!!!!!!!!!!</span></span><br></pre></td></tr></table></figure></p>
<h2 id="4-_u5168_u5C40_u53D8_u91CF_u4E0E_u5C40_u90E8_u53D8_u91CF"><a href="#4-_u5168_u5C40_u53D8_u91CF_u4E0E_u5C40_u90E8_u53D8_u91CF" class="headerlink" title="4.全局变量与局部变量"></a>4.全局变量与局部变量</h2><p>作用域：一个变量在一定的范围内有效<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fa</span><span class="params">()</span>:</span></span><br><span class="line">    i=<span class="number">8</span>;</span><br><span class="line"><span class="keyword">print</span> i; <span class="comment">#error!!!***** i的作用范围在函数内有效</span></span><br><span class="line"><span class="keyword">print</span> j; <span class="comment">#error 因为先用后定义，定义后面才有效</span></span><br><span class="line">j=<span class="number">9</span>;</span><br></pre></td></tr></table></figure></p>
<p>局部变量：在一定范围内起作用而非全局都起作用的变量；一个函数中变量没有进行全局变量声明时默认是局部变量。如上面的i.<br>全局变量:作用域为全局的变量，需要声明global.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fa</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> i;</span><br><span class="line">    i=<span class="number">8</span>;</span><br><span class="line"><span class="comment">#print i; #global name 'i' is not defined--因为没有执行fa()等于还没有定义</span></span><br><span class="line">i=<span class="number">9</span>;</span><br><span class="line"><span class="keyword">print</span> i;  <span class="comment">#9</span></span><br><span class="line">fa();</span><br><span class="line"><span class="keyword">print</span> i;  <span class="comment">#8</span></span><br></pre></td></tr></table></figure></p>
<h2 id="5-_u51FD_u6570_u4F7F_u7528_u4E0E_u8FD4_u56DE_u503C"><a href="#5-_u51FD_u6570_u4F7F_u7528_u4E0E_u8FD4_u56DE_u503C" class="headerlink" title="5.函数使用与返回值"></a>5.函数使用与返回值</h2><p>调用函数：在函数定义后直接输入函数名即可。<br>函数返回值：通过return实现，可以返回一个或者多个值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line"><span class="keyword">print</span> test();   <span class="comment">#输出： 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(i,j)</span>:</span></span><br><span class="line">    k=i*j;</span><br><span class="line">    <span class="keyword">return</span> (i,j,k);</span><br><span class="line">x=test2(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">#x默认为三个元素组成的元组</span></span><br><span class="line"><span class="keyword">print</span> x;   <span class="comment">#输出： (2, 3, 6)</span></span><br><span class="line">x,y,z=test2(<span class="number">3</span>,<span class="number">4</span>); <span class="comment">#返回值赋给三个变量分别存储</span></span><br><span class="line"><span class="keyword">print</span> x;<span class="keyword">print</span> y;<span class="keyword">print</span> z;  <span class="comment">#输出： 3,4,12</span></span><br></pre></td></tr></table></figure></p>
<h2 id="6-_u6587_u6863_u5B57_u7B26_u4E32"><a href="#6-_u6587_u6863_u5B57_u7B26_u4E32" class="headerlink" title="6.文档字符串"></a>6.文档字符串</h2><p>函数太多太乱问题解决：<br>方法一：开发时为每一个函数写一个文档说明；<br>方法二：文档字符串-python特有，在每个函数开头加一行说明性文字，这行说明性文字叫文档字符串。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#文档字符串 函数定义下面第一行开始 用三引号包含</span></span><br><span class="line"><span class="comment">#第一行概括函数功能</span></span><br><span class="line"><span class="comment">#第二行不写</span></span><br><span class="line"><span class="comment">#第三行以下为详细说明</span></span><br><span class="line"><span class="comment">#每行句末使用句号</span></span><br><span class="line"><span class="comment">#如果是英文每一行第一个字母必须大写，中文不用</span></span><br><span class="line"><span class="comment">#用法 函数名._doc_ 或者 help(函数名)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">d</span><span class="params">(i,j)</span>:</span></span><br><span class="line">    <span class="string">'''</span><br><span class="line">    这是一个乘法运算。</span><br><span class="line"></span><br><span class="line">    函数传入两个数，返回相乘后的结果。</span><br><span class="line">    '''</span></span><br><span class="line">    k=i*j;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line"><span class="keyword">print</span> d.__doc__</span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line"><span class="comment"># 这是一个乘法运算。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 函数传入两个数，返回相乘后的结果。</span></span><br><span class="line"></span><br><span class="line">help(d)</span><br><span class="line"><span class="comment">#输出结果:</span></span><br><span class="line"><span class="comment">#Help on function d in module __main__:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#d(i, j)</span></span><br><span class="line"><span class="comment">#    这是一个乘法运算。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    函数传入两个数，返回相乘后的结果。</span></span><br></pre></td></tr></table></figure></p>
<h1 id="u7B2C_u516B_u7AE0__u6A21_u5757"><a href="#u7B2C_u516B_u7AE0__u6A21_u5757" class="headerlink" title="第八章 模块"></a>第八章 模块</h1><h2 id="1-_u8BA4_u8BC6_u6A21_u5757"><a href="#1-_u8BA4_u8BC6_u6A21_u5757" class="headerlink" title="1.认识模块"></a>1.认识模块</h2><p>函数是可以实现一项或者多项功能的一段程序，模块是函数功能的拓展，函数是一段程序，模块是一项程序块，函数和模块都是实现功能，但是模块比函数广，模块里面可以重用多个函数;<br>模块都是放在python安装目录下的Lib目录下的;<br>比如压缩模块zipfile.py实现了压缩解压一类功能;<br>使用模块时必须先导入，导入用import;<br>如math里面的pi=3.14159…<br>import math之后就可以使用math.pi得到pi的值。</p>
<p>sys模块：在标准库中与系统功能有关的模块。<br>如下可以查看版本信息:<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#coding=utf-8</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> sys</span></span><br><span class="line"><span class="built_in">print</span> sys.version<span class="preprocessor"> #python版本信息</span></span><br><span class="line"><span class="built_in">print</span> sys.executable<span class="preprocessor"> #查看当前运行的程序的目录地址</span></span><br><span class="line"><span class="built_in">print</span> sys.getwindowsversion()<span class="preprocessor"> #返回windows操作系统的版本信息</span></span><br><span class="line"><span class="built_in">print</span> sys.modules.keys()<span class="preprocessor"> #查看已经导入模块的关键字</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-_u5B57_u8282_u7F16_u8BD1"><a href="#2-_u5B57_u8282_u7F16_u8BD1" class="headerlink" title="2.字节编译"></a>2.字节编译</h2><p>python需要到二进制才能执行，有两种执行方式：<br>(1)将模块里的内容编译成二进制语言，然后执行这些二进制语言；<br>(2)省略编译这一步，直接执行对应模块的二进制语言程序。<br>第二种方法比第一种快。<br>字节编译:把模块程序编译成二进制语言程序的过程；<br>.pyc文件:经过编译后的模块对应的二进制文件。</p>
<p>字节编译与编译区别:<br>python是解释型语言，而不是编译型语言，python中虽然出现了编译过程，但是python的编译过程是在python解释器中发生的；<br>编译型语言是指在软件中有一个独立的编译模块编译程序；<br>python中字节编译由解释器完成，所以python仍然是解释型语言。</p>
<p>两种.pyc文件产生的方式：<br>(1)在运行一个模块的时候，如果没有对应的.pyc文件则编译生成.pyc文件；有的话直接运行.pyc文件。<br>代码中如果没有对应.pyc文件，主要import 模块.py 就会自动编译生成.pyc文件。<br>(2)cmd下，进入对应模块目录；输入命令：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> -<span class="keyword">m</span> compileall 模块.<span class="keyword">py</span></span><br></pre></td></tr></table></figure></p>
<p>则会产生对应的.pyc文件。<br>.pyc最大作用就是加快模块的运行速度；.pyc文件可以作为反编译等高级功能。<br>利用二进制文件阅读器可以查看.pyc文件。<br>反编译就是把.pyc变成.py;比.py变成.pyc难。</p>
<h2 id="3-from_u2026import"><a href="#3-from_u2026import" class="headerlink" title="3.from…import"></a>3.from…import</h2><p>导入模块用import，没有导入模块的属性方法，可以用from…import导入属性方法。<br><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.<span class="keyword">version</span> #impot不能直接调用<span class="keyword">version</span>方法</span><br></pre></td></tr></table></figure></p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys import <span class="property">version</span></span><br><span class="line"><span class="property">version</span></span><br></pre></td></tr></table></figure>
<p>from … import 只能导入模块的一个属性或者方法，而from … import *可以导入模块的所有属性和方法。</p>
<h2 id="4-name_u5C5E_u6027"><a href="#4-name_u5C5E_u6027" class="headerlink" title="4.name属性"></a>4.<strong>name</strong>属性</h2><p>一个函数调用其他函数完成功能叫主函数，没有调用其他函数叫非主函数；一个模块被直接调用而没有被别人调用叫主模块，一个模块被别人调用叫非主模块。<br>将如下程序lname_.py放Lib目录下（模块目录）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#查看这个模块在不同场景下的__name__</span></span><br><span class="line"><span class="built_in">print</span> __name__</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看__name__属性常用情况</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">"It's main"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">"It's not main"</span></span><br></pre></td></tr></table></figure></p>
<p>直接运行lname<em>.py则输出<strong>main</strong>，是主模块；<br>导入import lname</em>.py则它是非主模块。</p>
<p>注意：_ <em>name</em> _前后都是两个下划线</p>
<h2 id="5-_u81EA_u5B9A_u4E49_u6A21_u5757"><a href="#5-_u81EA_u5B9A_u4E49_u6A21_u5757" class="headerlink" title="5.自定义模块"></a>5.自定义模块</h2><p>系统自带模块：python安装时自带模块；<br>自定义模块：用户自己定义的模块，只需要将自己编写的.py文件放在Lib目录下。<br>myadd.py如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(i,j)</span>:</span></span><br><span class="line">    k=i+j</span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line">k=add(i,j)</span><br><span class="line"><span class="keyword">print</span> k</span><br></pre></td></tr></table></figure></p>
<p>直接执行错误，因为k=add(i,j)中i,j没有确切的值；<br>如果在模块外面先定义i,j,再导入模块也会出错；<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">5</span>;</span><br><span class="line">j=<span class="number">6</span>;</span><br><span class="line">import myadd <span class="preprocessor">#出错 值还没有传递到模块的时候，模块就会错误</span></span><br></pre></td></tr></table></figure></p>
<p>所以模块myadd.py应该先初始化一个i,j如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">0</span>;j=<span class="number">0</span>;<span class="comment">#也可以用 int i;int j;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(i,j)</span>:</span></span><br><span class="line">    k=i+j</span><br><span class="line">    <span class="keyword">return</span> k</span><br><span class="line">k=add(i,j)</span><br><span class="line"><span class="keyword">print</span> k</span><br></pre></td></tr></table></figure></p>
<p>然后如下调用：<br><img src="/img/python/15.png" alt="image"><br>但是这里用test.py调用时输出永远为0<br>这里将myadd.py改为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(i,j)</span>:</span></span><br><span class="line">    k=i+j</span><br><span class="line">    <span class="keyword">return</span> k</span><br></pre></td></tr></table></figure></p>
<p>test.py如下正确<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from myadd import add</span><br><span class="line">i=<span class="number">6</span>;</span><br><span class="line">j=<span class="number">5</span>;</span><br><span class="line">k=add(i,j);</span><br><span class="line">print k;<span class="preprocessor">#运行结果:<span class="number">11</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="6-dir_28_29_u51FD_u6570"><a href="#6-dir_28_29_u51FD_u6570" class="headerlink" title="6.dir()函数"></a>6.dir()函数</h2><p>dir()函数：查看python模块的功能；<br>查看sys模块的功能<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#coding=utf-8</span></span><br><span class="line"><span class="preprocessor"><span class="keyword">import</span> sys</span></span><br><span class="line"><span class="built_in">print</span> dir(sys)<span class="preprocessor">  #查看  输出：['__displayhook__', '__doc__',...]</span></span><br><span class="line"><span class="built_in">print</span> sys.__doc__;<span class="preprocessor"> #使用功能</span></span><br></pre></td></tr></table></figure></p>
<p>dir()查看的仅仅是属性的列表，而不携带数据。<br>如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-<span class="number">8</span></span><br><span class="line">a=[]</span><br><span class="line">b=[<span class="string">'a'</span>,<span class="string">'b'</span>]</span><br><span class="line">c=()</span><br><span class="line">print <span class="function"><span class="title">dir</span><span class="params">(a)</span></span>  #[<span class="string">'__add__'</span>, <span class="string">'__class__'</span>, <span class="string">'__contains__'</span>,...]</span><br><span class="line">print <span class="function"><span class="title">dir</span><span class="params">(b)</span></span> #输出同上一行</span><br><span class="line">print <span class="function"><span class="title">dir</span><span class="params">(c)</span></span> #输出元组的属性</span><br></pre></td></tr></table></figure></p>
<h1 id="u7B2C_u4E5D_u7AE0__u6570_u636E_u7ED3_u6784"><a href="#u7B2C_u4E5D_u7AE0__u6570_u636E_u7ED3_u6784" class="headerlink" title="第九章 数据结构"></a>第九章 数据结构</h1><h2 id="1-_u6982_u8FF0"><a href="#1-_u6982_u8FF0" class="headerlink" title="1.概述"></a>1.概述</h2><p>数据结构：将数据组织在一起的数据结构。<br>内置数据结构：系统定义的，如列表,元组，字典等；<br>拓展数据结构:需要用户定义的，如栈，队列等。<br>内置数据结构<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#coding=utf-8</span></span><br><span class="line"><span class="preprocessor">#列表 可以改变元素</span></span><br><span class="line">[<span class="string">"app"</span>,<span class="string">"aqq"</span>,<span class="string">"mmn"</span>]</span><br><span class="line"><span class="preprocessor">#元组 不可以改变元素</span></span><br><span class="line">(<span class="string">"app"</span>,<span class="string">"aqq"</span>,<span class="string">"mmn"</span>)</span><br><span class="line"><span class="preprocessor">#字典 有名称(字典的键) 键后面跟着的是键对应的值</span></span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"liming"</span>,<span class="string">"home"</span>:<span class="string">"beijin"</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>数据结构是静态的，算法是动态的；数据结构是算法的基础，相同的数据结构运用不同的算法有不同的效率。</p>
<h2 id="2-_u6808"><a href="#2-_u6808" class="headerlink" title="2.栈"></a>2.栈</h2><p>栈是一种数据结构；栈相当于一端开口一端封闭的容器，把数据移动到栈里面的过程叫进栈，也叫压栈或者入栈。数据只能从开口方进出。<br>栈是“先进后出，后进先出”。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#栈的实现 栈就是在列表的基础上进行一定的改进</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span><span class="params">()</span>:</span><span class="comment">#定义一个类</span></span><br><span class="line">    <span class="comment">#方法的第一个参数代表类本身</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(st,size)</span>:</span> <span class="comment">#定义初始化函数 st-栈的主体 size-栈的容量</span></span><br><span class="line">        st.stack=[]; <span class="comment">#把列表赋给栈</span></span><br><span class="line">        st.size=size; <span class="comment">#初始化容量</span></span><br><span class="line">        st.top=-<span class="number">1</span>; <span class="comment">#第一个数据位置为0，所以没有数据时栈顶用-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(st,content)</span>:</span><span class="comment">#入栈</span></span><br><span class="line">        <span class="keyword">if</span> st.Full():</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Stack is full"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            st.stack.append(content)</span><br><span class="line">            st.top+=<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">out</span><span class="params">(st)</span>:</span><span class="comment">#出栈</span></span><br><span class="line">        <span class="keyword">if</span> st.Empty():</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Stack is Empty"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            st.top-=<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Full</span><span class="params">(st)</span>:</span><span class="comment">#判断栈是否满</span></span><br><span class="line">        <span class="keyword">if</span> st.top==st.size:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Empty</span><span class="params">(st)</span>:</span><span class="comment">#判断栈是否空</span></span><br><span class="line">        <span class="keyword">if</span> st.top==-<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span>;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line">q=Stack(<span class="number">7</span>);</span><br><span class="line"><span class="keyword">print</span> q.Empty();  <span class="comment">#True</span></span><br><span class="line">q.push(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">print</span> q.Empty();  <span class="comment">#False</span></span><br><span class="line">q.out();</span><br><span class="line">q.out();           <span class="comment">#Stack is Empty</span></span><br><span class="line"><span class="keyword">print</span> q.Empty();  <span class="comment">#True</span></span><br></pre></td></tr></table></figure></p>
<p>上面的方法出栈时取不到值，如下是我改进后方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span><span class="params">()</span>:</span><span class="comment">#定义一个类</span></span><br><span class="line">    <span class="comment">#方法的第一个参数代表类本身</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(st,size)</span>:</span></span><br><span class="line">        st.stack=[]; <span class="comment">#把列表赋给栈</span></span><br><span class="line">        st.size=size; <span class="comment">#初始化容量</span></span><br><span class="line">        st.top=-<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(st,content)</span>:</span><span class="comment">#入栈</span></span><br><span class="line">        <span class="keyword">if</span> st.Full():</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Stack is full"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            st.stack.append(content)</span><br><span class="line">            st.top+=<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(st)</span>:</span><span class="comment">#出栈</span></span><br><span class="line">        <span class="keyword">if</span> st.Empty():</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Stack is Empty"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            st.top-=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> st.stack.pop(st.top+<span class="number">1</span>);<span class="comment">#加上这行可以取得值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Full</span><span class="params">(st)</span>:</span><span class="comment">#判断栈是否满</span></span><br><span class="line">        <span class="keyword">if</span> st.top==st.size:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Empty</span><span class="params">(st)</span>:</span><span class="comment">#判断栈是否空</span></span><br><span class="line">        <span class="keyword">if</span> st.top==-<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span>;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line">q=Stack(<span class="number">7</span>);</span><br><span class="line"><span class="keyword">print</span> q.Empty();     <span class="comment">#True</span></span><br><span class="line">q.push(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">print</span> q.Empty();     <span class="comment">#False</span></span><br><span class="line"><span class="keyword">print</span> q.pop();       <span class="comment">#hello </span></span><br><span class="line"><span class="keyword">print</span> q.pop();       <span class="comment">#Stack is Empty None</span></span><br><span class="line"><span class="keyword">print</span> q.Empty();     <span class="comment">#True</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-_u961F_u5217"><a href="#3-_u961F_u5217" class="headerlink" title="3.队列"></a>3.队列</h2><p>队列是一种拓展的数据结构；队列相当于两端都开通的队列，但是一端只能进行插入操作，叫做队尾；另外一端只能进行删除操作，叫做队首；<br>“对尾进，对首出”。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#队列的实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(qu,size)</span>:</span></span><br><span class="line">        qu.queue=[];</span><br><span class="line">        qu.size=size;</span><br><span class="line">        qu.head=-<span class="number">1</span>;</span><br><span class="line">        qu.tail=-<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span><span class="params">(qu)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> qu.head==qu.tail:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span>;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isFull</span><span class="params">(qu)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> qu.tail-qu.head+<span class="number">1</span>==qu.size:<span class="comment">########</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span>;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inQueue</span><span class="params">(qu,content)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> qu.isFull():</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Queue is full"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            qu.queue.append(content);</span><br><span class="line">            qu.tail+=<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">outQueue</span><span class="params">(qu)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> qu.isEmpty():</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"Queue is empty"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            qu.head+=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> qu.queue.pop(qu.head-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#应用</span></span><br><span class="line">q=Queue(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">print</span> q.isEmpty(); <span class="comment">#True</span></span><br><span class="line">q.inQueue(<span class="string">"python"</span>);</span><br><span class="line"><span class="keyword">print</span> q.isEmpty(); <span class="comment">#False</span></span><br><span class="line"><span class="keyword">print</span> q.outQueue(); <span class="comment">#python</span></span><br><span class="line"><span class="keyword">print</span> q.isEmpty(); <span class="comment">#True</span></span><br></pre></td></tr></table></figure></p>
<h1 id="u7B2C_u5341_u7AE0__u57FA_u672C_u7684_u6B63_u5219_u8868_u8FBE_u5F0F"><a href="#u7B2C_u5341_u7AE0__u57FA_u672C_u7684_u6B63_u5219_u8868_u8FBE_u5F0F" class="headerlink" title="第十章 基本的正则表达式"></a>第十章 基本的正则表达式</h1><h2 id="1-pycharm_u8FD0_u7528"><a href="#1-pycharm_u8FD0_u7528" class="headerlink" title="1.pycharm运用"></a>1.pycharm运用</h2><p>显示行号：file-&gt;setting-&gt;Editor-&gt;General-&gt;Appearance,选中 Show line nu8mbers.<br>调整字体:file-&gt;setting-&gt;Editor-&gt;General-&gt;Colors &amp; Fonts-&gt;Font,选择主题(Scheme)如Default,点击Save As,弹出输入名字框随便输入名字（这里我用myFont）,之后发现在下面可以对字体进行改动。</p>
<p>pycharm调试：<br>在代码左边单击出现红色的断点，点击运行按钮右边的爬虫按钮进入调试。点击第一次发现i={int}0,a还没有执行。<br><img src="/img/python/16.png" alt="image"><br>点击如下按钮可以一步一步运行，如下，点击时a=0,i=0<br><img src="/img/python/17.png" alt="image"></p>
<h2 id="2-_u6B63_u5219_u8868_u8FBE_u5F0F_u7B26_u53F7_u4E0E_u65B9_u6CD5"><a href="#2-_u6B63_u5219_u8868_u8FBE_u5F0F_u7B26_u53F7_u4E0E_u65B9_u6CD5" class="headerlink" title="2.正则表达式符号与方法"></a>2.正则表达式符号与方法</h2><p><img src="/img/python/18.png" alt="image"><br>常用符号：<br>.：匹配任意字符，换行符\n除外；<br><em>:匹配前一个字符0次或者无限次；<br>?:匹配前一个字符0次或者一次；<br>.</em>:贪心算法；<br>.*?:非贪心算法；<br>():括号内的数据作为结果返回；</p>
<p>常用方法：<br>findall:匹配所有符合规律的内容，返回包含结果的列表<br>Search:匹配并提取第一个符合规律的内容，返回一个正则表达式对象(object)<br>Sub:替换符合规律的内容，返回替换后的内容</p>
<p>实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#导入re库文件</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># .的使用；"."就是一个占位符</span></span><br><span class="line">a=<span class="string">"xyz4321"</span>;</span><br><span class="line">b=re.findall(<span class="string">'x...'</span>,a);</span><br><span class="line"><span class="keyword">print</span> b;  <span class="comment">#['xyz4']</span></span><br><span class="line">b=re.findall(<span class="string">'x..'</span>,a);</span><br><span class="line"><span class="keyword">print</span> b;  <span class="comment">#['xyz']</span></span><br><span class="line">a=<span class="string">"aaxss"</span></span><br><span class="line">b=re.findall(<span class="string">'x.'</span>,a);</span><br><span class="line"><span class="keyword">print</span> b;  <span class="comment">#['xs']</span></span><br><span class="line">b=re.findall(<span class="string">'x....'</span>,a);</span><br><span class="line"><span class="keyword">print</span> b;  <span class="comment">#[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># *的使用</span></span><br><span class="line"><span class="comment">#如下找不到x的位置为空</span></span><br><span class="line">a=<span class="string">'xaaxy123'</span></span><br><span class="line">b=re.findall(<span class="string">'x*'</span>,a);</span><br><span class="line"><span class="keyword">print</span> b; <span class="comment">#['x', '', '', 'x', '', '', '', '', '']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ？的使用</span></span><br><span class="line">a=<span class="string">'xaaxy123'</span></span><br><span class="line">b=re.findall(<span class="string">'x?'</span>,a);</span><br><span class="line"><span class="keyword">print</span> b; <span class="comment">#['x', '', '', 'x', '', '', '', '', '']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .*的使用</span></span><br><span class="line">code=<span class="string">'hadkfalifexxIxxfasdjifja134xxlovexx23345sdfxxyouxx8dfse'</span>;</span><br><span class="line">b=re.findall(<span class="string">'xx.*xx'</span>,code)</span><br><span class="line"><span class="keyword">print</span> b <span class="comment">#['xxIxxfasdjifja134xxlovexx23345sdfxxyouxx']</span></span><br><span class="line">c=re.findall(<span class="string">'xx.*?xx'</span>,code)</span><br><span class="line"><span class="keyword">print</span> c <span class="comment">#['xxIxx', 'xxlovexx', 'xxyouxx']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 括号的使用 将需要的内容用()括起来</span></span><br><span class="line">d=re.findall(<span class="string">'xx(.*?)xx'</span>,code)</span><br><span class="line"><span class="keyword">print</span> d <span class="comment">#['I', 'love', 'you']</span></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> d:</span><br><span class="line">    <span class="keyword">print</span> each <span class="comment">#I love you</span></span><br><span class="line"></span><br><span class="line">s=<span class="string">'''sdfxxhello</span><br><span class="line">xxfsdfxxworldxxasdf'''</span></span><br><span class="line"><span class="comment">#一般匹配是不会包含换行符，所以如下得到</span></span><br><span class="line"><span class="comment">#的是['fsdf']，xxhello之后遇到换行符没有找到后面的xx，直接抛弃重新开始</span></span><br><span class="line">e=re.findall(<span class="string">'xx(.*?)xx'</span>,s)</span><br><span class="line"><span class="keyword">print</span> e <span class="comment">#['fsdf']</span></span><br><span class="line"><span class="comment">#在后面加上re.S后可以包含换行符</span></span><br><span class="line">f=re.findall(<span class="string">'xx(.*?)xx'</span>,s,re.S)</span><br><span class="line"><span class="keyword">print</span> f <span class="comment">#['hello\n', 'world']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#search与findall区别</span></span><br><span class="line">s2=<span class="string">'asdfxxIxx123xxlovexxdfd'</span></span><br><span class="line">f1=re.search(<span class="string">'xx(.*?)xx123xx(.*?)xx'</span>,s2);</span><br><span class="line"><span class="keyword">print</span> f1.group(<span class="number">1</span>);<span class="comment">#I 第一个括号里面的内容</span></span><br><span class="line"><span class="keyword">print</span> f1.group(<span class="number">2</span>);<span class="comment">#love 第二个括号里面的内容</span></span><br><span class="line">f2=re.findall(<span class="string">'xx(.*?)xx123xx(.*?)xx'</span>,s2);</span><br><span class="line"><span class="keyword">print</span> f2;<span class="comment">#[('I', 'love')] 如果遇到匹配的第二个，将以元组的形式在列表中显示第二个</span></span><br><span class="line"><span class="keyword">print</span> f2[<span class="number">0</span>]; <span class="comment">#('I', 'love')</span></span><br><span class="line"><span class="keyword">print</span> f2[<span class="number">0</span>][<span class="number">1</span>]; <span class="comment">#love</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sub：将符合条件的内容用后面的内容替换</span></span><br><span class="line">s3=<span class="string">'123assdfghh123'</span></span><br><span class="line">f3=re.sub(<span class="string">'123(.*?)123'</span>,<span class="string">'123aaa123'</span>,s3);</span><br><span class="line"><span class="keyword">print</span> f3;<span class="comment">#123aaa123</span></span><br><span class="line">f4=re.sub(<span class="string">'123(.*?)123'</span>,<span class="string">'123%s123'</span>%<span class="string">'aaa'</span>,s3);</span><br><span class="line"><span class="keyword">print</span> f4;<span class="comment">#123aaa123</span></span><br><span class="line">f5=re.sub(<span class="string">'123(.*?)123'</span>,<span class="string">'123%d123'</span>%<span class="number">666</span>,s3);</span><br><span class="line"><span class="keyword">print</span> f5;<span class="comment">#123666123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不要使用compile #因为多此一举--findall方法里面已经有这个</span></span><br><span class="line">pat=<span class="string">'xx(.*?)xx'</span></span><br><span class="line">pat1=re.compile(pat,re.S)</span><br><span class="line">out=re.findall(pat1,code)</span><br><span class="line"><span class="keyword">print</span> out <span class="comment">#['I', 'love', 'you']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#匹配数字</span></span><br><span class="line">ha=<span class="string">'dsaakdsj676djsi1213rer'</span></span><br><span class="line">hb=re.findall(<span class="string">'(\d+)'</span>,ha)</span><br><span class="line"><span class="keyword">print</span> hb <span class="comment">#['676', '1213']</span></span><br></pre></td></tr></table></figure></p>
<p>相关技巧：<br>import re<br>from re import *<br>from re import findall,search,sub,S<br>不需要complie<br>使用\d+匹配纯数字</p>
<p>总结:<br>一个符号组合:(.*?)<br>三个方法：findall,search,sub</p>
<h2 id="3-_u6B63_u5219_u8868_u8FBE_u5F0F_u5B9E_u4F8B"><a href="#3-_u6B63_u5219_u8868_u8FBE_u5F0F_u5B9E_u4F8B" class="headerlink" title="3.正则表达式实例"></a>3.正则表达式实例</h2><p>写一个a.txt如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>网络爬虫<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"div1"</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://bestzhangjin.com"</span>&gt;</span>我的博客<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"list"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://bestzhangjin.com/1.html"</span>&gt;</span>第一条<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://bestzhangjin.com/2.html"</span>&gt;</span>第二条<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://bestzhangjin.com/3.html"</span>&gt;</span>第三条<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>可以从上面爬取内容<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#coding=utf-8</span></span><br><span class="line"><span class="preprocessor">#导入re库文件</span></span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">f=open(<span class="string">'a.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">html=f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#爬取标题 #search只找第一个，节约时间</span></span><br><span class="line">title=re.search(<span class="string">'&lt;title&gt;(.*?)&lt;/title&gt;'</span>,html,re.S).group(<span class="number">1</span>)</span><br><span class="line">print title #网络爬虫</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#爬取链接</span></span><br><span class="line">links=re.findall(<span class="string">'href="(.*?)"'</span>,html,re.S)</span><br><span class="line"><span class="keyword">for</span> each in links:</span><br><span class="line">    print each</span><br><span class="line"><span class="preprocessor">#输出：</span></span><br><span class="line"><span class="preprocessor">#http://bestzhangjin.com</span></span><br><span class="line"><span class="preprocessor">#http://bestzhangjin.com/1.html</span></span><br><span class="line"><span class="preprocessor">#http://bestzhangjin.com/2.html</span></span><br><span class="line"><span class="preprocessor">#http://bestzhangjin.com/3.html</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#抓取文字</span></span><br><span class="line"><span class="preprocessor">#先爬大再爬小 可以限定范围</span></span><br><span class="line">text=re.findall(<span class="string">'&lt;ul&gt;(.*?)&lt;/ul&gt;'</span>,html,re.S)[<span class="number">0</span>]</span><br><span class="line">text1=re.findall(<span class="string">'"&gt;(.*?)&lt;/a&gt;'</span>,text,re.S)</span><br><span class="line"><span class="keyword">for</span> each_text in text1:</span><br><span class="line">    print each_text</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#sub实现翻页</span></span><br><span class="line">old_url=<span class="string">'http://bestzhangjin.com/?pageNum=1'</span></span><br><span class="line"><span class="preprocessor">#爬取网页</span></span><br><span class="line">total_page=<span class="number">6</span> #总页数</span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">2</span>,total_page+<span class="number">1</span>):</span><br><span class="line">    link=re.sub(<span class="string">'pageNum=\d+'</span>,<span class="string">'pageNum=%d'</span>%i,old_url,re.S)</span><br><span class="line">    print link</span><br><span class="line"><span class="preprocessor">#输出:</span></span><br><span class="line"><span class="preprocessor"># http://bestzhangjin.com/?pageNum=2</span></span><br><span class="line"><span class="preprocessor"># http://bestzhangjin.com/?pageNum=3</span></span><br><span class="line"><span class="preprocessor"># http://bestzhangjin.com/?pageNum=4</span></span><br><span class="line"><span class="preprocessor"># http://bestzhangjin.com/?pageNum=5</span></span><br><span class="line"><span class="preprocessor"># http://bestzhangjin.com/?pageNum=6</span></span><br></pre></td></tr></table></figure></p>
<h2 id="4-_u5236_u4F5C_u6587_u672C_u722C_u866B"><a href="#4-_u5236_u4F5C_u6587_u672C_u722C_u866B" class="headerlink" title="4.制作文本爬虫"></a>4.制作文本爬虫</h2><p>目标：<br>提取网站<a href="http://www.jikexueyuan.com/的课程图片" target="_blank" rel="external">http://www.jikexueyuan.com/的课程图片</a><br>原理：<br>(1)保存网页源代码<br>(2)python读文件加载源代码<br>(3)正则表达式提取图片网址<br>(4)下载图片</p>
<p>网页<a href="http://www.jikexueyuan.com/如下，有较多图片" target="_blank" rel="external">http://www.jikexueyuan.com/如下，有较多图片</a><br>热门推荐，最新课程等等下面都有图片<br><img src="/img/python/19.png" alt="image"><br>鉴于还有一些知识没学，这里将<a href="http://www.jikexueyuan.com/页面的部分需要的代码复制到source.txt" target="_blank" rel="external">http://www.jikexueyuan.com/页面的部分需要的代码复制到source.txt</a><br>输入网址view-source:<a href="http://www.jikexueyuan.com/可以得到对应网页的源码" target="_blank" rel="external">http://www.jikexueyuan.com/可以得到对应网页的源码</a><br>我这里将源码全部复制粘贴到source.txt中<br>这里requests的安装详见附录<br>test.py如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-<span class="number">8</span></span><br><span class="line">#导入re库文件</span><br><span class="line">import re</span><br><span class="line">import requests #这里用来保存图片</span><br><span class="line"></span><br><span class="line">f=<span class="function"><span class="title">open</span><span class="params">(<span class="string">'source.txt'</span>,<span class="string">'r'</span>)</span></span></span><br><span class="line">html=f.<span class="function"><span class="title">read</span><span class="params">()</span></span></span><br><span class="line">f.<span class="function"><span class="title">close</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">#匹配图片网址</span><br><span class="line">url=re.<span class="function"><span class="title">findall</span><span class="params">(<span class="string">'img src="(.*?)" class="lessonimg"'</span>,html,re.S)</span></span> #查找条件</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> url:</span><br><span class="line">    print <span class="string">'loding: '</span>+each</span><br><span class="line">    pic=requests.<span class="function"><span class="title">get</span><span class="params">(each)</span></span></span><br><span class="line">    fp=<span class="function"><span class="title">open</span><span class="params">(<span class="string">'pic\\'</span>+str(i)</span></span>+<span class="string">'.jpg'</span>,<span class="string">'wb'</span>)</span><br><span class="line">    fp.<span class="function"><span class="title">write</span><span class="params">(pic.content)</span></span></span><br><span class="line">    fp.<span class="function"><span class="title">close</span><span class="params">()</span></span></span><br><span class="line">    i+=<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>运行后结果如下：<br><img src="/img/python/20.png" alt="image"></p>
<h1 id="u7B2C_u5341_u4E00_u7AE0__u5355_u7EBF_u7A0B_u722C_u866B"><a href="#u7B2C_u5341_u4E00_u7AE0__u5355_u7EBF_u7A0B_u722C_u866B" class="headerlink" title="第十一章 单线程爬虫"></a>第十一章 单线程爬虫</h1><h2 id="1-Requests_u4ECB_u7ECD"><a href="#1-Requests_u4ECB_u7ECD" class="headerlink" title="1.Requests介绍"></a>1.Requests介绍</h2><p>Requests：HTTP for Humans<br>完美替代python的urllib2模块</p>
<h2 id="2-_u7B2C_u4E00_u4E2A_u7F51_u9875_u722C_u866B"><a href="#2-_u7B2C_u4E00_u4E2A_u7F51_u9875_u722C_u866B" class="headerlink" title="2.第一个网页爬虫"></a>2.第一个网页爬虫</h2><p>使用Requests获取网页源代码，利用正则表达式获取自己想要的内容。<br>直接获取源代码或者修改http头获取源代码。<br>三行获取源代码：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#coding=utf-8</span></span><br><span class="line"><span class="preprocessor">#导入re库文件</span></span><br><span class="line">import requests</span><br><span class="line"><span class="preprocessor">#爬取python百度贴吧的源代码</span></span><br><span class="line">html=requests.<span class="keyword">get</span>(<span class="string">'http://tieba.baidu.com/f?ie=utf-8&amp;kw=python'</span>)</span><br><span class="line">print html.text</span><br></pre></td></tr></table></figure></p>
<p>运行如下：<br><img src="/img/python/22.png" alt="image"><br>但不是这三行能够获得所有网页的源代码；<br>因为一个网站会对访问它的程序进行检查，防止网络爬虫，所以需要伪装。伪装相当于让网站以为你是浏览器请求而非爬虫。<br>网页User-Agent获取方法：<br>打开要爬取的网页，右键选择审查元素-&gt;Network-&gt;Network下面左边随便选择找到右边对应的User-Agent。<br><img src="/img/python/23.png" alt="image"><br>如下则可伪装爬取网页源码：<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#coding=utf-8</span></span><br><span class="line"><span class="preprocessor">#导入re库文件</span></span><br><span class="line">import requests</span><br><span class="line"><span class="preprocessor">#爬取如下网站的源代码</span></span><br><span class="line"><span class="preprocessor">#html=requests.get('http://jp.tingroom.com/yuedu/yd300p/')</span></span><br><span class="line">header=&#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36 SE 2.X MetaSr 1.0'</span>&#125;</span><br><span class="line">html=requests.<span class="keyword">get</span>(<span class="string">'http://jp.tingroom.com/yuedu/yd300p/'</span>,headers=header)</span><br><span class="line">html.encoding=<span class="string">'utf-8'</span></span><br><span class="line">print html.text</span><br></pre></td></tr></table></figure></p>
<p>内容提取：使用正则表达式获得我们想要的内容<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#coding=utf-8</span></span><br><span class="line"><span class="preprocessor">#导入re库文件</span></span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line"><span class="preprocessor">#爬取如下网站的源代码</span></span><br><span class="line"><span class="preprocessor">#html=requests.get('http://jp.tingroom.com/yuedu/yd300p/')</span></span><br><span class="line">header=&#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.36 SE 2.X MetaSr 1.0'</span>&#125;</span><br><span class="line">html=requests.<span class="keyword">get</span>(<span class="string">'http://jp.tingroom.com/yuedu/yd300p/'</span>,headers=header)</span><br><span class="line">html.encoding=<span class="string">'utf-8'</span></span><br><span class="line">title=re.findall(<span class="string">'color:#666666;"&gt;(.*?)&lt;/span&gt;'</span>,html.text,re.S)</span><br><span class="line"><span class="keyword">for</span> each in title:</span><br><span class="line">    print each</span><br><span class="line"><span class="preprocessor">#输出</span></span><br><span class="line"><span class="preprocessor">#第二章 昔々、といってもせいぜい二十年ぐらい前のことなのだ...</span></span><br><span class="line"><span class="preprocessor">#挪威的森林（中日对照） 内容简介： 汉堡机场一曲忧郁的《挪...</span></span><br><span class="line"><span class="preprocessor">#藤野先生名文选读中日文对照 東京も格別のことはなかつた。上..</span></span><br><span class="line"><span class="preprocessor">#...</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-_u5411_u7F51_u9875_u63D0_u4EA4_u6570_u636E"><a href="#3-_u5411_u7F51_u9875_u63D0_u4EA4_u6570_u636E" class="headerlink" title="3.向网页提交数据"></a>3.向网页提交数据</h2><p>Get与Post介绍；分析目标网站；Requests的表单提交<br>Get是从服务器上获取数据，Post是向服务器传送数据；<br>Get通过构造url中的参数来实现功能，Post将数据放在header提交数据。<br>向网页提交数据-Requests表单提交：<br>核心方法：requests.post;<br>核心步骤:构造表单-提交表单-获取返回信息</p>
<p>有些网页如下：<br><img src="/img/python/24.png" alt="image"><br>点击show more显示更多，但是网页地址不会变。因为其使用了异步加载的技巧。<br>异步加载：先把网页的一些基本框架加载起来，然后剩下的信息需要哪里就加载哪里，可以大大提高网页的加载效率；<br>好比吃饭时做好一个菜上一个而非所有菜都好啦才上。<br>正是由于异步加载原因，我们利用原方法只能加载最开始显示的而不能加载点击show more显示的内容。<br>解决方法如下：<br>网页右键点击审查元素-&gt;network发现是空的，但是点击SHOW MORE之后如下：<br><img src="/img/python/25.png" alt="image"><br>点击出现的信息(图中左下角)如下：<br><img src="/img/python/26.png" alt="image"><br>说明采用了post向上一行的url地址提交了数据。继续往下有：<br><img src="/img/python/27.png" alt="image"><br>可以看到page:2 再点击show more有page:3 以此类推。<br>如下代码只能显示初始加载的源码：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-<span class="number">8</span></span><br><span class="line">import requests</span><br><span class="line">url=<span class="string">'https://www.crowdfunder.com/browse/deals'</span></span><br><span class="line">html=requests.<span class="function"><span class="title">get</span><span class="params">(url)</span></span><span class="class">.text</span></span><br><span class="line">print html</span><br></pre></td></tr></table></figure></p>
<p>而如下改进后代码则可以根据’page’:’1’#这里1可以换2,3,4…得到show more后的源代码。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">url=<span class="string">'https://www.crowdfunder.com/browse/deals&amp;template=false'</span></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">'entities_only'</span>:<span class="string">'true'</span>,<span class="comment">#这里true是字符串不是布尔值</span></span><br><span class="line">    <span class="string">'page'</span>:<span class="string">'1'</span> <span class="comment">#这里1可以改为2,3,...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">html_post=requests.<span class="built_in">get</span>(url,data=data)</span><br><span class="line">title=re.findall(<span class="string">'"card-title"&gt;(.*?)&lt;/div&gt;'</span>,html_post.<span class="keyword">text</span>,re.S)</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="operator">in</span> title:</span><br><span class="line">    print <span class="keyword">each</span></span><br></pre></td></tr></table></figure></p>
<p>上面代码：’page’:’1’ #这里1可以改为2,3,…<br>可以通过改变page后面的值为几得到第几次show more显示内容的源代码</p>
<h2 id="4-_u6781_u5BA2_u5B66_u9662_u8BFE_u7A0B_u722C_u866B"><a href="#4-_u6781_u5BA2_u5B66_u9662_u8BFE_u7A0B_u722C_u866B" class="headerlink" title="4.极客学院课程爬虫"></a>4.极客学院课程爬虫</h2><p>目标网站：<a href="http://www.jikexueyuan.com/course/" target="_blank" rel="external">http://www.jikexueyuan.com/course/</a><br>目标内容：获取前10页的课程名称，课程介绍，课程时间，课程等级，学习人数<br>知识点：Requests获取网页，re.sub换页，正则表达式匹配内容</p>
<p>目标网页如下：<br><img src="/img/python/28.png" alt="image"><br>第一页的网址和<a href="http://www.jikexueyuan.com/course/内容一样，第二页网址为http://www.jikexueyuan.com/course/?pageNum=2，以此类推。" target="_blank" rel="external">http://www.jikexueyuan.com/course/内容一样，第二页网址为http://www.jikexueyuan.com/course/?pageNum=2，以此类推。</a><br>点击开发者工具或者右键审查元素，如下再点击放大镜图标，之后点击网页上内容会跳到对应内容的代码，方便查看。<br><img src="/img/python/29.png" alt="image"><br>当然，点击代码也可以找到相应的页面内容。<br>分析代码以及与原网页对应课程对比如下：<br><img src="/img/python/30.png" alt="image"><br><img src="/img/python/31.png" alt="image"><br>for循环一一爬取可能会报错（如遇到没有课程说明的情况），这时候考虑先爬大再爬小的方法。<br>课程列表如下，可以从抓大着手：<br><img src="/img/python/32.png" alt="image"><br>可以通过输出获取的源代码利用相应的正则表达式技巧获得需要的内容<br>程序如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#这里的import语句其实并不是sys的第一次导入语句，也就是说这里其实可能是第二、三次进行sys模块的import，这里只是一个对sys的引用，只能reload才能进行重新加载。</span></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">"utf-8"</span>);<span class="comment">#修改编码方式和网页一样，不然中文乱码</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">spider</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u'开始爬取内容...'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getsource</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        html=requests.get(url)</span><br><span class="line">        <span class="keyword">return</span> html.text</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">changepage</span><span class="params">(self,url,total_page)</span>:</span></span><br><span class="line">        now_page=int(re.search(<span class="string">'pageNum=(\d+)'</span>,url,re.S).group(<span class="number">1</span>))</span><br><span class="line">        page_group=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(now_page,total_page+<span class="number">1</span>):<span class="comment">#因为range包含下边不包含上边的 所以用total_page+1</span></span><br><span class="line">            link=re.sub(<span class="string">'pageNum=\d+'</span>,<span class="string">'pageNum=%s'</span>%i,url,re.S)</span><br><span class="line">            page_group.append(link)</span><br><span class="line">        <span class="keyword">return</span> page_group</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">geteveryclass</span><span class="params">(self,source)</span>:</span><span class="comment">#获取每一门课程</span></span><br><span class="line">        text = re.findall(<span class="string">'&lt;ul class="cf" style="display: block;"&gt;(.*?)&lt;/ul&gt;'</span>,source, re.S)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">print</span> text</span><br><span class="line"><span class="comment">#  **************# 注意: 这里 .*? 不可以用 （.*?） 具体原因现在还没弄明白</span></span><br><span class="line">        everyclass=re.findall(<span class="string">'(&lt;li.*?&lt;/li&gt;)'</span>,text,re.S)</span><br><span class="line">        <span class="keyword">print</span> everyclass</span><br><span class="line">        <span class="keyword">return</span> everyclass</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getinfo</span><span class="params">(self,eachclass)</span>:</span></span><br><span class="line">        info=&#123;&#125; <span class="comment">#定义字典</span></span><br><span class="line">        txt=re.search(<span class="string">'&lt;h2 class="lesson-info-h2"&gt;(.*?)&lt;/h2&gt;'</span>,eachclass,re.S).group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">print</span> txt</span><br><span class="line">        info[<span class="string">'title'</span>]=re.search(<span class="string">'"&gt;(.*?)&lt;/a&gt;'</span>,txt,re.S).group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">print</span> info[<span class="string">'title'</span>]</span><br><span class="line">        info[<span class="string">'content'</span>]=re.search(<span class="string">'&lt;p style="height: 0px; opacity: 0; display: none;"&gt;\n\t\t\t(.*?)\n\t\t&lt;/p&gt;'</span>,eachclass,re.S).group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">print</span> info[<span class="string">'content'</span>]</span><br><span class="line">        timeandlevel=re.findall(<span class="string">'&lt;em&gt;(.*?)&lt;/em&gt;'</span>,eachclass,re.S)</span><br><span class="line">        info[<span class="string">'classtime'</span>]=timeandlevel[<span class="number">0</span>]</span><br><span class="line">        info[<span class="string">'classlevel'</span>]=timeandlevel[<span class="number">1</span>]</span><br><span class="line">        info[<span class="string">'learnnum'</span>]=re.search(<span class="string">'"learn-number"&gt;(.*?)&lt;/em&gt;'</span>,eachclass,re.S).group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> info</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">saveinfo</span><span class="params">(self,classinfo)</span>:</span></span><br><span class="line">        <span class="comment">#f=open('info.txt','a') #'a'追加内容</span></span><br><span class="line">        f=open(<span class="string">'info.txt'</span>, <span class="string">'w'</span>)  <span class="comment"># 'w'写，没有时创建，有时清空内容再写入  'r'读</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> classinfo:</span><br><span class="line">            f.writelines(<span class="string">'title:'</span>+each[<span class="string">'title'</span>]+<span class="string">'\n'</span>)</span><br><span class="line">            f.writelines(<span class="string">'content:'</span>+each[<span class="string">'content'</span>]+<span class="string">'\n'</span>)</span><br><span class="line">            f.writelines(<span class="string">'classtime:'</span>+each[<span class="string">'classtime'</span>]+<span class="string">'\n'</span>)</span><br><span class="line">            f.writelines(<span class="string">'classlevel:'</span>+each[<span class="string">'classlevel'</span>]+<span class="string">'\n'</span>)</span><br><span class="line">            f.writelines(<span class="string">'learnnum:'</span>+each[<span class="string">'learnnum'</span>]+<span class="string">'\n\n'</span>)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">'__main__'</span>:<span class="comment">#如果本程序自己运行</span></span><br><span class="line">    classinfo=[] <span class="comment">#创建一个列表用来存放课程信息</span></span><br><span class="line">    url=<span class="string">'http://www.jikexueyuan.com/course/?pageNum=1'</span></span><br><span class="line">    jikespider=spider()</span><br><span class="line">    all_links=jikespider.changepage(url,<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> all_links:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">u'正在处理页面：'</span>+link</span><br><span class="line">        html=jikespider.getsource(link)</span><br><span class="line">        everyclass=jikespider.geteveryclass(html)</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> everyclass:</span><br><span class="line">            info=jikespider.getinfo(each)</span><br><span class="line">            classinfo.append(info)</span><br><span class="line">        jikespider.saveinfo(classinfo)</span><br></pre></td></tr></table></figure></p>
<p>运行结果如下：<br><img src="/img/python/33.png" alt="image"></p>
<h1 id="u7B2C_u5341_u4E8C_u7AE0_XPath_u4E0E_u591A_u7EBF_u7A0B_u722C_u866B"><a href="#u7B2C_u5341_u4E8C_u7AE0_XPath_u4E0E_u591A_u7EBF_u7A0B_u722C_u866B" class="headerlink" title="第十二章 XPath与多线程爬虫"></a>第十二章 XPath与多线程爬虫</h1><h2 id="1-XPath_u4ECB_u7ECD_u4E0E_u914D_u7F6E"><a href="#1-XPath_u4ECB_u7ECD_u4E0E_u914D_u7F6E" class="headerlink" title="1.XPath介绍与配置"></a>1.XPath介绍与配置</h2><p>XPath是一门语言，可以在XML文档中查找信息<br>XPath支持HTML，XPath通过元素和属性进行导航<br>XPath可以用来提取信息，比正则表达式更加厉害，简单</p>
<p>安装lxml库：直接cmd下用pip install lxml即可<br>用法：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from lxml import etree</span><br><span class="line">Selector=etree.<span class="function"><span class="title">HTML</span><span class="params">(网页源代码)</span></span></span><br><span class="line">Selector.<span class="function"><span class="title">xpath</span><span class="params">(一段神奇的符号)</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-XPath_u7684_u4F7F_u7528"><a href="#2-XPath_u7684_u4F7F_u7528" class="headerlink" title="2.XPath的使用"></a>2.XPath的使用</h2><p>正则表达式与XPath的比喻：<br>正则表达式：极客大楼的左边是三角形大楼，右边是正方形大楼，全世界去找<br>XPath：极客大楼在北京xx路xx号</p>
<p>XPath与HTML结构：<br>树状结构；逐层展开；逐层定位；寻找独立节点。</p>
<p>网页实例(index.html):<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>XPath用法<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"content"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"useful"</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="title">li</span>&gt;</span>第一条信息<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>第二条信息<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>第三条信息<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"useless"</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="title">li</span>&gt;</span>不需要信息1<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>不需要信息2<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>不需要信息3<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"url"</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://bestzhangjin.com"</span>&gt;</span>我的博客<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://jikexueyuan.com"</span> <span class="attribute">title</span>=<span class="value">"极客学院课程库"</span>&gt;</span>极客学院<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>获取网页的XPath方法：手动分析法；Chrome生成法<br>手动分析法：html-&gt;body-&gt;div-&gt;ul[@useful]-&gt;li<br>Chrome生成法://*[@id=”useful”]/li</p>
<p>Chrome生成法获取技巧：<br><img src="/img/python/34.png" alt="image"><br>在浏览器中打开index.html选择审查元素；选中需要的元素如图中li的第一条信息右键copy xpath即可得到//<em>[@id=”useful”]/li[1]<br>//</em>[@id=”useful”]/li则可以得到id=”useful”元素的所有li中内容。</p>
<p>//:定位根节点<br>/:往下层寻找<br>提取文本内容:/text()<br>提取属性内容:/@xxxx</p>
<p>提取一般内容程序：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> lxml import etree</span><br><span class="line">html='''</span><br><span class="line"><span class="variable">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="variable">&lt;html&gt;</span></span><br><span class="line"><span class="variable">&lt;head lang="en"&gt;</span></span><br><span class="line">	<span class="variable">&lt;meta charset="utf-8" /&gt;</span></span><br><span class="line">    <span class="variable">&lt;title&gt;</span>XPath用法<span class="variable">&lt;/title&gt;</span></span><br><span class="line"><span class="variable">&lt;/head&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&lt;body&gt;</span></span><br><span class="line"><span class="variable">&lt;div id="content"&gt;</span></span><br><span class="line">	<span class="variable">&lt;ul id="useful"&gt;</span></span><br><span class="line">    	<span class="variable">&lt;li&gt;</span>第一条信息<span class="variable">&lt;/li&gt;</span></span><br><span class="line">        <span class="variable">&lt;li&gt;</span>第二条信息<span class="variable">&lt;/li&gt;</span></span><br><span class="line">        <span class="variable">&lt;li&gt;</span>第三条信息<span class="variable">&lt;/li&gt;</span></span><br><span class="line">    <span class="variable">&lt;/ul&gt;</span></span><br><span class="line">    <span class="variable">&lt;ul id="useless"&gt;</span></span><br><span class="line">    	<span class="variable">&lt;li&gt;</span>不需要信息<span class="number">1</span><span class="variable">&lt;/li&gt;</span></span><br><span class="line">        <span class="variable">&lt;li&gt;</span>不需要信息<span class="number">2</span><span class="variable">&lt;/li&gt;</span></span><br><span class="line">        <span class="variable">&lt;li&gt;</span>不需要信息<span class="number">3</span><span class="variable">&lt;/li&gt;</span></span><br><span class="line">    <span class="variable">&lt;/ul&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">&lt;div id="url"&gt;</span></span><br><span class="line">    	<span class="variable">&lt;a href="http://bestzhangjin.com"&gt;</span>我的博客<span class="variable">&lt;/a&gt;</span></span><br><span class="line">        <span class="variable">&lt;a href="http://jikexueyuan.com" title="极客学院课程库"&gt;</span>极客学院<span class="variable">&lt;/a&gt;</span></span><br><span class="line">    <span class="variable">&lt;/div&gt;</span></span><br><span class="line"><span class="variable">&lt;/div&gt;</span></span><br><span class="line"><span class="variable">&lt;/body&gt;</span></span><br><span class="line"><span class="variable">&lt;/html&gt;</span></span><br><span class="line">'''</span><br><span class="line">selector=etree.HTML(html)</span><br><span class="line"><span class="comment">#提取文本</span></span><br><span class="line">content=selector.xpath('//ul[@id=<span class="string">"useful"</span>]/li/text()')</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> content:</span><br><span class="line">    print each</span><br><span class="line"><span class="comment">#输出结果：</span></span><br><span class="line"><span class="comment">#第一条信息</span></span><br><span class="line"><span class="comment">#第二条信息</span></span><br><span class="line"><span class="comment">#第三条信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提取属性</span></span><br><span class="line">link=selector.xpath('//a/@href')<span class="comment">#从a标签开始寻找其下面的href属性</span></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> link:</span><br><span class="line">    print each</span><br><span class="line"><span class="comment">#输出结果:</span></span><br><span class="line"><span class="comment">#http://bestzhangjin.com</span></span><br><span class="line"><span class="comment">#http://jikexueyuan.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提取a标签里面的title</span></span><br><span class="line">title=selector.xpath('//a/@title')</span><br><span class="line"><span class="comment">#返回结果title是一个列表</span></span><br><span class="line">print title  <span class="comment">##[u'\u6781\u5ba2\u5b66\u9662\u8bfe\u7a0b\u5e93']</span></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> title:</span><br><span class="line">    print each  <span class="comment">#极客学院课程库</span></span><br><span class="line">print title[<span class="number">0</span>]  <span class="comment">#极客学院课程库</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-xpath_u7279_u6B8A_u4F7F_u7528"><a href="#3-xpath_u7279_u6B8A_u4F7F_u7528" class="headerlink" title="3.xpath特殊使用"></a>3.xpath特殊使用</h2><p>情况：(1)以相同字符开头；(2)标签套标签。<br>(1)以相同字符开头<br>方法：starts-with(@属性名称，属性字符相同部分)<br>eg：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"test-1"</span>&gt;内容<span class="number">1</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"test-2"</span>&gt;内容<span class="number">2</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"test-3"</span>&gt;内容<span class="number">3</span>&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>(2)标签套标签<br>方法:string(.)<br>eg：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"class"</span>&gt;</span>你好，</span><br><span class="line">	<span class="tag">&lt;<span class="title">font</span> <span class="attribute">color</span>=<span class="value">red</span>&gt;</span>你的电话是多少啊?<span class="tag">&lt;/<span class="title">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>应用实例:<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> lxml import etree</span><br><span class="line">html='''</span><br><span class="line"><span class="variable">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="variable">&lt;html&gt;</span></span><br><span class="line"><span class="variable">&lt;head lang="en"&gt;</span></span><br><span class="line">	<span class="variable">&lt;meta charset="utf-8" /&gt;</span></span><br><span class="line">    <span class="variable">&lt;title&gt;</span>XPath用法<span class="variable">&lt;/title&gt;</span></span><br><span class="line"><span class="variable">&lt;/head&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&lt;body&gt;</span></span><br><span class="line">    <span class="variable">&lt;div id="test1"&gt;</span>内容<span class="number">1</span><span class="variable">&lt;/div&gt;</span></span><br><span class="line">    <span class="variable">&lt;div id="test2"&gt;</span>内容<span class="number">2</span><span class="variable">&lt;/div&gt;</span></span><br><span class="line">    <span class="variable">&lt;div id="test3"&gt;</span>内容<span class="number">3</span><span class="variable">&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">&lt;div id="long"&gt;</span></span><br><span class="line">        我左青龙</span><br><span class="line">        <span class="variable">&lt;span id="tiger"&gt;</span></span><br><span class="line">            右白虎</span><br><span class="line">            <span class="variable">&lt;ul&gt;</span>上朱雀,</span><br><span class="line">                <span class="variable">&lt;li&gt;</span>下玄武。<span class="variable">&lt;/li&gt;</span></span><br><span class="line">            <span class="variable">&lt;/ul&gt;</span></span><br><span class="line">            老牛在当中,</span><br><span class="line">        <span class="variable">&lt;/span&gt;</span></span><br><span class="line">        龙头在胸口。</span><br><span class="line">    <span class="variable">&lt;/div&gt;</span></span><br><span class="line"><span class="variable">&lt;/body&gt;</span></span><br><span class="line"><span class="variable">&lt;/html&gt;</span></span><br><span class="line">'''</span><br><span class="line">selector=etree.HTML(html)</span><br><span class="line"><span class="comment">#以相同字符开头 提取文本</span></span><br><span class="line">content=selector.xpath('//div[starts-with(@id,<span class="string">"test"</span>)]/text()')</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> content:</span><br><span class="line">    print each</span><br><span class="line"><span class="comment">#  输出：</span></span><br><span class="line"><span class="comment"># 内容1</span></span><br><span class="line"><span class="comment"># 内容2</span></span><br><span class="line"><span class="comment"># 内容3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#标签套标签 提取其中的所有文字</span></span><br><span class="line"><span class="comment">#如下方法只能提取div中内容，div中标签中内容不可提取</span></span><br><span class="line">content1=selector.xpath('//div[@id=<span class="string">"long"</span>]/text()')</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> content1:</span><br><span class="line">    print each</span><br><span class="line"><span class="comment">#输出:</span></span><br><span class="line"><span class="comment">#我左青龙</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#龙头在胸口。</span></span><br><span class="line"><span class="comment"># **************应该用如下方法</span></span><br><span class="line">data=selector.xpath('//div[@id=<span class="string">"long"</span>]')[<span class="number">0</span>] <span class="comment">#列表只有一个元素 故用[0]</span></span><br><span class="line">print data <span class="comment">#输出: &lt;Element div at 0x2955bc8&gt;</span></span><br><span class="line">info=data.xpath('string(.)')</span><br><span class="line">print info</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment">#我左青龙</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#右白虎</span></span><br><span class="line"><span class="comment">#上朱雀,</span></span><br><span class="line"><span class="comment">#下玄武。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#老牛在当中,</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#龙头在胸口。</span></span><br><span class="line">content2=info.replace('\n','').replace(' ','')<span class="comment">#\n和' '用''替代</span></span><br><span class="line">print content2</span><br><span class="line"><span class="comment">#输出:</span></span><br><span class="line"><span class="comment">#我左青龙右白虎上朱雀,下玄武。老牛在当中,龙头在胸口。</span></span><br></pre></td></tr></table></figure></p>
<h2 id="4-Python__u5E76_u884C_u5316_u4ECB_u7ECD_u4E0E_u6F14_u793A"><a href="#4-Python__u5E76_u884C_u5316_u4ECB_u7ECD_u4E0E_u6F14_u793A" class="headerlink" title="4.Python 并行化介绍与演示"></a>4.Python 并行化介绍与演示</h2><p>并行化(多线程)和Map的使用。<br>Python由于历史原因，多线程不是真正的多线程，但仍然可以提高爬虫的效率，下面进入主题。<br>多个线程同时处理：高效快速<br>Map函数包办了序列操作，参数传递和结果保存等一系列操作。<br>应用:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing<span class="class">.dummy</span> import Pool</span><br><span class="line">pool=<span class="function"><span class="title">Pool</span><span class="params">(<span class="number">4</span>)</span></span> #这里<span class="number">4</span>代表电脑<span class="number">4</span>核的 <span class="number">8</span>核电脑可以换成<span class="number">8</span>速度更快</span><br><span class="line">results=pool.<span class="function"><span class="title">map</span><span class="params">(爬取函数,网址列表)</span></span></span><br></pre></td></tr></table></figure></p>
<p>实例：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-<span class="number">8</span></span><br><span class="line">from multiprocessing<span class="class">.dummy</span> import Pool as ThreadPool</span><br><span class="line">import requests</span><br><span class="line">import <span class="tag">time</span></span><br><span class="line"></span><br><span class="line">def <span class="function"><span class="title">getsource</span><span class="params">(url)</span></span>:</span><br><span class="line">    html=requests.<span class="function"><span class="title">get</span><span class="params">(url)</span></span></span><br><span class="line"></span><br><span class="line">urls=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="tag">i</span> <span class="keyword">in</span> <span class="function"><span class="title">range</span><span class="params">(<span class="number">1</span>,<span class="number">21</span>)</span></span>:</span><br><span class="line">    newpage=<span class="string">'http://tieba.baidu.com/p/3522395718?pn='</span> + <span class="function"><span class="title">str</span><span class="params">(i)</span></span></span><br><span class="line">    urls.<span class="function"><span class="title">append</span><span class="params">(newpage)</span></span></span><br><span class="line"></span><br><span class="line">time1=<span class="tag">time</span>.<span class="function"><span class="title">time</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">for</span> <span class="tag">i</span> <span class="keyword">in</span> urls:</span><br><span class="line">    <span class="id">#print</span> <span class="tag">i</span></span><br><span class="line">    <span class="function"><span class="title">getsource</span><span class="params">(i)</span></span></span><br><span class="line">time2=<span class="tag">time</span>.<span class="function"><span class="title">time</span><span class="params">()</span></span></span><br><span class="line">print u<span class="string">'单线程耗时:'</span>+<span class="function"><span class="title">str</span><span class="params">(time2-time1)</span></span></span><br><span class="line"></span><br><span class="line">pool=<span class="function"><span class="title">ThreadPool</span><span class="params">(<span class="number">4</span>)</span></span></span><br><span class="line">time3=<span class="tag">time</span>.<span class="function"><span class="title">time</span><span class="params">()</span></span></span><br><span class="line">#使用map函数连接函数和列表</span><br><span class="line">results=pool.<span class="function"><span class="title">map</span><span class="params">(getsource,urls)</span></span></span><br><span class="line">pool.<span class="function"><span class="title">close</span><span class="params">()</span></span></span><br><span class="line">pool.<span class="function"><span class="title">join</span><span class="params">()</span></span></span><br><span class="line">time4=<span class="tag">time</span>.<span class="function"><span class="title">time</span><span class="params">()</span></span></span><br><span class="line">print u<span class="string">'多线程耗时:'</span>+<span class="function"><span class="title">str</span><span class="params">(time4-time3)</span></span></span><br><span class="line"></span><br><span class="line">#************输出</span><br><span class="line">#单线程耗时:<span class="number">12.7400000095</span></span><br><span class="line">#多线程耗时:<span class="number">4.02600002289</span></span><br></pre></td></tr></table></figure></p>
<h2 id="5-_u767E_u5EA6_u8D34_u5427_u722C_u866B"><a href="#5-_u767E_u5EA6_u8D34_u5427_u722C_u866B" class="headerlink" title="5.百度贴吧爬虫"></a>5.百度贴吧爬虫</h2><p>目标网站:<a href="http://tieba.baidu.com/p/3522395718" target="_blank" rel="external">http://tieba.baidu.com/p/3522395718</a><br>目标内容:跟帖用户名,跟帖内容，跟帖时间<br>知识点：<br>Requests获取网页<br>XPath提取内容<br>map实现多线程爬虫</p>
<p>(1)打开网页发现网站第i页就是<a href="http://tieba.baidu.com/p/3522395718?pn=i" target="_blank" rel="external">http://tieba.baidu.com/p/3522395718?pn=i</a><br>(2)源码分析<br><img src="/img/python/35.png" alt="image"><br><img src="/img/python/36.png" alt="image"><br>(3)程序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json<span class="comment">#因为源码中有json格式 当然也可以用正则表达式解析</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line"></span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">towrite</span><span class="params">(contentdict)</span>:</span></span><br><span class="line">    f.writelines(<span class="string">u'回帖时间:'</span>+str(contentdict[<span class="string">'topic_reply_time'</span>])+<span class="string">'\n'</span>)</span><br><span class="line">    f.writelines(<span class="string">u'回帖内容:'</span>+unicode(contentdict[<span class="string">'topic_reply_content'</span>])+<span class="string">'\n'</span>)</span><br><span class="line">    f.writelines(<span class="string">u'回帖人:'</span>+contentdict[<span class="string">'user_name'</span>]+<span class="string">'\n\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spider</span><span class="params">(url)</span>:</span></span><br><span class="line">    html=requests.get(url)</span><br><span class="line">    selector=etree.HTML(html.text)</span><br><span class="line">    content_filed=selector.xpath(<span class="string">'//div[@class="l_post j_l_post l_post_bright  "]'</span>)</span><br><span class="line">    item=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> content_filed:</span><br><span class="line">        reply_info=json.loads(each.xpath(<span class="string">'@data-field'</span>)[<span class="number">0</span>].replace(<span class="string">'&amp;quot'</span>,<span class="string">''</span>))</span><br><span class="line">        <span class="keyword">print</span> reply_info</span><br><span class="line">        author=reply_info[<span class="string">'author'</span>][<span class="string">'user_name'</span>]</span><br><span class="line">        <span class="keyword">print</span> author</span><br><span class="line">        content=each.xpath(<span class="string">'div[@class="d_post_content_main"]/div/cc/div[@class="d_post_content j_d_post_content  clearfix"]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">print</span> content</span><br><span class="line">        reply_time=reply_info[<span class="string">'content'</span>][<span class="string">'date'</span>]</span><br><span class="line">        <span class="keyword">print</span> reply_time</span><br><span class="line">        item[<span class="string">'user_name'</span>]=author</span><br><span class="line">        item[<span class="string">'topic_reply_content'</span>]=content</span><br><span class="line">        item[<span class="string">'topic_reply_time'</span>]=reply_time</span><br><span class="line">        towrite(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    pool=ThreadPool(<span class="number">4</span>)</span><br><span class="line">    f=open(<span class="string">'content.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">    page=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">        newpage=<span class="string">'http://tieba.baidu.com/p/3522395718?pn='</span>+str(i)</span><br><span class="line">        page.append(newpage)</span><br><span class="line">       <span class="comment"># spider(newpage)</span></span><br><span class="line">        <span class="keyword">print</span> newpage</span><br><span class="line">    <span class="keyword">print</span> page</span><br><span class="line">    results=pool.map(spider,page)</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure></p>
<p>运行结果:<br><img src="/img/python/37.png" alt="image"></p>
<h1 id="u7B2C_u5341_u4E09_u7AE0_Python_u64CD_u4F5C_u6570_u636E_u5E93_u2014_u2014MySQL_u7BC7"><a href="#u7B2C_u5341_u4E09_u7AE0_Python_u64CD_u4F5C_u6570_u636E_u5E93_u2014_u2014MySQL_u7BC7" class="headerlink" title="第十三章 Python操作数据库——MySQL篇"></a>第十三章 Python操作数据库——MySQL篇</h1><h2 id="1-_u6570_u636E_u5E93_u79CD_u7C7B_u6982_u8FF0"><a href="#1-_u6570_u636E_u5E93_u79CD_u7C7B_u6982_u8FF0" class="headerlink" title="1.数据库种类概述"></a>1.数据库种类概述</h2><p>数据库分类：<br>(1)SQL:结构化查询语言和NoSQL:泛指非关系型数据库<br>(2)单机(数据库运行在一台机器上)和分布式(数据库运行在服务器集群上)<br>(3)文件型(数据放硬盘)和内存型(数据放内存里)<br>(4)批处理(将SQL分成MR任务)和分布式(分级查询之后汇总)<br><img src="/img/python/38.png" alt="image"><br><img src="/img/python/39.png" alt="image"><br><img src="/img/python/40.png" alt="image"><br>mysql也可以搭分布式，只是用的少<br><img src="/img/python/41.png" alt="image"><br><img src="/img/python/42.png" alt="image"><br>云平台AWS（亚马逊）：<br><img src="/img/python/43.png" alt="image"></p>
<h2 id="2-MySQL__u6982_u8FF0_u53CA_u57FA_u672C_u4F7F_u7528"><a href="#2-MySQL__u6982_u8FF0_u53CA_u57FA_u672C_u4F7F_u7528" class="headerlink" title="2.MySQL 概述及基本使用"></a>2.MySQL 概述及基本使用</h2><p>可以用AWS(亚马逊)中启动MYSQL，免费用一年，但是注册需要信息较多，这里直接用自己电脑上的mysql讲解，mysql部分见博客的mysql.<br>mysql安装见博客mysql部分；mysql驱动安装见附录。<br>这里</p>
<h1 id="u9644_u5F55_uFF1A_u5DE5_u5177_u5305_u5B89_u88C5"><a href="#u9644_u5F55_uFF1A_u5DE5_u5177_u5305_u5B89_u88C5" class="headerlink" title="附录：工具包安装"></a>附录：工具包安装</h1><h2 id="1-easy_install"><a href="#1-easy_install" class="headerlink" title="1.easy_install"></a>1.easy_install</h2><p>easy_install是一个python的扩展包，主要是用来简化python安装第三方安装包，在安装了easy_install之后，安装python第三方安装包就只需要在命令行中输入：easy_install packagename，然后程序会自动搜索相应版本的安装包并配置各种文件，免去了手工下载安装的复杂度。<br>搜索easy_install    下载文件ez_setup.py<br>cmd下python ez_setup.py就可以安装成功<br>然后就会在python的安装目录中生成scripts目录，其中有easy_install.exe<br>将scripts目录配置环境变量到path就可以用啦<br>备注：少使用easy_install，因为easy_install只能安装不能卸载<br>一般安装用pip.</p>
<h2 id="2-pip"><a href="#2-pip" class="headerlink" title="2.pip"></a>2.pip</h2><p>pip install packagename可以安装工具包<br>cmd下easy_inatall pip安装好pip就可以直接用</p>
<h2 id="3-requests"><a href="#3-requests" class="headerlink" title="3.requests"></a>3.requests</h2><p>requests是python的一个HTTP客户端库。<br>win系统，下载了安装包（网页中download the zipball处链接），然后$ python setup.py install就装好了。<br>当然，有easy_install或pip的朋友可以直接使用：easy_install requests或者pip install requests来安装。<br>在IDLE中输入import requests，如果没提示错误，那说明已经安装成功了！</p>
<h2 id="4-mysql_u9A71_u52A8"><a href="#4-mysql_u9A71_u52A8" class="headerlink" title="4.mysql驱动"></a>4.mysql驱动</h2><p>网站<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python" target="_blank" rel="external">http://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python</a><br>下载MySQL_python-1.2.5-cp27-none-win_amd64.whl<br>在下载目录下运行pip install MySQL_python-1.2.5-cp27-none-win_amd64.whl</p>
<h1 id="u9644_u5F55_uFF1A_u5E38_u89C1_u95EE_u9898_u89E3_u51B3"><a href="#u9644_u5F55_uFF1A_u5E38_u89C1_u95EE_u9898_u89E3_u51B3" class="headerlink" title="附录：常见问题解决"></a>附录：常见问题解决</h1><h2 id="1-_u649E_u5899_u89E3_u51B3_u65B9_u6CD5"><a href="#1-_u649E_u5899_u89E3_u51B3_u65B9_u6CD5" class="headerlink" title="1.撞墙解决方法"></a>1.撞墙解决方法</h2><p>撞墙用如下网站：这里有基本上的python第三方库<br><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a><br>进入网页使用Ctrl+f可以进行搜索下载：<br><img src="/img/python/21.png" alt="image"><br>可以下载得到一个后缀名为.whl的文件<br>下载完后将后缀名.whl改为.zip然后解压将解压的文件夹放到python安装目录的Lib目录下即可。</p>
<h2 id="2-easy_install__u6216_u8005pip__u5B89_u88C5_u65F6_u51FA_u73B0unable_to_find_vcvarsall-bat"><a href="#2-easy_install__u6216_u8005pip__u5B89_u88C5_u65F6_u51FA_u73B0unable_to_find_vcvarsall-bat" class="headerlink" title="2.easy_install 或者pip 安装时出现unable to find vcvarsall.bat"></a>2.easy_install 或者pip 安装时出现unable to find vcvarsall.bat</h2><p>很多python 库实际上使用c或者c++写的，所以安装编译时会需要用到msvc的东西；如果你的机器里没有装VS或者注册表设置不太对的话，就会报错。<br>微软出了一个msi包来解决这个问题：<br>Microsoft Visual C++ Compiler for Python 2.7<br>下载地址：<br><a href="http://www.microsoft.com/en-us/download/details.aspx?id=44266" target="_blank" rel="external">http://www.microsoft.com/en-us/download/details.aspx?id=44266</a> </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要内容：Python<br>]]>
    
    </summary>
    
      <category term="Python" scheme="http://www.bestzhangjin.com/tags/Python/"/>
    
      <category term="Python" scheme="http://www.bestzhangjin.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[U盘装Windows10/CentOS双系统]]></title>
    <link href="http://www.bestzhangjin.com/2016/04/27/centos_windows/"/>
    <id>http://www.bestzhangjin.com/2016/04/27/centos_windows/</id>
    <published>2016-04-27T08:31:00.000Z</published>
    <updated>2017-10-11T13:36:20.106Z</updated>
    <content type="html"><![CDATA[<p>本文以原电脑没有系统和数据操作，有系统或者数据的可以部分采纳！<br><a id="more"></a></p>
<h1 id="1-_u78C1_u76D8_u5206_u533A"><a href="#1-_u78C1_u76D8_u5206_u533A" class="headerlink" title="1.磁盘分区"></a>1.磁盘分区</h1><p>将磁盘分为一个主分区+2个逻辑分区+一个空闲盘，主分区用来装windows系统,空闲盘用来装centos系统。我的分区如下：<br><img src="/img/centos_windows/1.png" alt="image"></p>
<h1 id="2-windows_u7CFB_u7EDF_u5B89_u88C5"><a href="#2-windows_u7CFB_u7EDF_u5B89_u88C5" class="headerlink" title="2.windows系统安装"></a>2.windows系统安装</h1><p>windows系统安装较为简单，网上教程也多，这里不再详述！安装到主分区即可！</p>
<h1 id="3-centos_u5B89_u88C5"><a href="#3-centos_u5B89_u88C5" class="headerlink" title="3.centos安装"></a>3.centos安装</h1><p>制作centos系统U盘，U盘启动，<br>选择Install or upgrade an existing system<br>选择语言(chinese(simplified))<br>选择键盘格式(us)<br>选择installation method:Hard drive<br>选择Select Partition:/dev/sda4  (选择sda项–就是有系统盘U盘项)备注：每个电脑不一样，有些是sdb,一般选择与其余不一样的就行。<br>之后如下：<br><img src="/img/centos_windows/2.png" alt="image"><br>点击下一步<br>选择基本储存设备，点击下一步<br>设置主机名，点击下一步<br>选择时钟（默认上海即可），下一步<br>设置密码，下一步<br>下面的设置较为关键！<br>选择哪种类型的安装，不能使用所有空间，否则电脑所有东西全部清空，选择自定义布局 如下：<br><img src="/img/centos_windows/3.png" alt="image"><br>点击下一步，弹出窗口如下：<br><img src="/img/centos_windows/4.png" alt="image"><br>谨记我们建立分区要点在那个空闲上面，进行创建，否则其他盘数据将丢失！<br>下面进行分区，我具体操作如下三步：<br>（1）/boot(启动分区)<br>选中空闲盘，点击右下角的创建按钮，选择标准分区，点击创建<br><img src="/img/centos_windows/5.png" alt="image"><br>之后选择如下（sda项不选，这里分区大小依每个人自己而定，盘小也可以只分100-200M）：<br><img src="/img/centos_windows/6.png" alt="image"><br>点击确定。</p>
<p>(2)Swap(交换空间)<br>通常设置为1-2G，一般内存小于2G时，设置为内存的2倍;内存大于或等于2G时，设置为2G!<br>选中空闲，点击创建，选择标准分区，点击创建，设置如下：<br><img src="/img/centos_windows/7.png" alt="image"></p>
<p>(3)/(根分区)<br>选中空闲盘，点击右下角的创建按钮，选择标准分区，点击创建,剩余空闲空间大小全部设置为其大小。如下：<br><img src="/img/centos_windows/8.png" alt="image"></p>
<p>设置完毕后如下：<br><img src="/img/centos_windows/9.png" alt="image"><br>点击下一步。点击将修改写入磁盘。<br>之后弹出的界面需要仔细设置，点击更换设备，主引导记录选择MBR项，BIOS驱动器顺序选择第一项为电脑硬盘(sdb),第二才是U盘(sda).引导装载程序操作系统列表的Other代表的是windows系统，为了更加直观，建议将其编辑为windows或者windows10.设置完后如下：<br><img src="/img/centos_windows/10.png" alt="image"><br>之后点击下一步<br>下面一般默认选择即可，以后自定义和现在自定义建议选择现在自定义可以安装过程中更新自己选中的程序或者服务。<br>之后下一步就开始安装啦！<br>安装完毕显示恭喜你，已经成功安装，点击重新引导重新启动。<br>重启后会进入设置界面，这里比较简单，就是设置用户名密码什么的，设置完后就进入系统啦。如此系统安装完成。</p>
<h1 id="4-_u542F_u52A8_u8BBE_u7F6E"><a href="#4-_u542F_u52A8_u8BBE_u7F6E" class="headerlink" title="4.启动设置"></a>4.启动设置</h1><p>在centos系统下，修改文件/etc/grub.conf，打开文件如下：<br><img src="/img/centos_windows/11.png" alt="image"><br>改动后如下：<br><img src="/img/centos_windows/12.png" alt="image"><br>之后保存重启系统。<br><img src="/img/centos_windows/13.png" alt="image"><br>如上显示window10将在10s后启动，此时不点击任何键将启动windows10，点击回车可以显示如下：<br><img src="/img/centos_windows/14.png" alt="image"><br>选择自己要进入的系统即可！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文以原电脑没有系统和数据操作，有系统或者数据的可以部分采纳！<br>]]>
    
    </summary>
    
      <category term="CentOS" scheme="http://www.bestzhangjin.com/tags/CentOS/"/>
    
      <category term="系统" scheme="http://www.bestzhangjin.com/categories/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CentOS与大数据处理]]></title>
    <link href="http://www.bestzhangjin.com/2016/04/25/CentOS/"/>
    <id>http://www.bestzhangjin.com/2016/04/25/CentOS/</id>
    <published>2016-04-25T01:57:00.000Z</published>
    <updated>2017-10-11T13:36:30.954Z</updated>
    <content type="html"><![CDATA[<p>主要内容：<br><a id="more"></a></p>
<h1 id="u7B2C_u4E00_u7AE0_centos_u5E38_u89C1_u95EE_u9898"><a href="#u7B2C_u4E00_u7AE0_centos_u5E38_u89C1_u95EE_u9898" class="headerlink" title="第一章 centos常见问题"></a>第一章 centos常见问题</h1><h2 id="1-_u66F4_u65B0"><a href="#1-_u66F4_u65B0" class="headerlink" title="1.更新"></a>1.更新</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># yum check-update</span></span><br><span class="line"><span class="preprocessor"># yum update -y</span></span><br></pre></td></tr></table></figure>
<h2 id="2-_u7F51_u9875_u89C6_u9891_u64AD_u653E_u95EE_u9898"><a href="#2-_u7F51_u9875_u89C6_u9891_u64AD_u653E_u95EE_u9898" class="headerlink" title="2.网页视频播放问题"></a>2.网页视频播放问题</h2><p>将下载的flash安装包.tar.gz解压到/home/用户名/.mozilla/plugins下即可<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf <span class="class">.tar</span><span class="class">.gz</span>文件 -C 解压到的目录</span><br></pre></td></tr></table></figure></p>
<h1 id="u7B2C_u4E8C_u7AE0_hadoop_u5B89_u88C5_u524D_u671F_u77E5_u8BC6"><a href="#u7B2C_u4E8C_u7AE0_hadoop_u5B89_u88C5_u524D_u671F_u77E5_u8BC6" class="headerlink" title="第二章 hadoop安装前期知识"></a>第二章 hadoop安装前期知识</h1><h2 id="1-_u901A_u8FC7_u4E3B_u673A_u540D_u4EE3_u66FFip_u8BBF_u95EE_u4E3B_u673A"><a href="#1-_u901A_u8FC7_u4E3B_u673A_u540D_u4EE3_u66FFip_u8BBF_u95EE_u4E3B_u673A" class="headerlink" title="1.通过主机名代替ip访问主机"></a>1.通过主机名代替ip访问主机</h2><p>主机名修改：<br>su下命令:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>sysconfig<span class="regexp">/network</span></span><br></pre></td></tr></table></figure></p>
<p>修改里面的HOSTNAME就可以，之后重启机器或者命令sudo hostname 你的新主机名，即可生效！需要exit后重新登录一下发现改变。<br>可以通过配置实现主机名与ip一一对应。需要在su下操作。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>hosts</span><br></pre></td></tr></table></figure></p>
<p>备注：windows在C:\Windows\System32\drivers\etc\hosts中可以改。<br>在文件后面加上需要的ip与对应主机名即可：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">ip</span>地址 主机名</span><br></pre></td></tr></table></figure></p>
<p>集群搭建需要全部都配置这个文件！<br>然后<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ping</span> 主机名</span><br></pre></td></tr></table></figure></p>
<p>可以连通。</p>
<h2 id="2-_u67E5_u770Bhodoop_u7248_u672C64_u4F4D_u8FD8_u662F32_u4F4D"><a href="#2-_u67E5_u770Bhodoop_u7248_u672C64_u4F4D_u8FD8_u662F32_u4F4D" class="headerlink" title="2.查看hodoop版本64位还是32位"></a>2.查看hodoop版本64位还是32位</h2><p>解压后进入$hadoop_home/lib/native,使用file命令。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">file</span> <span class="tag">libhadoop</span><span class="class">.so</span><span class="class">.1</span><span class="class">.0</span><span class="class">.0</span></span><br></pre></td></tr></table></figure></p>
<h1 id="u7B2C_u4E09_u7AE0_centos_u642D_u5EFAhadoop_u73AF_u5883"><a href="#u7B2C_u4E09_u7AE0_centos_u642D_u5EFAhadoop_u73AF_u5883" class="headerlink" title="第三章 centos搭建hadoop环境"></a>第三章 centos搭建hadoop环境</h1><h2 id="1-jdk_u5B89_u88C5"><a href="#1-jdk_u5B89_u88C5" class="headerlink" title="1.jdk安装"></a>1.jdk安装</h2><p>下载jdk压缩包解压到目录/home/用户名/software/java/下，然后配置环境变量，vi ~/.bashrc在后面添加如下代码：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/home/用户名/software/java/jdk1.<span class="number">8.0_74</span></span><br><span class="line">export JAVA_BIN=<span class="variable">$JAVA</span>_HOME/bin</span><br><span class="line">export JAVA_LIB=<span class="variable">$JAVA</span>_HOME/lib</span><br><span class="line">export CLASSPATH=.:<span class="variable">$JAVA</span>_LIB/tools.jar:<span class="variable">$JAVA</span>_LIB/dt.jar</span><br><span class="line">export PATH=<span class="variable">$JAVA</span>_BIN:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p>
<p>输入生效命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p>
<p>有人说上面针对当前用户有效，针对所有用户有效需要在/etc/profile下配置，然后再source /etc/profile生效。<br>现在在任意目录下运行java,javac有反应，不会提示命令不存在，说明jdk安装成功！</p>
<h2 id="2-hadoop_u914D_u7F6E"><a href="#2-hadoop_u914D_u7F6E" class="headerlink" title="2.hadoop配置"></a>2.hadoop配置</h2><p>下载hadoop并解压到目录hadoop下，进入其etc目录改配置。<br>备注：cmd文档代表在windows下的，而sh文档代表在linux下的。<br>(1) hadoop-env.sh<br>env==environment环境变量，修改内容：JAVA_HOME。<br>输入命令：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vi</span> hadoop-env.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p>
<p>打开文档找到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#The java implementation to use.</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>将其改为绝对路径，因为不改的话经常找不到java目录。修改后如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># The java implementation to use.</span></span><br><span class="line"><span class="keyword">export</span> JAVA_HOME=/home/zhang/software/java/jdk1<span class="number">.8</span><span class="number">.0</span>_74</span><br></pre></td></tr></table></figure></p>
<p>(2) core-site.xml<br>找到<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;configuration&gt;</span></span><br><span class="line"><span class="tag">&lt;/configuration&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>添加如下：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;configuration&gt;</span></span><br><span class="line"><span class="variable">&lt;property&gt;</span></span><br><span class="line"><span class="variable">&lt;name&gt;</span>fs.<span class="keyword">default</span>FS<span class="variable">&lt;/name&gt;</span></span><br><span class="line"><span class="variable">&lt;value&gt;</span>hdfs://zhang:<span class="number">9000</span>/<span class="variable">&lt;/value&gt;</span></span><br><span class="line"><span class="variable">&lt;/property&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&lt;property&gt;</span></span><br><span class="line"><span class="variable">&lt;name&gt;</span>hadoop.tmp.dir<span class="variable">&lt;/name&gt;</span></span><br><span class="line"><span class="variable">&lt;value&gt;</span>/home/zhang/software/hadoop/data/<span class="variable">&lt;/value&gt;</span></span><br><span class="line"><span class="variable">&lt;/property&gt;</span></span><br><span class="line"><span class="variable">&lt;/configuration&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>fs.defaultFS 默认文件系统</p>
<p><value>hdfs://zhang:9000/</value> 采用uri格式，hdfs-协议为hdfs,zhang-主节点地址为zhang(因为前面已经配置主机地址与主机名对应)，9000-默认端口号。<br>hadoop.tmp.dir 共同工作目录</p>
<p>(3) hdfs-site.xml<br>配置运行的细节<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">value</span>&gt;</span>2<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>其中dfs.replication-配置副本数量， 3个为最佳，会放在不同的主机上，放在同一主机没有任何意义，会报错，这里我用两个data节点（data主机），存2个副本。<br>切块大小也可用在这里配置，默认128M。<br>上面配置好后hdfs可以运行啦，但是yarn不能运行，还需要配置.</p>
<p>(4) mapred-site.xml<br>mv mapred-site.xml.template mapred-site.xml<br>对于.xml才能找到执行，所以需要改后缀名。<br>配置如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>map-reduce应该放到哪个资源调度集群上跑，指定用yarn这个集群跑，hdfs与yarn都是集群，其在物理主机上没有分开，但是是不同的。</p>
<p>(5) yarn-site.xml<br>配置yarn中的老大以及node节点采用mapreduce_shuffle机制（map产生的中间结果传递给reduce采用哪种机制）。<br>配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">value</span>&gt;</span>zhang<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-_u542F_u52A8_u524D_u51C6_u5907_u5DE5_u4F5C"><a href="#3-_u542F_u52A8_u524D_u51C6_u5907_u5DE5_u4F5C" class="headerlink" title="3.启动前准备工作"></a>3.启动前准备工作</h2><p>(1) 防火墙设置<br>hadoop都是一些网络服务，伪分布式情况端口号被防火墙屏蔽，需要打开端口号或者关闭防火墙。<br>hodoop一般就是公司内部一个网络，不会与外界联系，所有可以使用关闭防火墙情况更加简单。<br>root用户下命令如下：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service iptables <span class="built_in">stop</span>  <span class="comment"> //关闭防火墙</span></span><br><span class="line">service iptables status<span class="comment"> //查看状态</span></span><br></pre></td></tr></table></figure></p>
<p>下次打开又会开启，因为这是一个自启动服务，可以使用下面命令让其不自启动<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sudo</span> chkconfig iptables <span class="built_in">off</span> //如果是<span class="built_in">on</span>则打开</span><br><span class="line">sudo chkconfig iptables --list//查看状态 此时所有级别全部<span class="built_in">off</span></span><br></pre></td></tr></table></figure></p>
<p>(2) 格式化<br>未来方面起见，首先将hadoop命令添加环境变量，以便在任何地方可以调用hadoop命令.<br>root权限下<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vi</span> /etc/<span class="keyword">profile</span></span><br></pre></td></tr></table></figure></p>
<p>添加如下代码：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_HOME=/home/zhang/software/hadoop/hadoop-<span class="number">2.6</span>.<span class="number">4</span></span><br><span class="line">export HADOOP_BIN=<span class="variable">$HADOOP</span>_HOME/bin</span><br><span class="line">export PATH=<span class="variable">$HADOOP</span>_BIN:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p>
<p>利用source /etc/profile 生效,我重启才生效！</p>
<p>格式化命令：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop namenode -<span class="built_in">format</span></span><br></pre></td></tr></table></figure></p>
<p>看到如下语句说明格式化成功：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span>/<span class="number">04</span>/<span class="number">26</span> <span class="number">11</span>:<span class="number">53</span>:<span class="number">24</span> INFO common.Storage: Storage directory /home/zhang/software/hadoop/data/dfs/name has been successfully formatted.</span><br></pre></td></tr></table></figure></p>
<p>格式化时在data目录下新建目录/dfs/name 里面初始化一些文件.<br>查看目录：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[zhang<span class="variable">@zhang</span> hadoop-<span class="number">2.6</span>.<span class="number">4</span>]<span class="variable">$ </span>cd /home/zhang/software/hadoop/data/dfs/name</span><br><span class="line">[zhang<span class="variable">@zhang</span> name]<span class="variable">$ </span>ls</span><br><span class="line">current</span><br><span class="line">[zhang<span class="variable">@zhang</span> name]<span class="variable">$ </span>cd current</span><br><span class="line">[zhang<span class="variable">@zhang</span> current]<span class="variable">$ </span>ls</span><br><span class="line">fsimage_0000000000000000000  fsimage_0000000000000000000.md5  seen_txid  <span class="constant">VERSION</span></span><br></pre></td></tr></table></figure></p>
<p>因为namenode指定的是这台机器192.168.0.107,所以文件会建到这个主机上。<br>fsimage储存原数据(管理datanode节点的数据)。<br>现在可以进行启动！</p>
<p>(3) datanode节点与sbin环境变量<br>启动命令在hadoop安装目录下的sbin目录下。一般不用start-all，用start-dfs,start-yarn更能够理解操作。<br>用时首先将sbin加入环境变量。</p>
<p>/etc/hadoop下有slaves文件，可以配置datanode主机.<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>hadoop<span class="regexp">/slaves</span></span><br></pre></td></tr></table></figure></p>
<p>内容如下(3台datanode主机)：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">zhang</span></span><br><span class="line">mem1</span><br><span class="line">mem2</span><br></pre></td></tr></table></figure></p>
<h2 id="4__u542F_u52A8"><a href="#4__u542F_u52A8" class="headerlink" title="4 启动"></a>4 启动</h2><h1 id="u5907_u6CE8_uFF1A"><a href="#u5907_u6CE8_uFF1A" class="headerlink" title="备注："></a>备注：</h1><p>1.为保证内存充分利用，尽量采用64位系统。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要内容：<br>]]>
    
    </summary>
    
      <category term="CentOS" scheme="http://www.bestzhangjin.com/tags/CentOS/"/>
    
      <category term="linux" scheme="http://www.bestzhangjin.com/tags/linux/"/>
    
      <category term="大数据" scheme="http://www.bestzhangjin.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="大数据" scheme="http://www.bestzhangjin.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Javaweb框架]]></title>
    <link href="http://www.bestzhangjin.com/2016/04/01/Hibernate/"/>
    <id>http://www.bestzhangjin.com/2016/04/01/Hibernate/</id>
    <published>2016-04-01T06:15:00.000Z</published>
    <updated>2017-10-11T13:39:36.734Z</updated>
    <content type="html"><![CDATA[<p>主要内容：<br><a id="more"></a></p>
<h1 id="u7B2C_u4E00_u7AE0__u6301_u4E45_u5C42Hibernate"><a href="#u7B2C_u4E00_u7AE0__u6301_u4E45_u5C42Hibernate" class="headerlink" title="第一章 持久层Hibernate"></a>第一章 持久层Hibernate</h1><p>本章介绍：本章讲解Hibernate基础，核心，与Mysql集合开发</p>
<h2 id="1-Hibernate_u57FA_u7840"><a href="#1-Hibernate_u57FA_u7840" class="headerlink" title="1.Hibernate基础"></a>1.Hibernate基础</h2><p>1.1 介绍<br>Hibernate提供与数据库无关的API接口，可以让开发人员不关心数据库的差异，而是关心业务层的开发。Hibernate对JDBC进行了轻量级的封装。<br>Hibernate是一个JDO工具，通过文件把值对象和数据库表之间建立起映射关系。我们通过操作这些值对象和Hibernate提供的一些基本类就可以达到使用数据库目的。<br>操作数据库经历了三个阶段:操作JDBC,封装JDBC，ORM；这里只是介绍ORM。<br>ORM（Object Relational Mapping）对象关系映射是解决面向对象与关系数据库存在的不匹配的技术，ORM通过描述对象和数据库之间映射的元数据将java对象自动持久化到关系数据库。<br>数据实体3种表现形式：数据实体，数据表，映射对象。<br>部分流行ORM产品：Apache OJB,Hibernate,iBATIS,Cayenne等。<br>持久层框架方向：直接编写JDBC等SQL语句（eg:iBATIS）;O/R Mapping(eg:Hibernate)和JDO技术；EJB中实体Bean技术。</p>
<p>1.2 Hibernate配置与开发流程<br>(1)添加库包<br>下载MYSQL驱动mysql-connector-java-5.0.8-bin.jar<br>下载Hibernate安装包hibernate-3.0.zip<br>根目录下核心包:hibernate3.jar<br>lib目录下必需包：<br>cglib-2.1.jar、asm-attr.jar、asm.jar:CGLIB库，Hibernate用来实现PO字节码的动态生成；<br>dom4j-1.6.jar:dom4j类似于jdom,是一个XML API，用来读写XML文件；<br>commons-collections-2.1.1.jar:Apache Commons包中的一个，包含一些Apache开发的集合类，比java.util.*强大；<br>commons-logging-1.0.4.jar、log4j-1.2.9.jar:日志功能。<br>其他包非必需，这里不介绍，需要时查询资料。</p>
<p>项目下新建lib文件夹，将需要导入的库包复制到lib目录，选中包右键-&gt;Build Path-&gt;Add To Build Path添加库包</p>
<p>(2)Hibernate配置文件<br>配置文件包含一系列属性的配置，Hibernate根据这些属性来连接数据库。<br>配置有两种：properties与xml<br>properties与xml配置文件可以同时使用，当同时使用两种类型的配置文件时，在XML配置文件中的设置会覆盖properties配置文件的相同属性。</p>
<p>A.properties<br>hibernate.properties样例<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hibernate.dialect=net<span class="class">.sf</span><span class="class">.Hibernate</span><span class="class">.dialect</span><span class="class">.MYSQLDialect</span> <span class="comment">//指定数据库使用SQL方言</span></span><br><span class="line">hibernate<span class="class">.connection</span><span class="class">.driver_class</span>=com<span class="class">.mysql</span><span class="class">.jdbc</span><span class="class">.Driver</span> <span class="comment">//指定驱动程序</span></span><br><span class="line">hibernate<span class="class">.connection</span><span class="class">.url</span>=jdbc:mysql:<span class="comment">//localhost:3306/test //指定数据库的URL</span></span><br><span class="line">hibernate<span class="class">.connection</span><span class="class">.username</span>=root <span class="comment">//指定数据库的用户名</span></span><br><span class="line">hibernate<span class="class">.connection</span><span class="class">.password</span>=<span class="number">123456</span> <span class="comment">//指定数据库密码</span></span><br><span class="line">hibernate.show_sql=true <span class="comment">//默认为false，为true时运行时控制台输出SQL语句</span></span><br></pre></td></tr></table></figure></p>
<p>默认文件名hibernate.properties<br>样例位置：Hibernate软件包的etc目录<br>在项目中放置位置：必须在CLASSPATH指定位置中，如主程序执行位置或者WEB-INF/classes中<br>获取SessionFactory:<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Configuration cfg=<span class="keyword">new</span> Configuration().addClass(com.demo.hiberate.beans.User.<span class="keyword">class</span>);<span class="comment">//加载com/demo/hibernate.beans/User.hbm.xml</span></span><br><span class="line">SessionFactory session=cfg.buildSessionFactory();</span><br></pre></td></tr></table></figure></p>
<p>B.XML<br>XML格式配置文件除了基本的Hibernate配置信息，还可以指定具体的持久化类映射文件，避免将持久化类配置文件编码在程序中。<br>hibernate.cfg.xml样例<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version='1.0' encoding='UTF-8'?&gt;</span></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE hibernate-configuration PUBLIC</span><br><span class="line">	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span><br><span class="line">	"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">hibernate-configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">session-factory</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"myeclipse.connection.profile"</span>&gt;</span>JDBC for MySQL<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 显示执行的sql语句 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 连接字符串 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 数据库用户名 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 数据库密码 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"connection.password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 数据库驱动 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 使用的方言 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 映射文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">mapping</span> <span class="attribute">resource</span>=<span class="value">"com/demo/hibernate/beans/User.hbm.xml"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>默认文件名hibernate.cfg.xml<br>样例位置：Hibernate软件包的etc目录<br>在项目中放置位置：必须在CLASSPATH指定位置中，如主程序执行位置或者WEB-INF/classes中<br>获取SessionFactory:<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SessionFactory session=<span class="keyword">new</span> <span class="keyword">Configuration</span>().configure().buildSessionFactory();</span><br><span class="line">//默认XML文件名称是hibernate.cfg.xml，也可以指定文件的名称如下</span><br><span class="line">SessionFactory session=<span class="keyword">new</span> <span class="keyword">Configuration</span>().configure(<span class="string">"dbt.cfg.xml"</span>).buildSessionFactory();</span><br></pre></td></tr></table></figure></p>
<p>(3)开发流程<br>包含三步：创建Hibernate配置/映射文件/持久化类/辅助类、编写DAO层、编写Service层。</p>
<p>1.3 实例<br>通过用户名密码实现用户验证。<br>编写流程:创建数据库；添加配置文件hibernate.cfg.xml;编写映射文件User.hbm.xml;编写持久化类User.java;编写辅助类HibernateSessionFactory.java;编写DAO类UserDAO.java;编写Service类UserService.java。</p>
<p>(1)添加驱动和库包</p>
<p>(2)创建数据库hibernate，数据表user</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>空</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>int</td>
<td>no</td>
<td><auto_increment></auto_increment></td>
</tr>
<tr>
<td>username</td>
<td>varchar(48)</td>
<td>yes</td>
<td>null</td>
</tr>
<tr>
<td>password</td>
<td>varchar(48)</td>
<td>yes</td>
<td>null</td>
</tr>
<tr>
<td>email</td>
<td>varchar(48)</td>
<td>yes</td>
<td>null</td>
</tr>
</tbody>
</table>
<p>添加一组数据1,admin,admin,12345@qq.com</p>
<p>(3)添加配置文件hibernate.cfg.xml<br>在项目的src目录下添加hibernate.cfg.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE hibernate-configuration PUBLIC</span><br><span class="line">	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span><br><span class="line">	"http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">hibernate-configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">session-factory</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"myeclipse.connection.profile"</span>&gt;</span>JDBC for MySQL<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"connection.url"</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/test<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"connection.password"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">mapping</span> <span class="attribute">resource</span>=<span class="value">"com/hibernate/beans/User.hbm.xml"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>(4)编写映射文件User.hbm.xml<br>hibernate映射文件包含了对象/关系映射(O/R Mapping)所需的元数据，元数据包含持久化类声明和属性到数据库的映射;<br>映射文件负责持久化类与数据库表之间的映射，根元素是hibernate-mapping,并通过package指定类所在的包；<br>每一个表使用一个class定义，name属性表示类的名称，table表示关联的表名，通过property子元素来映射类的变量名与数据库表字段名之间的映射关系。<br>User.hbm.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE hibernate-mapping PUBLIC</span><br><span class="line">	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span><br><span class="line">	"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">hibernate-mapping</span> <span class="attribute">package</span>=<span class="value">"com.hibernate.beans"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">class</span> <span class="attribute">name</span>=<span class="value">"User"</span> <span class="attribute">table</span>=<span class="value">"user"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">id</span> <span class="attribute">name</span>=<span class="value">"id"</span> <span class="attribute">column</span>=<span class="value">"id"</span> <span class="attribute">type</span>=<span class="value">"integer"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">generator</span> <span class="attribute">class</span>=<span class="value">"native"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"username"</span> <span class="attribute">column</span>=<span class="value">"username"</span> <span class="attribute">type</span>=<span class="value">"string"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"password"</span> <span class="attribute">column</span>=<span class="value">"password"</span> <span class="attribute">type</span>=<span class="value">"string"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"email"</span> <span class="attribute">column</span>=<span class="value">"email"</span> <span class="attribute">type</span>=<span class="value">"string"</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>(5)编写持久化类User.java<br>Hibernate使用简单的java对象(Plain Old/Ordinary Java Objects就是POJOs)编程模型持久化；POJO类似javabean,通过getter、sertter方法访问属性。<br>POJO规则：<br>a.为属性值声明set/get方法；<br>b.实现一个默认的无参构造方法;<br>c.提供一个标识属性；<br>d.使用非final类。<br>User.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hibernate.beans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">	<span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> email;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.email = email;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>备注:getXXX()、setXXX方法必须如getUsername形式，getUSERNAME、getusername等运行会提示异常</p>
<p>(6)编写辅助类HibernateSessionFactory.java<br>Hibernate的Session是一个持久化管理器，通过它可以从数据库中存取User。<br><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SessionFactory</span> sessionFactory = new <span class="type">Configuration</span><span class="literal">()</span>.configure<span class="literal">()</span>.buildSessionFactory<span class="literal">()</span>;</span><br></pre></td></tr></table></figure></p>
<p>对configure()调用装载hibernate.cfg.xml配置文件并初始化为一个Configuration实例；SessionFactory通常只是初始化一次。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hibernate.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.HibernateException;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class HibernateSessionFactory &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> CONFIG_FILE_LOCATION=<span class="string">"/hibernate.cfg.xml"</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal THREAD_LOCAL=<span class="keyword">new</span> ThreadLocal();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Configuration cfg=<span class="keyword">new</span> Configuration();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SessionFactory sessionFactory;</span><br><span class="line">	<span class="comment">//获取Session</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Session currentSession() <span class="keyword">throws</span> HibernateException&#123;</span><br><span class="line">		Session session= (Session) THREAD_LOCAL.<span class="built_in">get</span>();</span><br><span class="line">		<span class="keyword">if</span>(session==<span class="keyword">null</span>)&#123;</span><br><span class="line">			cfg.configure(CONFIG_FILE_LOCATION);</span><br><span class="line">			sessionFactory=cfg.buildSessionFactory();</span><br><span class="line">			session=sessionFactory.openSession();</span><br><span class="line">			THREAD_LOCAL.<span class="built_in">set</span>(session);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> session;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//关闭Session</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> closeSession() <span class="keyword">throws</span> HibernateException&#123;</span><br><span class="line">		Session session=(Session) THREAD_LOCAL.<span class="built_in">get</span>();</span><br><span class="line">		THREAD_LOCAL.<span class="built_in">set</span>(<span class="keyword">null</span>);</span><br><span class="line">		<span class="keyword">if</span>(session!=<span class="keyword">null</span>)&#123;</span><br><span class="line">			session.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>(7)编写DAO类UserDAO.java<br>DAO(Data Access Object)层，就是数据访问接口，为基于Hibernate开发，通常将业务层与数据层分开；DAO层只是负责调用Hibernate API实现CRUD操作，Service层面向用户负责调用DAO层代码；使得数据层不用关心业务功能，更好实现移植。<br>这里编写一个DAO类UserDAO.java实现根据用户名查询用户对象；使用HibernateSession获得Session对象，然后通过Session执行事务，创建查询对象，返回查询的用户对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package com.hibernate.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.HibernateException;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Query;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hibernate.beans.User;</span><br><span class="line"><span class="keyword">import</span> com.hibernate.util.HibernateSessionFactory;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserDAO</span> </span>&#123;</span><br><span class="line">	public User getUser(<span class="built_in">String</span> username) throws HibernateException&#123;</span><br><span class="line">		Session session=<span class="literal">null</span>;</span><br><span class="line">		Transaction tx=<span class="literal">null</span>;</span><br><span class="line">		User user=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			session=HibernateSessionFactory.currentSession();</span><br><span class="line">			tx=session.beginTransaction();</span><br><span class="line">			Query query=session.createQuery(<span class="string">"from  User where username=?"</span>);<span class="comment">///////////////</span></span><br><span class="line">			query.setString(<span class="number">0</span>, username.trim());</span><br><span class="line">			user=(User) query.uniqueResult();</span><br><span class="line">			query=<span class="literal">null</span>;</span><br><span class="line">			tx.commit();</span><br><span class="line">		&#125;<span class="keyword">catch</span>(HibernateException e)&#123;</span><br><span class="line">			<span class="keyword">throw</span> e;</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(tx!=<span class="literal">null</span>)&#123;</span><br><span class="line">				tx.rollback();</span><br><span class="line">			&#125;</span><br><span class="line">			HibernateSessionFactory.closeSession();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> user;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>(8) 编写UserService.java<br>Service层为服务层，面向用户服务，其定义的方法与实际的业务相关，它有一个函数valid(),根据用户和密码来判断用户是否存在，该函数调用DAO层的UserDAO类来获取一个用户对象，并比较该对象的密码与输入密码是否相等，相等则返回true,否则返回false.可以用一个main函数进行测试。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hibernate.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hibernate.beans.User;</span><br><span class="line"><span class="keyword">import</span> com.hibernate.dao.UserDAO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line">		UserDAO test=<span class="keyword">new</span> UserDAO();</span><br><span class="line">		User user=test.getUser(<span class="string">"admin"</span>);</span><br><span class="line">		<span class="keyword">if</span>(user.getPassword().equals(password))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		UserService service=<span class="keyword">new</span> UserService();</span><br><span class="line">		<span class="keyword">boolean</span> login=service.valid(<span class="string">"admin"</span>, <span class="string">"admin"</span>);</span><br><span class="line">		System.out.println(<span class="string">"验证结果:"</span>+login);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行查看结果：<br>选中UserService.java右键run as-&gt;java Application即可。<br>如有异常请看错误总结。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: <span class="operator"><span class="keyword">select</span> user0_.<span class="keyword">id</span> <span class="keyword">as</span> <span class="keyword">id</span>, user0_.username <span class="keyword">as</span> username0_, user0_.<span class="keyword">password</span> <span class="keyword">as</span> password0_, user0_.email <span class="keyword">as</span> email0_ <span class="keyword">from</span> <span class="keyword">user</span> user0_ <span class="keyword">where</span> user0_.username=?</span><br><span class="line">验证结果:<span class="literal">true</span></span></span><br></pre></td></tr></table></figure></p>
<p>1.4 自动生成工具MiddleGen<br>可以选择手写XML映射文件，也可以使用一些工具来生成映射文件。如：XDoclet,MiddleGen,AndroMDA.<br>有一些工具可以实现数据库SQL、Hibernate映射文件、Hibernate持久化类之间的相互转化。<br><img src="/img/hibernate/1.png" alt="image"><br>MiddleGen应用流程：<br>(1)安装Ant<br>MiddleGen依赖于Ant运行，可以在<a href="http://ant.apache.org下载Ant版本apache-ant-1.9.7.bin.zip" target="_blank" rel="external">http://ant.apache.org下载Ant版本apache-ant-1.9.7.bin.zip</a>.<br>Ant是免安装的，解压到安装目录后配置环境变量即可。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">ANT_HOME</span><span class="symbol">:D</span><span class="symbol">:</span>\<span class="constant">SSH2</span>\apache-ant-<span class="number">1.9</span>.<span class="number">7</span></span><br><span class="line">path添加<span class="symbol">:%ANT_HOME%</span>\bin</span><br></pre></td></tr></table></figure></p>
<p>添加后输入ant命令有反应就说明安装成功，具体如下：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\zhang&gt;ant</span><br><span class="line"><span class="keyword">Buildfile: </span><span class="keyword">build.xml </span>does not exist!</span><br><span class="line"><span class="keyword">Build </span>failed</span><br></pre></td></tr></table></figure></p>
<p>(2)安装MiddleGen<br>下载MiddleGen包，这里下载middlegen-2.1.zip解压<br>安装后使用，鉴于时间问题，这里不在详解，详见《java高手真经-Java web核心框架篇》84页s</p>
<h2 id="2-Hibernate_u6838_u5FC3"><a href="#2-Hibernate_u6838_u5FC3" class="headerlink" title="2.Hibernate核心"></a>2.Hibernate核心</h2><p>2.1 Hibernate映射文件hbm.xml<br>hbm.xml反映持久化类与关系数据库之间的映射关系。</p>
<p>&lt;hibernate-mapping&gt;<br>根元素—-每个hbm.xml文件只有唯一一个。<br>属性列表：</p>
<table>
<thead>
<tr>
<th>属性名称</th>
<th>描述</th>
<th>可选值</th>
<th>默认值</th>
<th>是否必选</th>
</tr>
</thead>
<tbody>
<tr>
<td>package</td>
<td>指定包名，映射文档没有指定全限定的类名时用其作为包名</td>
<td></td>
<td></td>
<td>否</td>
</tr>
<tr>
<td>schema</td>
<td>数据库schma的名称</td>
<td></td>
<td></td>
<td>否</td>
</tr>
<tr>
<td>catalog</td>
<td>数据库catalog的名称</td>
<td></td>
<td></td>
<td>否</td>
</tr>
<tr>
<td>default-cascade</td>
<td>默认的级联风格</td>
<td></td>
<td>none</td>
<td>否</td>
</tr>
<tr>
<td>default-access</td>
<td>Hibernate用来访问属性的策略，可以通过实现PropertyAccessor接口自定义</td>
<td>field,property,className</td>
<td>property</td>
<td>否</td>
</tr>
<tr>
<td>default-lazy</td>
<td>指定了未明确标注lazy属性的java属性和集合类，Hibernate会采用什么样的默认加载风格</td>
<td>true,false</td>
<td>true</td>
<td>否</td>
</tr>
<tr>
<td>auto-import</td>
<td>指定我们是否可以在查询语言中使用非全限定的类名</td>
<td>true,false</td>
<td>true</td>
<td>否</td>
</tr>
</tbody>
</table>
<p>指定了schema和catalog属性则表名会加上所指定的schema和catalog的名字扩展为全限定名，如果没有指定，则表名不会使用全限定名。<br>auto-import属性默认让我们在查询语言中可以使用非全限定名的类名，如果两个非全限定名是一样的（两个类名字一样，包不一样），那么应该设置auto-import=”false”,否则会出现异常。</p>
<p>备注：&lt;hibernate-mapping&gt;元素允许嵌套多个&lt;class&gt;映射，但建议一个持久化类一个映射文件，并以持久化类名命名。</p>
<p>&lt;class&gt;<br>&lt;hibernate-mapping&gt;的子元素，用以定义一个持久化类与数据表的映射关系。<br>属性列表：<br><img src="/img/hibernate/2.png" alt="image"><br><img src="/img/hibernate/3.png" alt="image"><br>class也可以是一个接口，之后用<subclass>来指定该接口的实际实现类。也可以持久化任何static内部类。</subclass></p>
<p>使用&lt;id&gt;定义主键<br>主键用来识别记录，并保证每条记录的唯一性。<br>对象标识符OID是关系数据库中主键在java对象模型中的等价物：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Transaction tx=session.beginTransaction();</span><br><span class="line">//加载OID为1的<span class="built_ins">User</span>对象，从数据库中查找ID为1的记录，然后创建相应的<span class="built_ins">User</span>实例</span><br><span class="line"><span class="built_in">User</span> user1=(<span class="built_in">User</span>)session.load(<span class="built_in">User</span>.class,new Long(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">User</span> user1=(<span class="built_in">User</span>)session.load(<span class="built_in">User</span>.class,new Long(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">User</span> user1=(<span class="built_in">User</span>)session.load(<span class="built_in">User</span>.class,new Long(<span class="number">3</span>));</span><br><span class="line">System.out.println(user1==user2);//true</span><br><span class="line">System.out.println(user1==user3);//false</span><br></pre></td></tr></table></figure></p>
<p>&lt;id&gt;属性列表：</p>
<table>
<thead>
<tr>
<th>属性名称</th>
<th>描述</th>
<th>可选值</th>
<th>默认值</th>
<th>是否必选</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>标识属性的名字</td>
<td></td>
<td></td>
<td>否</td>
</tr>
<tr>
<td>type</td>
<td>标识Hibernate类型的名字</td>
<td></td>
<td>属性名</td>
<td>否</td>
</tr>
<tr>
<td>column</td>
<td>主键字段名字</td>
<td></td>
<td></td>
<td>否</td>
</tr>
<tr>
<td>unsaved-value</td>
<td>用来标志该实例是刚刚创造的，未保存；可以把这种实例和以前在Session中装载过但是没有再次持久化的实例区分开</td>
<td>null,any,none,undefined,id_value</td>
<td></td>
<td>否</td>
</tr>
<tr>
<td>access</td>
<td>Hibernate用来访问属性的策略</td>
<td>field,property,ClassName</td>
<td>property</td>
<td>否</td>
</tr>
</tbody>
</table>
<p>如果name不存在，则会认为这个类没有标识属性，如果类的标识属性不是正常的java默认值(null或者0)，那么应该指定正确的unsaved-value默认值。<br>如果表使用联合主键，那么可以映射类的多个属性作为标识符属性。&lt;composite-id&gt;元素接受&lt;key-property&gt;属性映射和&lt;key-many-to-one&gt;属性映射作为子元素。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;composite-<span class="property">id</span>&gt;</span><br><span class="line">	&lt;key-<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"username"</span>/&gt;</span><br><span class="line">	&lt;key-<span class="keyword">property</span> <span class="property">name</span>=<span class="string">"password"</span>/&gt;</span><br><span class="line">&lt;/composite-<span class="property">id</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>此时持久化类必须重载equals()和hashCode()方法，来实现组合的标识符的相等判断，实现Serialzable接口也是必须的。</p>
<p>&lt;generator&gt;设置主键生成方式<br>&lt;generator&gt;指定主键的生成器，通过一个class属性指定生成器对应的类。该类必须实现org.hibernate.IdentifierGeneator接口。如果需要传递参数，需要通过&lt;param&gt;子元素指定；<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">id</span> <span class="attribute">name</span>=<span class="value">"id"</span> <span class="attribute">column</span>=<span class="value">"ID"</span> <span class="attribute">type</span>=<span class="value">"long"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">generator</span> <span class="attribute">class</span>=<span class="value">"hilo"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">""</span><span class="value">table"</span>&gt;</span>uid_table<span class="tag">&lt;/<span class="title">param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"column"</span>&gt;</span>next_hi_value_column<span class="tag">&lt;/<span class="title">param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">generator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Hibernate内置生成器:<br>assigned算法：generator没有指定时的默认生成器；主键由外部程序负责生成，无须Hibernate参与,需要应用程序在执行save()之前为对象分配一个标识符。</p>
<h2 id="3-Hibernate_u2014_u2014mysql_u5F00_u53D1"><a href="#3-Hibernate_u2014_u2014mysql_u5F00_u53D1" class="headerlink" title="3.Hibernate——mysql开发"></a>3.Hibernate——mysql开发</h2><h1 id="u9519_u8BEF_u603B_u7ED3"><a href="#u9519_u8BEF_u603B_u7ED3" class="headerlink" title="错误总结"></a>错误总结</h1><h2 id="1-hibernate_uFF0C_u81EA_u5DF1_u5199_u7684xxx-hbm-xml_u6587_u4EF6__u51FA_u73B0_u9519_u8BEF_uFF1AAttribute__u201Ccolumn_u201D_must_be_declared_for_element_type_u201Dproperty_u201D"><a href="#1-hibernate_uFF0C_u81EA_u5DF1_u5199_u7684xxx-hbm-xml_u6587_u4EF6__u51FA_u73B0_u9519_u8BEF_uFF1AAttribute__u201Ccolumn_u201D_must_be_declared_for_element_type_u201Dproperty_u201D" class="headerlink" title="1.hibernate，自己写的xxx.hbm.xml文件 出现错误：Attribute “column” must be declared for element type”property”"></a>1.hibernate，自己写的xxx.hbm.xml文件 出现错误：Attribute “column” must be declared for element type”property”</h2><p>因为复制了hibernate.cfg.xml的头部文件<br>&lt;?xmlversion=’1.0’ encoding=’UTF-8’?&gt;<br>&lt;!DOCTYPE hibernate-configuration PUBLIC<br>         “-//Hibernate/Hibernate Configuration DTD 3.0//EN”<br>         “<a href="http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd&quot;&gt;" target="_blank" rel="external">http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd&quot;&gt;</a></p>
<p>改为mapping的头文件就行了<br>&lt;?xmlversion=”1.0” encoding=”UTF-8”?&gt;<br>&lt;!DOCTYPEhibernate-mapping PUBLIC<br>         “-//Hibernate/Hibernate Mapping DTD 3.0//EN”<br>         “<a href="http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd&quot;&gt;" target="_blank" rel="external">http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd&quot;&gt;</a></p>
<h2 id="2-org-hibernate-PropertyNotFoundException_3ACould_not_find_a_setter_for_property_username_in_class_com-zhang-hibernate-User"><a href="#2-org-hibernate-PropertyNotFoundException_3ACould_not_find_a_setter_for_property_username_in_class_com-zhang-hibernate-User" class="headerlink" title="2.org.hibernate.PropertyNotFoundException:Could not find a setter for property username in class com.zhang.hibernate.User"></a>2.org.hibernate.PropertyNotFoundException:Could not find a setter for property username in class com.zhang.hibernate.User</h2><p>编写持久化类User.java时getXXX()、setXXX方法必须如getUsername形式，getUSERNAME、getusername等运行会提示异常</p>
<h2 id="3-__u7F3A_u5305_u5F02_u5E38"><a href="#3-__u7F3A_u5305_u5F02_u5E38" class="headerlink" title="3. 缺包异常"></a>3. 缺包异常</h2><p>3.1 hibernate Exception in thread “main” java.lang.NoClassDefFoundError: net/sf/ehcache/CacheException<br>缺少ehcache.jar(高速缓存，提高存取速度)包</p>
<p>3.2 Exception in thread “main” java.lang.NoClassDefFoundError: antlr/ANTLRException<br>缺少antlr.jar包</p>
<h2 id="4-log4j_3AWARN__u2026"><a href="#4-log4j_3AWARN__u2026" class="headerlink" title="4.log4j:WARN …"></a>4.log4j:WARN …</h2><p>出现没有定义log4j的警告信息，这是因为添加了log4j.jar包但是没有配置，只需要到hibernate包下面将log4j.properties文件复制到项目的根目录即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要内容：<br>]]>
    
    </summary>
    
      <category term="Javaweb" scheme="http://www.bestzhangjin.com/tags/Javaweb/"/>
    
      <category term="Java" scheme="http://www.bestzhangjin.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery教程]]></title>
    <link href="http://www.bestzhangjin.com/2016/03/30/jQuery/"/>
    <id>http://www.bestzhangjin.com/2016/03/30/jQuery/</id>
    <published>2016-03-30T01:30:00.000Z</published>
    <updated>2017-10-11T13:38:55.538Z</updated>
    <content type="html"><![CDATA[<p>主要内容：<br>说明：本教程使用webstorm和jquery-1.9.1<br><a id="more"></a></p>
<h1 id="u7B2C_u4E00_u7AE0__u73AF_u5883_u642D_u5EFA"><a href="#u7B2C_u4E00_u7AE0__u73AF_u5883_u642D_u5EFA" class="headerlink" title="第一章 环境搭建"></a>第一章 环境搭建</h1><h2 id="1-jQuery_u4ECB_u7ECD"><a href="#1-jQuery_u4ECB_u7ECD" class="headerlink" title="1.jQuery介绍"></a>1.jQuery介绍</h2><p>jQuery是一套跨浏览器的JavaScript库，简化HTML与JavaScript之间的操作。它是轻量级的js库 ，兼容CSS3，还兼容各种浏览器。jQuery使用户能更方便地处理HTML documents、events、实现动画效果，并且方便地为网站提供AJAX交互。jQuery还有一个比较大的优势是，它的文档说明很全，而且各种应用也说得很详细，同时还有许多成熟的插件可供选择。jQuery能够使用户的html页面保持代码和html内容分离，也就是说，不用再在html里面插入一堆js来调用命令了，只需定义id即可。</p>
<h2 id="2-_u73AF_u5883_u642D_u5EFA"><a href="#2-_u73AF_u5883_u642D_u5EFA" class="headerlink" title="2.环境搭建"></a>2.环境搭建</h2><p>下载jQuery文件库：<br><a href="http://jquery.com" target="_blank" rel="external">http://jquery.com</a><br>或者<br><a href="http://www.jq22.com/jquery-info122" target="_blank" rel="external">http://www.jq22.com/jquery-info122</a><br>下载完jQuery框架文件后，不需要安装，使用script文件导入标记，将jQuery框架文件导入页面中即可，在页面的head中加入如下代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">language</span>=<span class="value">"javascript"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"文件目录/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>加入上述代码后，便完成了jQuery框架开发环境的搭建。</p>
<h2 id="3-JavaScript_u4E0EjQuery_u5173_u7CFB"><a href="#3-JavaScript_u4E0EjQuery_u5173_u7CFB" class="headerlink" title="3.JavaScript与jQuery关系"></a>3.JavaScript与jQuery关系</h2><p>jQuery本身就是JavaScript，只不过是把JavaScript代码包装成拿过来就能实现特定功能的代码库！我们想改变页面中所有段落标签</p><p>中的文本内容：<br>javaScript代码：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> page_p = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;page_p.length;i++)&#123;</span><br><span class="line">	page_p[i].innerHTML=<span class="string">"改变后的内容"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>jQuery代码：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(</span><span class="string">"p"</span>).html(<span class="string">"改变后的内容"</span>);</span><br></pre></td></tr></table></figure></p>
<p>以上两段代码完成的功能是一样的。jQuery更加的简洁方便，我们在处理DOM时不必关心功能的实现细节。<br>$()就是jQuery中的函数，它的功能是获得（）中指定的标签元素。如示例中$(“p”)会得到一组P标签元素,其中“p”表示CSS中的标签选择器。$()中的()不一定是指定元素，也可能是函数。<br>在jQuery中 $()方法等价于jQuery()方法,前者比较常用，是后者的简写。一般只有在$()与其它语言冲突时才会使用jQuery()方法。</p>
<h2 id="4-_u5E94_u7528_u5B9E_u4F8B"><a href="#4-_u5E94_u7528_u5B9E_u4F8B" class="headerlink" title="4.应用实例"></a>4.应用实例</h2><p>用webstorm新建一个项目Test,新建index.html、style.css,导入jquery.js<br><img src="/img/jquery/1.png" alt="image"><br>index.html<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>初识jQuery<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"jquery.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"style.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"test"</span>&gt;</span>初识jQuery<span class="tag">&lt;/<span class="title">div</span>&gt;</span><span class="comment">&lt;!-- test标签在css中设置属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> <span class="attribute">onclick</span>=<span class="value">"sayHello()"</span>&gt;</span>点我<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="comment">&lt;!-- 方法调用 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;<span class="comment">//方法定义</span></span><br><span class="line">        $(<span class="string">"#test"</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>style.css<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#test&#123;</span><br><span class="line">    display:none;</span><br><span class="line">    width:100px;</span><br><span class="line">    height:40px;</span><br><span class="line">    border:2px solid red;<span class="comment">&lt;!-- 边框 --&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行结果:<br><img src="/img/jquery/2.png" alt="image"><br>点击按钮如下：<br><img src="/img/jquery/3.png" alt="image"></p>
<h1 id="u7B2C_u4E8C_u7AE0_jQuery_u9009_u62E9_u5668"><a href="#u7B2C_u4E8C_u7AE0_jQuery_u9009_u62E9_u5668" class="headerlink" title="第二章 jQuery选择器"></a>第二章 jQuery选择器</h1><h2 id="1-_u57FA_u7840_u9009_u62E9_u5668"><a href="#1-_u57FA_u7840_u9009_u62E9_u5668" class="headerlink" title="1.基础选择器"></a>1.基础选择器</h2><p>(1)#id<br>通过一个id号去查找一个元素，使用格式： $(“#选择的id”)。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>#id选择器<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"jquery.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"my_id1"</span>&gt;</span>div内容1<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"my_id2"</span>&gt;</span>div内容2<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    $(<span class="string">"#my_id2"</span>).html($(<span class="string">"#my_id1"</span>).html());<span class="comment">//将my_id2处内容设置成与my_id1相同 $("#my_id1").html()获得my_id1处内容</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>运行:<br><img src="/img/jquery/4.png" alt="image"></p>
<p>(2)element选择器<br>jQuery中可以根据元素名/element（<div>、<span>等）查找元素，格式如下：<br>$(“element”)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"btn"</span>&gt;</span>点我<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"my_id"</span>&gt;</span>div显示<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">	$(<span class="string">"div"</span>).css(<span class="string">"font-weight"</span>,<span class="string">"bold"</span>);<span class="comment">//将div中内容字体加粗</span></span><br><span class="line">    $(<span class="string">"button"</span>).attr(<span class="string">"disabled"</span>,<span class="string">"true"</span>);<span class="comment">//将按钮设置为灰色(不可以点击)</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></span></div></p>
<p>(3).class 选择器<br>可以通过类别（class）属性查找元素。调用格式如下：<br>$(“.class”)<br>style.css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.red</span><span class="rules">&#123; <span class="rule"><span class="attribute">color</span>:<span class="value">red</span></span>;&#125;</span></span><br><span class="line"><span class="class">.green</span><span class="rules">&#123; <span class="rule"><span class="attribute">color</span>:<span class="value">green</span></span>;&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>index.html<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>.class选择器<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"jquery.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"style.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"red"</span> <span class="attribute">id</span>=<span class="value">"div_id"</span>&gt;</span>我是红色<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"green"</span>&gt;</span>我是绿色<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="keyword">var</span> $className=$(<span class="string">"#div_id"</span>).attr(<span class="string">"class"</span>);<span class="comment">//调用元素的attr()方法获取元素的类别名-----attr()函数</span></span><br><span class="line">    $(<span class="string">"p"</span>).html($className);<span class="comment">//标签p位置显示.red类的类名</span></span><br><span class="line">    <span class="keyword">var</span> $redHTML = $(<span class="string">".red"</span>).html();</span><br><span class="line">    $(<span class="string">".green"</span>).html($redHTML);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>运行结果:<br><img src="/img/jquery/5.png" alt="image"></p>
<p>(4)<em> 选择器<br>“</em>”号选择器，它的功能是获取页面中的全部元素，包括head、body、script这些元素,格式为：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(</span><span class="string">"*"</span>)</span><br></pre></td></tr></table></figure></p>
<p>由于该选择器的特殊性，它常与其他元素组合使用，表示获取其他元素中的全部子元素。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>*选择器<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://libs.baidu.com/jquery/1.9.0/jquery.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"Button1"</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"button"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"Text1"</span> <span class="attribute">type</span>=<span class="value">"text"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"Radio1"</span> <span class="attribute">type</span>=<span class="value">"radio"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"Checkbox1"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">label</span>&gt;</span><span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    $(<span class="string">"form *"</span>).attr(<span class="string">"disabled"</span>, <span class="string">"true"</span>);<span class="comment">//设置form下所有子标签为灰色 不可以</span></span><br><span class="line">    $(<span class="string">"div *"</span>).html(<span class="string">"div *选择器"</span>);<span class="comment">//设置div下所有子标签显示内容"div *选择器"</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>运行结果:<br><img src="/img/jquery/6.png" alt="image"></p>
<p>(5)sele1,sele2,seleN选择器<br>精确的选择任意多个指定的元素,调用格式如下：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(</span><span class="string">"sele1,sele2,seleN"</span>)</span><br></pre></td></tr></table></figure></p>
<p>每个选择器之间用“，”号隔开，它们可以是之前提及的各种类型选择器，如$(“#id”)、$(“.class”)、$(“selector”)选择器等。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"red"</span>&gt;</span>red<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"green"</span>&gt;</span>green<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"blue"</span>&gt;</span>blue<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    $(<span class="string">".red,.green,#blue"</span>).html(<span class="string">"我们是红绿蓝"</span>);<span class="comment">//全部标签内容设置成指定值</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>(6)ance desc选择器<br>层次性选择器可以快速定位某一层次的一个或多个元素，ance desc选择器就是其中之一，格式如下：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(</span><span class="string">"ance desc"</span>)</span><br></pre></td></tr></table></figure></p>
<p>ance desc是使用空格隔开的两个参数。ance参数（ancestor祖先的简写）表示父元素；desc参数（descendant后代的简写）表示后代元素，即包括子元素、孙元素等等。两个参数都可以通过选择器来获取。<br>index.html<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">title</span>&gt;</span>ance desc选择器<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"jquery.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"style.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span>宽度随着文字增加而增加</span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">label</span>&gt;</span><span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">label</span>&gt;</span><span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    $(<span class="string">"div label"</span>).css(<span class="string">"background-color"</span>,<span class="string">"red"</span>);<span class="comment">//将div下所有label标签背景色改为red</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>style.css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">div</span>, <span class="tag">p</span>, <span class="tag">label</span></span><br><span class="line"><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"> solid <span class="number">1px</span> <span class="hexcolor">#666</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">5px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">5px</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="tag">label</span></span><br><span class="line"><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">20px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">20px</span></span><br><span class="line"></span></span></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行:<br><img src="/img/jquery/7.png" alt="image"></p>
<p>(7)parent &gt; child选择器<br>与ance desc选择器相比，parent &gt; child选择器的范围要小些，child参数获取的元素都是parent选择器的子元素,它所选择的目标是子集元素，相当于一个家庭中的子辈们，但不包括孙辈，格式如下：<br>$(“parent &gt; child”)</p>
<p>(8)prev + next选择器<br>通过prev + next选择器就可以查找与“prev”元素紧邻的下一个“next”元素，格式如下：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(</span><span class="string">"prev + next"</span>)</span><br></pre></td></tr></table></figure></p>
<p>其中参数prev为任何有效的选择器，参数“next”为另外一个有效选择器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p+span"</span>)<span class="comment">//选择p后面的第一个span</span></span><br></pre></td></tr></table></figure></p>
<p>(9)prev ~ siblings选择器<br>与prev + next层次选择器相同，prev ~ siblings选择器也是查找prev 元素之后的相邻元素，但前者只获取第一个相邻的元素，而后者则获取prev 元素后面全部相邻的元素，格式如下：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(</span><span class="string">"prev ~ siblings"</span>)</span><br></pre></td></tr></table></figure></p>
<p>siblings选择器获取的元素都是prev元素之后的同辈元素。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">label</span>&gt;</span><span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">label</span>&gt;</span><span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">label</span>&gt;</span><span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">label</span>&gt;</span><span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="string">"p ~ label"</span>).css(<span class="string">"border"</span>, <span class="string">"solid 1px red"</span>);<span class="comment">//选中p后面的两个label</span></span><br><span class="line">   </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-_u8FC7_u6EE4_u9009_u62E9_u5668"><a href="#2-_u8FC7_u6EE4_u9009_u62E9_u5668" class="headerlink" title="2.过滤选择器"></a>2.过滤选择器</h2><p>(1):first :last过滤选择器<br>过滤选择器是根据某过滤规则进行元素的匹配，书写时以“：”号开头,通常用于查找集合元素中的某一位置的单个元素。<br>:first :last得到一组相同标签元素中的第1个和最后一个元素<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span>:first，:last过滤器<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>橘子<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="string">"li:first"</span>).css(<span class="string">"background-color"</span>, <span class="string">"green"</span>);<span class="comment">//葡萄背景绿色</span></span><br><span class="line">        $(<span class="string">"li:last"</span>).css(<span class="string">"background-color"</span>,<span class="string">"red"</span>)<span class="comment">//苹果背景红色</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>(2):eq(index)过滤选择器<br>从一组标签元素数组中，灵活选择任意的一个标签元素，使用格式<br>:eq(index)<br>其中参数index表示索引号（即：一个整数），它从0开始，如果index的值为3，表示选择的是第4个元素。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span>:eq(index)过滤选择器<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span>橘子<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ol</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="string">"li:eq(3)"</span>).css(<span class="string">"background-color"</span>, <span class="string">"#60F"</span>);<span class="comment">//改变苹果背景颜色</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>(3):contains(text)过滤选择器<br>:contains(text)选择器按照文本内容来查找一个或多个元素，它的功能是选择包含指定字符串的全部元素，它通常与其他元素结合使用，获取包含“text”字符串内容的全部元素对象。其中参数text表示页面中的文字。<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;body&gt;</span></span><br><span class="line">    <span class="variable">&lt;div&gt;</span>:contains(text)过滤选择器<span class="variable">&lt;/div&gt;</span></span><br><span class="line">    <span class="variable">&lt;ol&gt;</span></span><br><span class="line">        <span class="variable">&lt;li&gt;</span>强大的<span class="string">"jQuery"</span><span class="variable">&lt;/li&gt;</span></span><br><span class="line">        <span class="variable">&lt;li&gt;</span><span class="string">"javascript"</span>也很实用<span class="variable">&lt;/li&gt;</span></span><br><span class="line">        <span class="variable">&lt;li&gt;</span><span class="string">"jQuery"</span>前端必学<span class="variable">&lt;/li&gt;</span></span><br><span class="line">        <span class="variable">&lt;li&gt;</span><span class="string">"java"</span>是一种开发语言<span class="variable">&lt;/li&gt;</span></span><br><span class="line">        <span class="variable">&lt;li&gt;</span>前端利器——<span class="string">"jQuery"</span><span class="variable">&lt;/li&gt;</span></span><br><span class="line">    <span class="variable">&lt;/ol&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">&lt;script type="text/javascript"&gt;</span></span><br><span class="line">        $(<span class="string">"li:contains('jQuery')"</span>).css(<span class="string">"background"</span>, <span class="string">"green"</span>);//改变包含<span class="string">"jQuery"</span>字符内容的背景色</span><br><span class="line">    <span class="variable">&lt;/script&gt;</span></span><br><span class="line"><span class="variable">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>(4):has(selector)过滤选择器<br>:has(selector)获取选择器中包含指定元素名称的全部元素，其中selector参数就是包含的元素名称，是被包含元素。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span>:has(selector)过滤选择器<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>aa<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">label</span>&gt;</span>bb<span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>cc<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">label</span>&gt;</span>dd<span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>ee<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="string">"li:has('p')"</span>).css(<span class="string">"background-color"</span>, <span class="string">"blue"</span>);<span class="comment">//带有p标签的aa,cc,ee背景色改变</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>(5):hidden过滤选择器<br>:hidden过滤选择器的功能是获取全部不可见的元素，这些不可见的元素中包括type属性值为hidden的元素。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>显示隐藏元素的内容<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"hidstr"</span> <span class="attribute">type</span>=<span class="value">"hidden"</span> <span class="attribute">value</span>=<span class="value">"我已隐藏起来"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="keyword">var</span> $strHTML = $(<span class="string">"input:hidden"</span>).val();</span><br><span class="line">    $(<span class="string">"div"</span>).html($strHTML);<span class="comment">//显示“我已隐藏起来”</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>(6):visible过滤选择器<br>:visible过滤选择器获取的是全部可见的元素，也就是说，只要不将元素的display属性值设置为“none”，那么，都可以通过该选择器获取。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>:visible过滤选择器<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">style</span>=<span class="value">"display:none"</span>&gt;</span>橘子<span class="tag">&lt;/<span class="title">li</span>&gt;</span><span class="comment">&lt;!-- 不显示 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">style</span>=<span class="value">"display:block"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">style</span>=<span class="value">"display:"</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">style</span>=<span class="value">"display:none"</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="string">"li:visible"</span>).css(<span class="string">"background-color"</span>,<span class="string">"blue"</span>);<span class="comment">//显示的香蕉，葡萄，苹果背景色都blue</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>(7)[attribute=value]与[attribute!=value]属性选择器<br>[attribute=value]属性选择器的功能是获取与属性名和属性值完全相同的全部元素，其中[]是专用于属性选择器的括号符，参数attribute表示属性名称，value参数表示属性值。[attribute!=value]与[attribute=value]正好相反！<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>[attribute=value]属性选择器<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">title</span>=<span class="value">"蔬菜"</span>&gt;</span>茄子<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">title</span>=<span class="value">"水果"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">title</span>=<span class="value">"蔬菜"</span>&gt;</span>芹菜<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">title</span>=<span class="value">"水果"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">title</span>=<span class="value">"水果"</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="string">"li[title='蔬菜']"</span>).css(<span class="string">"background-color"</span>, <span class="string">"green"</span>);<span class="comment">//改变"title"属性值为"蔬菜"的背景颜色</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>(8)[attribute*=value]属性选择器<br>获取属性值中包含指定内容的全部元素，其中[]是专用于属性选择器的括号符，参数attribute表示属性名称，value参数表示对应的属性值。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>attribute*=value]属性选择器<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">title</span>=<span class="value">"蔬菜"</span>&gt;</span>茄子<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">title</span>=<span class="value">"水果"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">title</span>=<span class="value">"蔬菜"</span>&gt;</span>芹菜<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">title</span>=<span class="value">"人参果"</span>&gt;</span>小西红柿<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">title</span>=<span class="value">"水果"</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="string">"li[title*='果']"</span>).css(<span class="string">"background-color"</span>, <span class="string">"green"</span>);<span class="comment">//改变"title"属性值包含"果"的背景色</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>(9):first-child与:last-child子元素过滤选择器<br>:first过滤选择器可以获取指定父元素中的首个子元素，但该选择器返回的只有一个元素，并不是一个集合，而使用:first-child子元素过滤选择器则可以获取每个父元素中返回的首个子元素，它是一个集合，常用多个集合数据的选择处理。<br>:last-child获取每个父元素中返回的最后一个子元素，它也是一个集合，常用多个集合数据的选择处理。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>改变每个"蔬菜水果"中第一行的背景色<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>芹菜<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>茄子<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>萝卜<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>大白菜<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>西红柿<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>橘子<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="string">"li:first-child"</span>).css(<span class="string">"background-color"</span>, <span class="string">"green"</span>);<span class="comment">//改变每个"蔬菜水果"中第一行的背景色--芹菜，橘子</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>(10)练习<br>开始显示1,2,3,4,5和更多<br>点击更多显示到8，点击简化恢复显示1,2,3,4,5.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Content-Type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">title</span>&gt;</span>挑战题<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span>1<span class="tag">&lt;/<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">li</span>&gt;</span>2<span class="tag">&lt;/<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">li</span>&gt;</span>3<span class="tag">&lt;/<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">li</span>&gt;</span>4<span class="tag">&lt;/<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">li</span>&gt;</span>5<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"no"</span> <span class="attribute">style</span>=<span class="value">"display:none"</span>&gt;</span>6<span class="tag">&lt;/<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"no"</span> <span class="attribute">style</span>=<span class="value">"display:none"</span>&gt;</span>7<span class="tag">&lt;/<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"no"</span> <span class="attribute">style</span>=<span class="value">"display:none"</span>&gt;</span>8<span class="tag">&lt;/<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>更多<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://libs.baidu.com/jquery/1.9.0/jquery.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $(<span class="string">"a"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> text = $(<span class="string">"a"</span>).text();</span><br><span class="line">                <span class="keyword">if</span>(text == <span class="string">"更多"</span>)&#123;</span><br><span class="line">                    $(<span class="string">"a"</span>).html(<span class="string">"简化"</span>);</span><br><span class="line">                    $(<span class="string">"li[class=no]"</span>).show();</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    $(<span class="string">"a"</span>).html(<span class="string">"更多"</span>);</span><br><span class="line">                    $(<span class="string">"li[class=no]"</span>).hide();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-_u8868_u5355_u9009_u62E9_u5668"><a href="#3-_u8868_u5355_u9009_u62E9_u5668" class="headerlink" title="3.表单选择器"></a>3.表单选择器</h2><p>(1):input表单选择器<br>:input表单选择器返回全部的表单元素，不仅包括所有input标记的表单元素，而且还包括textarea、select 和 button标记的表单元素，因此，它选择的表单元素是最广的。<br>style.css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.bg_blue</span></span><br><span class="line"><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> blue</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>html<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>修改全部表单元素的背景色<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"frmTest"</span> <span class="attribute">action</span>=<span class="value">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"Input Button"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">option</span>&gt;</span>Option<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">select</span>&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">rows</span>=<span class="value">"3"</span> <span class="attribute">cols</span>=<span class="value">"8"</span>&gt;</span><span class="tag">&lt;/<span class="title">textarea</span>&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span>&gt;</span></span><br><span class="line">        Button<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="string">"#frmTest :input"</span>).addClass(<span class="string">"bg_blue"</span>);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jquery/8.png" alt="image"></p>
<p>(2):text表单文本选择器<br>获取表单中全部单行的文本输入框元素，单行的文本输入框就像一个不换行的字条工具<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>修改多个单行输入框元素的背景色<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"frmTest"</span> <span class="attribute">action</span>=<span class="value">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"Text1"</span> <span class="attribute">value</span>=<span class="value">"我是小纸条"</span>/&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">rows</span>=<span class="value">"3"</span> <span class="attribute">cols</span>=<span class="value">"8"</span>&gt;</span><span class="tag">&lt;/<span class="title">textarea</span>&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"Text2"</span> <span class="attribute">value</span>=<span class="value">"我也是小纸条"</span>/&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span>&gt;</span></span><br><span class="line">        Button<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="string">"#frmTest :text"</span>).addClass(<span class="string">"bg_blue"</span>);<span class="comment">//两个input标签的背景色改变 对于&lt;textarea&gt;区域文本、按钮元素无效</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>备注:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:text对&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"password"</span> id=<span class="string">"Text2"</span> value=<span class="string">"我也是小纸条"</span>/&gt;&lt;<span class="keyword">br</span> /&gt;无效</span><br></pre></td></tr></table></figure></p>
<p>(3):password表单密码选择器<br>:password选择器，它的功能是获取表单中全部的密码输入文本框元素。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>修改多个密码输入框元素的背景色<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"frmTest"</span> <span class="attribute">action</span>=<span class="value">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"Text1"</span> <span class="attribute">value</span>=<span class="value">"单行文本输入框"</span>/&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">id</span>=<span class="value">"Text2"</span> <span class="attribute">value</span>=<span class="value">"密码文本输入框"</span>/&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">rows</span>=<span class="value">"3"</span> <span class="attribute">cols</span>=<span class="value">"8"</span>&gt;</span>区域文本输入框<span class="tag">&lt;/<span class="title">textarea</span>&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">id</span>=<span class="value">"Text3"</span> <span class="attribute">value</span>=<span class="value">""</span>/&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span>&gt;</span></span><br><span class="line">        Button<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="string">"#frmTest :password"</span>).addClass(<span class="string">"bg_red"</span>);<span class="comment">//type="password"的两个input框背景色改变</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>(4):radio单选按钮选择器<br>使用:radio选择器可轻松获取表单中的全部单选按钮元素。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>将表单中单选按钮设为不可用<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"frmTest"</span> <span class="attribute">action</span>=<span class="value">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"Input Button"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"Radio1"</span> <span class="attribute">type</span>=<span class="value">"radio"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"Radio1"</span>&gt;</span></span><br><span class="line">        男<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"Radio2"</span> <span class="attribute">type</span>=<span class="value">"radio"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"Radio2"</span>&gt;</span></span><br><span class="line">        女<span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span>&gt;</span></span><br><span class="line">        Button<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="string">"#frmTest :radio"</span>).attr(<span class="string">"disabled"</span>,<span class="string">"true"</span>);<span class="comment">//type="radio"的两个input不可以，变成灰色</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>(5):checkbox复选框选择器<br>:checkbox选择器可以快速定位并获取表单中的复选框元素。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>将表单的全部复选框设为不可用<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"frmTest"</span> <span class="attribute">action</span>=<span class="value">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"Input Button"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"Checkbox1"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"Checkbox1"</span>&gt;</span></span><br><span class="line">        西红柿<span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"Checkbox2"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"Checkbox2"</span>&gt;</span></span><br><span class="line">        茄子<span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"Checkbox3"</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"Checkbox3"</span>&gt;</span></span><br><span class="line">        黄瓜<span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span>&gt;</span></span><br><span class="line">        Button<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="string">"#frmTest :checkbox"</span>).attr(<span class="string">"disabled"</span>,<span class="string">"true"</span>);<span class="comment">//type="checkbox"的复选框不可用</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>(6):submit提交按钮选择器<br>通常情况下，一个表单中只允许有一个“type”属性值为“submit”的提交按钮，使用:submit选择器可获取表单中的这个提交按钮元素。<br>style.css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.bg_red</span></span><br><span class="line"><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> blue</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value">Orange</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>html<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>修改表单中提交按钮的背景色<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"frmTest"</span> <span class="attribute">action</span>=<span class="value">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"Input Button"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"点我就提交了"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">button</span>&gt;</span></span><br><span class="line">        Button<span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        <span class="comment">//$("#frmTest submit").addClass("bg_red");无效</span></span><br><span class="line">        $(<span class="string">"#frmTest input:submit"</span>).addClass(<span class="string">"bg_red"</span>);<span class="comment">//设置type="submit"的input标签(按钮)背景色</span></span><br><span class="line">        $(<span class="string">"#frmTest input:submit"</span>).attr(<span class="string">"value"</span>,<span class="string">"提交"</span>);<span class="comment">//更改显示内容</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>(7):image图像域选择器<br>当一个input元素的“type”属性值设为“image”时，该元素就是一个图像域，使用:image选择器可以快速获取该类全部元素。<br>使用:image选择器只能获取input图像域，而不能获取img格式的图像元素。<br>style.css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.bg_green</span></span><br><span class="line"><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> green</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">159px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">42px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">20px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>html<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>修改表单中图像元素的背景色<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"frmTest"</span> <span class="attribute">action</span>=<span class="value">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"image"</span> <span class="attribute">src</span>=<span class="value">"http://img.mukewang.com/52b284ea00016b2902590070.jpg"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">img</span> <span class="attribute">alt</span>=<span class="value">""</span> <span class="attribute">src</span>=<span class="value">"http://img.mukewang.com/52b284ea00016b2902590070.jpg"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="string">"#frmTest :image"</span>).addClass(<span class="string">"bg_green"</span>);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jquery/9.png" alt="image"></p>
<p>(8):button表单按钮选择器<br>表单中包含许多类型的按钮，而使用:button选择器能获取且只能获取“type”属性值为“button”的input和button这两类普通按钮元素。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>修改表单中按钮元素的背景色<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"frmTest"</span> <span class="attribute">action</span>=<span class="value">"#"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"Button1"</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"我是普通按钮"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"Submit1"</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"点我就提交"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">button</span>&gt;</span> 我也是普通按钮 <span class="tag">&lt;/<span class="title">button</span>&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="string">"#frmTest :button"</span>).addClass(<span class="string">"bg_blue"</span>);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jquery/10.png" alt="image"></p>
<p>(9):checked选中状态选择器<br>有一些元素存在选中状态，如复选框、单选按钮元素，选中时“checked”属性值为“checked”，调用:checked可以获取处于选中状态的全部元素。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;将处于选中状态的元素设为不可用&lt;/h3&gt;</span><br><span class="line">    &lt;<span class="keyword">form</span> id=<span class="string">"frmTest"</span> action=<span class="string">"#"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> id=<span class="string">"Radio1"</span> <span class="keyword">type</span>=<span class="string">"radio"</span> checked=<span class="string">"checked"</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">label</span> id=<span class="string">"Label1"</span> <span class="keyword">for</span>=<span class="string">"Radio1"</span>&gt;</span><br><span class="line">        苹果&lt;/<span class="keyword">label</span>&gt;&lt;<span class="keyword">br</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> id=<span class="string">"Radio2"</span> <span class="keyword">type</span>=<span class="string">"radio"</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">label</span> id=<span class="string">"Label2"</span> <span class="keyword">for</span>=<span class="string">"Radio2"</span>&gt;</span><br><span class="line">        桔子&lt;/<span class="keyword">label</span>&gt;&lt;<span class="keyword">br</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> id=<span class="string">"Checkbox1"</span> <span class="keyword">type</span>=<span class="string">"checkbox"</span> checked=<span class="string">"checked"</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">label</span> id=<span class="string">"Label3"</span> <span class="keyword">for</span>=<span class="string">"Checkbox1"</span>&gt;</span><br><span class="line">        荔枝&lt;/<span class="keyword">label</span>&gt;&lt;<span class="keyword">br</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> id=<span class="string">"Checkbox2"</span> <span class="keyword">type</span>=<span class="string">"checkbox"</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">label</span> id=<span class="string">"Label4"</span> <span class="keyword">for</span>=<span class="string">"Checkbox2"</span>&gt;</span><br><span class="line">        葡萄&lt;/<span class="keyword">label</span>&gt;&lt;<span class="keyword">br</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> id=<span class="string">"Checkbox3"</span> <span class="keyword">type</span>=<span class="string">"checkbox"</span> checked=<span class="string">"checked"</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">label</span> id=<span class="string">"Label5"</span> <span class="keyword">for</span>=<span class="string">"Checkbox3"</span>&gt;</span><br><span class="line">        香蕉&lt;/<span class="keyword">label</span>&gt;&lt;<span class="keyword">br</span> /&gt;</span><br><span class="line">    &lt;/<span class="keyword">form</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script <span class="keyword">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        $(<span class="string">"#frmTest :checked"</span>).attr(<span class="string">"disabled"</span>, true);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jquery/11.png" alt="image"></p>
<p>(10):selected选中状态选择器<br>与:checked选择器相比，:selected选择器只能获取select下拉列表框中全部处于选中状态的option选项元素。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>获取处于选中状态元素的内容<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"frmTest"</span> <span class="attribute">action</span>=<span class="value">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"Select1"</span> <span class="attribute">multiple</span>=<span class="value">"multiple"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"0"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"1"</span> <span class="attribute">selected</span>=<span class="value">"selected"</span>&gt;</span>桔子<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"2"</span>&gt;</span>荔枝<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"3"</span> <span class="attribute">selected</span>=<span class="value">"selected"</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"4"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">select</span>&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"tip"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        <span class="keyword">var</span> $txtOpt = $(<span class="string">"#frmTest :selected"</span>).text();</span><br><span class="line">        $(<span class="string">"#tip"</span>).html(<span class="string">"选中内容为:"</span> + $txtOpt);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jquery/12.png" alt="image"></p>
<h1 id="u7B2C_u4E09_u7AE0__u64CD_u4F5CDOM_u5143_u7D20"><a href="#u7B2C_u4E09_u7AE0__u64CD_u4F5CDOM_u5143_u7D20" class="headerlink" title="第三章 操作DOM元素"></a>第三章 操作DOM元素</h1><h2 id="1-_u4F7F_u7528attr_28_29_u65B9_u6CD5_u63A7_u5236_u5143_u7D20_u7684_u5C5E_u6027"><a href="#1-_u4F7F_u7528attr_28_29_u65B9_u6CD5_u63A7_u5236_u5143_u7D20_u7684_u5C5E_u6027" class="headerlink" title="1.使用attr()方法控制元素的属性"></a>1.使用attr()方法控制元素的属性</h2><p>attr()方法的作用是设置或者返回元素的属性，其中attr(属性名)格式是获取元素属性名的值，attr(属性名，属性值)格式则是设置元素属性名的值。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>attr()方法设置元素属性<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"http://127.0.0.1"</span> <span class="attribute">id</span>=<span class="value">"a1"</span>&gt;</span>点我就变<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span>我改变后的地址是：<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"tip"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="string">"#a1"</span>).attr(<span class="string">"href"</span> , <span class="string">"best.com"</span>);<span class="comment">//将href设置成best.com</span></span><br><span class="line">        <span class="keyword">var</span> $url = $(<span class="string">"#a1"</span>).attr(<span class="string">"href"</span>);<span class="comment">//获取id=a1的href属性的值</span></span><br><span class="line">        $(<span class="string">"#tip"</span>).html($url);<span class="comment">//id=tip设置值为$url</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-_u64CD_u4F5C_u5143_u7D20_u7684_u5185_u5BB9"><a href="#2-_u64CD_u4F5C_u5143_u7D20_u7684_u5185_u5BB9" class="headerlink" title="2.操作元素的内容"></a>2.操作元素的内容</h2><p>使用html()和text()方法操作元素的内容，当两个方法的参数为空时，表示获取该元素的内容，而如果方法中包含参数，则表示将参数值设置为元素内容。<br>html()方法可以获取元素的HTML内容，因此，原文中的格式代码也被一起获取，而text()方法只是获取元素中的文本内容，并不包含HTML格式代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>html()和text()方法设置元素内容<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"html"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"text"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"html_2"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"text_2"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        <span class="keyword">var</span> $content = <span class="string">"&lt;b&gt;唉，我又变胖了！&lt;/b&gt;"</span>;</span><br><span class="line">        $(<span class="string">"#html"</span>).html($content);</span><br><span class="line">        $(<span class="string">"#text"</span>).text($content);</span><br><span class="line">        $(<span class="string">"#html_2"</span>).html($(<span class="string">"h3"</span>).html());</span><br><span class="line">        $(<span class="string">"#text_2"</span>).text($(<span class="string">"h3"</span>).text());</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jquery/13.png" alt="image"></p>
<h2 id="3-_u64CD_u4F5C_u5143_u7D20_u7684_u6837_u5F0F"><a href="#3-_u64CD_u4F5C_u5143_u7D20_u7684_u6837_u5F0F" class="headerlink" title="3.操作元素的样式"></a>3.操作元素的样式</h2><p>通过addClass()和css()方法可以方便地操作元素中的样式，前者括号中的参数为增加元素的样式名称，后者直接将样式的属性内容写在括号中。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">title</span>&gt;</span>操作元素样式<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"jquery.js"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"style.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">&lt;!<span class="tag">--</span> <span class="tag">blue</span> <span class="tag">--</span>&gt;</span><br><span class="line">            <span class="class">.blue</span></span><br><span class="line">            <span class="rules">&#123;</span><br><span class="line">             <span class="rule"><span class="attribute">background-color</span>:<span class="value">Blue</span></span>;</span><br><span class="line">             <span class="rule"><span class="attribute">color</span>:<span class="value">White</span></span>;</span><br><span class="line">            &#125;</span></span><br><span class="line">        </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h3</span>&gt;</span>css()方法设置元素样式<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"content"</span>&gt;</span>我穿了一件红色外衣<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">p</span>&gt;</span>addClass方法<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">            $(<span class="string">"#content"</span>).css(&#123;<span class="string">"background-color"</span>:<span class="string">"#ff0000"</span>,<span class="string">"color"</span>:<span class="string">"White"</span>&#125;);</span><br><span class="line">            $(<span class="string">"p"</span>).addClass(<span class="string">"blue"</span>);</span><br><span class="line">        </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jquery/14.png" alt="image"></p>
<h2 id="4-_u79FB_u9664_u5C5E_u6027_u548C_u6837_u5F0F"><a href="#4-_u79FB_u9664_u5C5E_u6027_u548C_u6837_u5F0F" class="headerlink" title="4.移除属性和样式"></a>4.移除属性和样式</h2><p>使用removeAttr(name)和removeClass(class)分别可以实现移除元素的属性和样式的功能，前者方法中参数表示移除属性名，后者方法中参数则表示移除的样式名。<br>style.css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">div</span></span><br><span class="line"><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">8px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">180px</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.blue</span></span><br><span class="line"><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> Blue</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.white</span></span><br><span class="line"><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"> White</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>html<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>removeClass()方法移除元素样式<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"content"</span><span class="value">class="blue</span> <span class="attribute">white</span>"&gt;</span>我脱下了一件蓝色外衣<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"localhost"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"div_1"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"div_2"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="string">"#content"</span>).removeClass(<span class="string">"blue white"</span>);</span><br><span class="line">        <span class="keyword">var</span> $var1=$(<span class="string">"a"</span>).attr(<span class="string">"href"</span>);</span><br><span class="line">        $(<span class="string">"#div_1"</span>).html($var1);</span><br><span class="line">        $(<span class="string">"a"</span>).removeAttr(<span class="string">"href"</span>);</span><br><span class="line">        $var1=$(<span class="string">"a"</span>).attr(<span class="string">"href"</span>);</span><br><span class="line">        $(<span class="string">"#div_2"</span>).html($var1);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jquery/15.png" alt="image"></p>
<h2 id="5-_u4F7F_u7528append_28_29_u65B9_u6CD5_u5411_u5143_u7D20_u5185_u8FFD_u52A0_u5185_u5BB9"><a href="#5-_u4F7F_u7528append_28_29_u65B9_u6CD5_u5411_u5143_u7D20_u5185_u8FFD_u52A0_u5185_u5BB9" class="headerlink" title="5.使用append()方法向元素内追加内容"></a>5.使用append()方法向元素内追加内容</h2><p>append(content)方法的功能是向指定的元素中追加内容，被追加的content参数，可以是字符、HTML元素标记，还可以是一个返回字符串内容的函数。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>append()方法追加内容<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>hello <span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">rethtml</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> $html = <span class="string">"&lt;div id='test' title='hi'&gt;我是调用函数创建的&lt;/div&gt;"</span></span><br><span class="line">            <span class="keyword">return</span> $html;</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="string">"body"</span>).append(rethtml());<span class="comment">//向页面追加div（我是调用函数创建的）</span></span><br><span class="line">        $(<span class="string">"p"</span>).append(<span class="string">"你好"</span>);<span class="comment">//向p标签追加内容</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="6-_u4F7F_u7528appendTo_28_29_u65B9_u6CD5_u5411_u88AB_u9009_u5143_u7D20_u5185_u63D2_u5165_u5185_u5BB9"><a href="#6-_u4F7F_u7528appendTo_28_29_u65B9_u6CD5_u5411_u88AB_u9009_u5143_u7D20_u5185_u63D2_u5165_u5185_u5BB9" class="headerlink" title="6.使用appendTo()方法向被选元素内插入内容"></a>6.使用appendTo()方法向被选元素内插入内容</h2><p>appendTo()方法也可以向指定的元素内插入内容，它的使用格式是：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="attribute">content</span>).<span class="function"><span class="title">appendTo</span><span class="params">(selector)</span></span></span><br></pre></td></tr></table></figure></p>
<p>参数content表示需要插入的内容，参数selector表示被选的元素，即把content内容插入selector元素内，默认是在尾部。<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;appendTo()方法插入内容&lt;/h3&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span class=<span class="string">"green"</span>&gt;小乌龟&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;span class=<span class="string">"blue"</span>&gt;小兔子&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    //注意：class用<span class="string">''</span></span><br><span class="line">        var <span class="variable">$html</span> = <span class="string">"&lt;span class='red'&gt;小青蛙&lt;/span&gt;"</span></span><br><span class="line">        $(<span class="variable">$html</span>).appendTo(<span class="string">"div"</span>);//<span class="variable">$html</span>追加到div</span><br><span class="line">        var <span class="variable">$hh</span>=<span class="string">"&lt;span class='blue'&gt;小小&lt;/span&gt;"</span>;//这是值；添加下面代码只会追加小兔子一行,不会追加这行</span><br><span class="line">       // $(<span class="string">".blue"</span>).appendTo(<span class="string">"div"</span>);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jquery/16.png" alt="image"><br>去掉如下行的注释后<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// <span class="char">$(</span><span class="comment">".blue"</span>).appendTo(<span class="comment">"div"</span>);</span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jquery/17.png" alt="image"></p>
<h2 id="7-_u4F7F_u7528before_28_29_u548Cafter_28_29_u5728_u5143_u7D20_u524D_u540E_u63D2_u5165_u5185_u5BB9"><a href="#7-_u4F7F_u7528before_28_29_u548Cafter_28_29_u5728_u5143_u7D20_u524D_u540E_u63D2_u5165_u5185_u5BB9" class="headerlink" title="7.使用before()和after()在元素前后插入内容"></a>7.使用before()和after()在元素前后插入内容</h2><p>使用before()和after()方法可以在元素的前后插入内容，它们分别表示在整个元素的前面和后面插入指定的元素或内容，调用格式分别为：<br>$(selector).before(content)和$(selector).after(content)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>after()方法在元素之后插入内容<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"green"</span>&gt;</span>我们交个朋友吧！<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>追加后.green的全部内容:<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        <span class="keyword">var</span> $html = <span class="string">"&lt;span class='red'&gt;兄弟。&lt;/span&gt;"</span></span><br><span class="line">        $(<span class="string">".green"</span>).before(<span class="string">"你好啊！"</span>);<span class="comment">//前面加</span></span><br><span class="line">        $(<span class="string">".green"</span>).after($html);<span class="comment">//后面加</span></span><br><span class="line">        $(<span class="string">"div"</span>).html($(<span class="string">".green"</span>).html());<span class="comment">//.green内容没变</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jquery/18.png" alt="image"></p>
<h2 id="8-_u4F7F_u7528clone_28_29_u65B9_u6CD5_u590D_u5236_u5143_u7D20"><a href="#8-_u4F7F_u7528clone_28_29_u65B9_u6CD5_u590D_u5236_u5143_u7D20" class="headerlink" title="8.使用clone()方法复制元素"></a>8.使用clone()方法复制元素</h2><p>调用clone()方法可以生成一个被选元素的副本，即复制了一个被选元素，包含它的节点、文本和属性，它的调用格式为：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="function"><span class="title">clone</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p>
<p>其中参数selector可以是一个元素或HTML内容。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>使用clone()方法复制元素<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"red"</span> <span class="attribute">title</span>=<span class="value">"hi"</span>&gt;</span>我是美猴王<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="string">"body"</span>).append($(<span class="string">".red"</span>).clone());</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jquery/19.png" alt="image"></p>
<h2 id="9-_u66FF_u6362_u5185_u5BB9"><a href="#9-_u66FF_u6362_u5185_u5BB9" class="headerlink" title="9.替换内容"></a>9.替换内容</h2><p>replaceWith()和replaceAll()方法都可以用于替换元素或元素中的内容。</p>
<hr>
<p>调用时，内容和被替换元素所在的位置不同：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="function"><span class="title">replaceWith</span><span class="params">(content)</span></span>$(<span class="attribute">content</span>).<span class="function"><span class="title">replaceAll</span><span class="params">(selector)</span></span></span><br></pre></td></tr></table></figure></p>
<p>参数selector为被替换的元素，content为替换的内容。<br>使用replaceWith()方法替换之后，旧元素完全由新替换的元素所取代。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>使用replaceAll()方法替换元素内容<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"green"</span> <span class="attribute">title</span>=<span class="value">"hi"</span>&gt;</span>原内容1<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"red"</span> <span class="attribute">title</span>=<span class="value">"hi"</span>&gt;</span>原内容2<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>原内容3<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        <span class="keyword">var</span> $html = <span class="string">"&lt;span class='red' title='hi'&gt;替换内容&lt;/span&gt;"</span>;</span><br><span class="line">        $(<span class="string">".green"</span>).replaceWith($html);</span><br><span class="line">        $($html).replaceAll(<span class="string">".red"</span>);</span><br><span class="line">        <span class="comment">//$("nihao").replaceAll($("p"));//不能替换内容</span></span><br><span class="line">        $(<span class="string">"p"</span>).html(<span class="string">"替换标签p的内容"</span>);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jquery/20.png" alt="image"></p>
<h2 id="10-_u4F7F_u7528wrap_28_29_u548CwrapInner_28_29_u65B9_u6CD5_u5305_u88F9_u5143_u7D20_u548C_u5185_u5BB9"><a href="#10-_u4F7F_u7528wrap_28_29_u548CwrapInner_28_29_u65B9_u6CD5_u5305_u88F9_u5143_u7D20_u548C_u5185_u5BB9" class="headerlink" title="10.使用wrap()和wrapInner()方法包裹元素和内容"></a>10.使用wrap()和wrapInner()方法包裹元素和内容</h2><p>wrap()和wrapInner()方法都可以进行元素的包裹，但前者用于包裹元素本身，后者则用于包裹元素中的内容，它们的调用格式分别为：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="function"><span class="title">wrap</span><span class="params">(wrapper)</span></span></span><br><span class="line">$(selector).<span class="function"><span class="title">wrapInner</span><span class="params">(wrapper)</span></span></span><br></pre></td></tr></table></figure></p>
<p>参数selector为被包裹的元素，wrapper参数为包裹元素的格式。<br>style.css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">span</span></span><br><span class="line"><span class="rules">&#123;<span class="rule"><span class="attribute">color</span>:<span class="value"> White</span></span>;<span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">8px</span></span></span>;&#125;</span></span><br><span class="line"><span class="class">.red</span></span><br><span class="line"><span class="rules">&#123;<span class="rule"><span class="attribute">background-color</span>:<span class="value"> Red</span></span>;&#125;</span></span><br><span class="line"><span class="tag">div</span></span><br><span class="line"><span class="rules">&#123;<span class="rule"><span class="attribute">border</span>:<span class="value"><span class="number">2px</span> solid <span class="hexcolor">#00ff00</span></span></span></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>html<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>使用wrapInner()方法包裹元素<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"red"</span> <span class="attribute">title</span>=<span class="value">'hi'</span>&gt;</span>我的身体有点歪<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>我被div包围了<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="string">".red"</span>).wrapInner(<span class="string">"&lt;i&gt;&lt;/i&gt;"</span>);</span><br><span class="line">        $(<span class="string">"p"</span>).wrap(<span class="string">"&lt;div&gt;&lt;/div&gt;"</span>);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jquery/21.png" alt="image"></p>
<h2 id="11-_u4F7F_u7528each_28_29_u65B9_u6CD5_u904D_u5386_u5143_u7D20"><a href="#11-_u4F7F_u7528each_28_29_u65B9_u6CD5_u904D_u5386_u5143_u7D20" class="headerlink" title="11.使用each()方法遍历元素"></a>11.使用each()方法遍历元素</h2><p>each()方法可以遍历指定的元素集合，在遍历时，通过回调函数返回遍历元素的序列号，调用格式为：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">selector</span>).<span class="keyword">each</span>(<span class="function"><span class="keyword">function</span><span class="params">(<span class="keyword">index</span>)</span>)</span></span><br></pre></td></tr></table></figure></p>
<p>参数function为遍历时的回调函数，index为遍历元素的序列号，它从0开始。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>使用each()方法遍历元素<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"green"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"green"</span>&gt;</span>桃子<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"green"</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"green"</span>&gt;</span>荔枝<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="string">"span"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">1</span>) &#123;</span><br><span class="line">                $(<span class="keyword">this</span>).attr(<span class="string">"class"</span>, <span class="string">"red"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jquery/22.png" alt="image"></p>
<h2 id="12-_u4F7F_u7528remove_28_29_u548Cempty_28_29_u65B9_u6CD5_u5220_u9664_u5143_u7D20"><a href="#12-_u4F7F_u7528remove_28_29_u548Cempty_28_29_u65B9_u6CD5_u5220_u9664_u5143_u7D20" class="headerlink" title="12.使用remove()和empty()方法删除元素"></a>12.使用remove()和empty()方法删除元素</h2><p>remove()方法删除所选元素本身和子元素，该方法可以通过添加过滤参数指定需要删除的某些元素，而empty()方法则只删除所选元素的子元素。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>使用empty()方法删除元素<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"green"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"red"</span>&gt;</span>桃子<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"green"</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"red"</span>&gt;</span>荔枝<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span>p1<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span>p2<span class="tag">&lt;/<span class="title">div</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    $(<span class="string">"span"</span>).remove(<span class="string">".red"</span>);</span><br><span class="line">    $(<span class="string">"div"</span>).empty();</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>移除前：<br><img src="/img/jquery/23.png" alt="image"><br>移除后：<br><img src="/img/jquery/24.png" alt="image"></p>
<h1 id="u7B2C_u56DB_u7AE0_jQuery_u4E8B_u4EF6"><a href="#u7B2C_u56DB_u7AE0_jQuery_u4E8B_u4EF6" class="headerlink" title="第四章 jQuery事件"></a>第四章 jQuery事件</h1><h2 id="1-_u9875_u9762_u52A0_u8F7D_u65F6_u89E6_u53D1ready_28_29_u4E8B_u4EF6"><a href="#1-_u9875_u9762_u52A0_u8F7D_u65F6_u89E6_u53D1ready_28_29_u4E8B_u4EF6" class="headerlink" title="1.页面加载时触发ready()事件"></a>1.页面加载时触发ready()事件</h2><p>ready()事件类似于onLoad()事件，但前者只要页面的DOM结构加载后便触发，而后者必须在页面全部元素加载成功才触发，ready()可以写多个，按顺序执行。此外，下列写法是相等的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)等价于$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>页面载入时触发ready()事件<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"tip"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"btntest"</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"点下我"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $(<span class="string">"#btntest"</span>).bind(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">"#tip"</span>).html(<span class="string">"我被点击了！"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $(<span class="string">"#div2"</span>).html(<span class="string">"我被加载了"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行：<br><img src="/img/jquery/25.png" alt="image"><br>点击按钮后：<br><img src="/img/jquery/26.png" alt="image"></p>
<h2 id="2-_u4F7F_u7528bind_28_29_u65B9_u6CD5_u7ED1_u5B9A_u5143_u7D20_u7684_u4E8B_u4EF6"><a href="#2-_u4F7F_u7528bind_28_29_u65B9_u6CD5_u7ED1_u5B9A_u5143_u7D20_u7684_u4E8B_u4EF6" class="headerlink" title="2.使用bind()方法绑定元素的事件"></a>2.使用bind()方法绑定元素的事件</h2><p>bind()方法绑定元素的事件非常方便，绑定前，需要知道被绑定的元素名，绑定的事件名称，事件中执行的函数内容就可以，它的绑定格式如下：<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="keyword">bind</span>(event,[<span class="type">data</span>] <span class="function"><span class="keyword">function</span></span>)</span><br></pre></td></tr></table></figure></p>
<p>参数event为事件名称，多个事件名称用空格隔开，function为事件执行的函数。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>bind()方法绑多个事件<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"btntest"</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"点击或移出就不可用了"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">"#btntest"</span>).bind(<span class="string">"click mouseout"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//点击或者鼠标移出按钮就不可用</span></span><br><span class="line">                $(<span class="keyword">this</span>).attr(<span class="string">"disabled"</span>, <span class="string">"true"</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-_u4F7F_u7528hover_28_29_u65B9_u6CD5_u5207_u6362_u4E8B_u4EF6"><a href="#3-_u4F7F_u7528hover_28_29_u65B9_u6CD5_u5207_u6362_u4E8B_u4EF6" class="headerlink" title="3.使用hover()方法切换事件"></a>3.使用hover()方法切换事件</h2><p>hover()方法的功能是当鼠标移到所选元素上时，执行方法中的第一个函数，鼠标移出时，执行方法中的第二个函数，实现事件的切实效果，调用格式如下：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(</span>selector).hover(over，<span class="keyword">out</span>);</span><br></pre></td></tr></table></figure></p>
<p>over参数为移到所选元素上触发的函数，out参数为移出元素时触发的函数。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>hover()方法切换事件<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span>鼠标移入时为橘红色，否则没有颜色<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">"div"</span>).hover(</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="keyword">this</span>).addClass(<span class="string">"orange"</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="keyword">this</span>).removeClass(<span class="string">"orange"</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="4-_u4F7F_u7528toggle_28_29_u65B9_u6CD5_u7ED1_u5B9A_u591A_u4E2A_u51FD_u6570"><a href="#4-_u4F7F_u7528toggle_28_29_u65B9_u6CD5_u7ED1_u5B9A_u591A_u4E2A_u51FD_u6570" class="headerlink" title="4.使用toggle()方法绑定多个函数"></a>4.使用toggle()方法绑定多个函数</h2><p>toggle()方法可以在元素的click事件中绑定两个或两个以上的函数，同时，它还可以实现元素的隐藏与显示的切换，绑定多个函数的调用格式如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="function"><span class="title">toggle</span><span class="params">(fun1()</span></span>,<span class="function"><span class="title">fun2</span><span class="params">()</span></span>,<span class="function"><span class="title">funN</span><span class="params">()</span></span>,...)</span><br></pre></td></tr></table></figure></p>
<p>其中，fun1，fun2就是多个函数的名称<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>toggle()方法绑定多个函数<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"btntest"</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"点一下我"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"div1"</span>&gt;</span>我是动态显示的<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"div2"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//点击按钮id=div1显示或者隐藏</span></span><br><span class="line">            $(<span class="string">"#btntest"</span>).bind(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">"#div1"</span>).toggle();<span class="comment">//等价show() hide()</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//点击id=div2时顺序切换苹果，香蕉，葡萄</span></span><br><span class="line">           $(<span class="string">"#div2"</span>).toggle(</span><br><span class="line">               <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                 $(<span class="keyword">this</span>).html(<span class="string">"香蕉"</span>);</span><br><span class="line">                 &#125;,</span><br><span class="line">               <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                 $(<span class="keyword">this</span>).html(<span class="string">"葡萄"</span>);</span><br><span class="line">                 &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>运行<br><img src="/img/jquery/27.png" alt="image"><br>点击按钮“我是动态显示的”隐藏或者显示切换，点击div2苹果，香蕉，葡萄循环切换<br><img src="/img/jquery/28.png" alt="image"></p>
<h2 id="5-_u4F7F_u7528unbind_28_29_u65B9_u6CD5_u79FB_u9664_u5143_u7D20_u7ED1_u5B9A_u7684_u4E8B_u4EF6"><a href="#5-_u4F7F_u7528unbind_28_29_u65B9_u6CD5_u79FB_u9664_u5143_u7D20_u7ED1_u5B9A_u7684_u4E8B_u4EF6" class="headerlink" title="5.使用unbind()方法移除元素绑定的事件"></a>5.使用unbind()方法移除元素绑定的事件</h2><p>unbind()方法可以移除元素已绑定的事件，它的调用格式如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).unbind(event,<span class="function"><span class="keyword">fun</span>)</span></span><br></pre></td></tr></table></figure></p>
<p>其中参数event表示需要移除的事件名称，多个事件名用空格隔开，fun参数为事件执行时调用的函数名称。<br>style.css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">div</span></span><br><span class="line"><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">160px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"> solid <span class="number">1px</span> <span class="hexcolor">#ccc</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">8px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.color</span></span><br><span class="line"><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"> Orange</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.backcolor</span></span><br><span class="line"><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> Orange</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"> White</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>html<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>unbind()移除绑定的事件<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"btntest"</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">value</span>=<span class="value">"移除事件"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span>点击和双击效果不同哦<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">////单击div时文字变橘色</span></span><br><span class="line">            $(<span class="string">"div"</span>).bind(<span class="string">"click"</span>,</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="keyword">this</span>).removeClass(<span class="string">"backcolor"</span>).addClass(<span class="string">"color"</span>);</span><br><span class="line">                <span class="comment">//双击div时背景变橘色</span></span><br><span class="line">            &#125;).bind(<span class="string">"dblclick"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="keyword">this</span>).removeClass(<span class="string">"color"</span>).addClass(<span class="string">"backcolor"</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">//点击按钮移除div使用事件</span></span><br><span class="line">            $(<span class="string">"#btntest"</span>).bind(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">"div"</span>).unbind();<span class="comment">//使用unbind()方法移除已绑定的全部事件。</span></span><br><span class="line">                $(<span class="keyword">this</span>).attr(<span class="string">"disabled"</span>, <span class="string">"true"</span>);<span class="comment">//按钮（点击后）设置为不可用 此时div保持最近设置的状态</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>备注:$(“div”).unbind(“click”);//只是移除点击事件</p>
<h2 id="6-_u4F7F_u7528one_28_29_u65B9_u6CD5_u7ED1_u5B9A_u5143_u7D20_u7684_u4E00_u6B21_u6027_u4E8B_u4EF6"><a href="#6-_u4F7F_u7528one_28_29_u65B9_u6CD5_u7ED1_u5B9A_u5143_u7D20_u7684_u4E00_u6B21_u6027_u4E8B_u4EF6" class="headerlink" title="6.使用one()方法绑定元素的一次性事件"></a>6.使用one()方法绑定元素的一次性事件</h2><p>one()方法可以绑定元素任何有效的事件，但这种方法绑定的事件只会触发一次，它的调用格式如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).one(event,[data],<span class="function"><span class="keyword">fun</span>)</span></span><br></pre></td></tr></table></figure></p>
<p>参数event为事件名称，data为触发事件时携带的数据，fun为触发该事件时执行的函数。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>one()方法执行一次绑定事件<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span>请点击我一下<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>div被点击了0次<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> intI = <span class="number">0</span>;</span><br><span class="line">            $(<span class="string">"div"</span>).one(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                intI++;</span><br><span class="line">                $(<span class="keyword">this</span>).css(<span class="string">"font-size"</span>, intI + <span class="string">"px"</span>);<span class="comment">//div中字体调整</span></span><br><span class="line">                $(<span class="string">"p"</span>).html(<span class="string">"div被点击了"</span>+intI+<span class="string">"次"</span>);<span class="comment">//点击一次后显示1次，之后点击再也没有反应</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="7-_u8C03_u7528trigger_28_29_u65B9_u6CD5_u624B_u52A8_u89E6_u53D1_u6307_u5B9A_u7684_u4E8B_u4EF6"><a href="#7-_u8C03_u7528trigger_28_29_u65B9_u6CD5_u624B_u52A8_u89E6_u53D1_u6307_u5B9A_u7684_u4E8B_u4EF6" class="headerlink" title="7.调用trigger()方法手动触发指定的事件"></a>7.调用trigger()方法手动触发指定的事件</h2><p>trigger()方法可以直接手动触发元素指定的事件，这些事件可以是元素自带事件，也可以是自定义的事件，该事件必须能执行，调用格式为：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="function"><span class="title">trigger</span><span class="params">(event)</span></span></span><br></pre></td></tr></table></figure></p>
<p>其中event参数为需要手动触发的事件名称。<br>style.css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">div</span></span><br><span class="line"><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">160px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"> solid <span class="number">1px</span> <span class="hexcolor">#ccc</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">8px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.color</span></span><br><span class="line"><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"> Orange</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>html<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>trigger()手动触发事件<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">value</span>=<span class="value">"请输入姓名"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span>我一开始就是橘色<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="comment">//指定输入框默认为选中状态(select事件)</span></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           $(<span class="string">"input"</span>).trigger(<span class="string">"select"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义事件</span></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//指定change-color事件与其函数</span></span><br><span class="line">            $(<span class="string">"div"</span>).bind(<span class="string">"change-color"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="keyword">this</span>).addClass(<span class="string">"color"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//调用自定义的change-color函数</span></span><br><span class="line">            $(<span class="string">"div"</span>).trigger(<span class="string">"change-color"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jquery/29.png" alt="image"></p>
<h2 id="8-_u6587_u672C_u6846_u7684focus_u548Cblur_u4E8B_u4EF6"><a href="#8-_u6587_u672C_u6846_u7684focus_u548Cblur_u4E8B_u4EF6" class="headerlink" title="8.文本框的focus和blur事件"></a>8.文本框的focus和blur事件</h2><p>focus事件在元素获取焦点时触发，如点击文本框时，触发该事件；而blur事件则在元素丢失焦点时触发，如点击除文本框的任何元素，都会触发该事件。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>表单中文本框的focus和blur事件<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"txtest"</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">value</span>=<span class="value">""</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">"input"</span>)</span><br><span class="line">            .bind(<span class="string">"focus"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//点击框时</span></span><br><span class="line">                $(<span class="string">"div"</span>).html(<span class="string">"请输入您的姓名！"</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            .bind(<span class="string">"blur"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//移出框点击其他地方</span></span><br><span class="line">                <span class="keyword">if</span> ($(<span class="keyword">this</span>).val().length == <span class="number">0</span>)</span><br><span class="line">                    $(<span class="string">"div"</span>).html(<span class="string">"你的名称不能为空！"</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jquery/30.png" alt="image"></p>
<h2 id="9-_u4E0B_u62C9_u5217_u8868_u6846_u7684change_u4E8B_u4EF6"><a href="#9-_u4E0B_u62C9_u5217_u8868_u6846_u7684change_u4E8B_u4EF6" class="headerlink" title="9.下拉列表框的change事件"></a>9.下拉列表框的change事件</h2><p>当一个元素的值发生变化时，将会触发change事件，例如在选择下拉列表框中的选项时，就会触change事件。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>下拉列表的change事件<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"seltest"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"葡萄"</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"苹果"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"荔枝"</span>&gt;</span>荔枝<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"香焦"</span>&gt;</span>香焦<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">"#seltest"</span>).bind(<span class="string">"change"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//选中苹果时背景色红色，否则绿色</span></span><br><span class="line">                <span class="keyword">if</span> ($(<span class="keyword">this</span>).val() == <span class="string">"苹果"</span>)</span><br><span class="line">                    $(<span class="keyword">this</span>).css(<span class="string">"background-color"</span>, <span class="string">"red"</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    $(<span class="keyword">this</span>).css(<span class="string">"background-color"</span>, <span class="string">"green"</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jquery/31.png" alt="image"></p>
<h2 id="10-_u8C03_u7528live_28_29_u65B9_u6CD5_u7ED1_u5B9A_u5143_u7D20_u7684_u4E8B_u4EF6"><a href="#10-_u8C03_u7528live_28_29_u65B9_u6CD5_u7ED1_u5B9A_u5143_u7D20_u7684_u4E8B_u4EF6" class="headerlink" title="10.调用live()方法绑定元素的事件"></a>10.调用live()方法绑定元素的事件</h2><p>与bind()方法相同，live()方法与可以绑定元素的可执行事件，除此相同功能外，live()方法还可以绑定动态元素，即使用代码添加的元素事件，格式如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).live(event,[data],<span class="function"><span class="keyword">fun</span>)</span></span><br></pre></td></tr></table></figure></p>
<p>参数event为事件名称，data为触发事件时携带的数据，fun为触发该事件时执行的函数。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>live()方法绑多个事件<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">   <span class="comment">// 使用live()方法绑定，页面中按钮元素的单击事件，而这个按钮是通过追加的方式添加至页面的。</span></span><br><span class="line">   <span class="comment">//点击或移出按钮，按钮就变灰色不可用</span></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">"#btntest"</span>).live(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//点击事件</span></span><br><span class="line">                $(<span class="keyword">this</span>).attr(<span class="string">"disabled"</span>, <span class="string">"true"</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="string">"#btntest"</span>).live(<span class="string">"mouseout"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//移出事件</span></span><br><span class="line">                $(<span class="keyword">this</span>).attr(<span class="string">"disabled"</span>, <span class="string">"true"</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="string">"body"</span>).append(<span class="string">"&lt;input id='btntest' type='button' value='点击或移出就不可用了' /&gt;"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>备注:以上代码可以简化为$(“#btntest”).live(“click mouseout”, function () {}…</p>
<h1 id="u7B2C_u4E94_u7AE0_jQuery__u52A8_u753B_u7279_u6548"><a href="#u7B2C_u4E94_u7AE0_jQuery__u52A8_u753B_u7279_u6548" class="headerlink" title="第五章  jQuery 动画特效"></a>第五章  jQuery 动画特效</h1><h2 id="1-_u8C03_u7528show_28_29_u548Chide_28_29_u65B9_u6CD5_u663E_u793A_u548C_u9690_u85CF_u5143_u7D20"><a href="#1-_u8C03_u7528show_28_29_u548Chide_28_29_u65B9_u6CD5_u663E_u793A_u548C_u9690_u85CF_u5143_u7D20" class="headerlink" title="1.调用show()和hide()方法显示和隐藏元素"></a>1.调用show()和hide()方法显示和隐藏元素</h2><p>show()和hide()方法用于显示或隐藏页面中的元素，调用格式分别为：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="function"><span class="title">hide</span><span class="params">(speed,[callback])</span></span></span><br><span class="line">$(selector).<span class="function"><span class="title">show</span><span class="params">(speed,[callback])</span></span></span><br></pre></td></tr></table></figure></p>
<p>参数speed设置隐藏或显示时的速度值，可为“slow”、“fast”或毫秒数值，可选项参数callback为隐藏或显示动作执行完成后调用的函数名。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>使用show()和hide()方法显示和隐藏元素<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h4</span>&gt;</span>我喜欢吃的水果<span class="tag">&lt;/<span class="title">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">li</span>&gt;</span>甘桔<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">li</span>&gt;</span>梨<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"hidval"</span> <span class="attribute">type</span>=<span class="value">"hidden"</span> <span class="attribute">value</span>=<span class="value">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//通过点击h4实现ul表的隐藏与显示</span></span><br><span class="line">            $(<span class="string">"h4"</span>).bind(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> ($(<span class="string">"#hidval"</span>).val() == <span class="number">0</span>) &#123;</span><br><span class="line">                    $(<span class="string">"ul"</span>).show();</span><br><span class="line">                    $(<span class="string">"#hidval"</span>).val(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $(<span class="string">"ul"</span>).hide();</span><br><span class="line">                    $(<span class="string">"#hidval"</span>).val(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-show_28_29_u548Chide_28_29_u65B9_u6CD5_u7684_u52A8_u753B_u6548_u679C"><a href="#2-show_28_29_u548Chide_28_29_u65B9_u6CD5_u7684_u52A8_u753B_u6548_u679C" class="headerlink" title="2.show()和hide()方法的动画效果"></a>2.show()和hide()方法的动画效果</h2><p>show()和hide()增加“speed”参数可以实现动画效果的显示与隐藏，同时，如果添加了方法的回调函数，它将在显示或隐藏执行成功后被调用。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>show()和hide()方法动画方式显示和隐藏元素<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h4</span>&gt;</span>我喜欢吃的水果<span class="tag">&lt;/<span class="title">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">li</span>&gt;</span>甘桔<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">li</span>&gt;</span>梨<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"hidval"</span> <span class="attribute">type</span>=<span class="value">"hidden"</span> <span class="attribute">value</span>=<span class="value">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">"h4"</span>).bind(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> ($(<span class="string">"#hidval"</span>).val() == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//缓慢的展开ul列表</span></span><br><span class="line">                    $(<span class="string">"ul"</span>).show(<span class="number">1500</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//1500（ms）也可以用"slow"</span></span><br><span class="line">                        $(<span class="string">"#hidval"</span>).val(<span class="number">1</span>);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//快速地收起ul表</span></span><br><span class="line">                    $(<span class="string">"ul"</span>).hide(<span class="string">"fast"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                        $(<span class="string">"#hidval"</span>).val(<span class="number">0</span>);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-_u8C03_u7528toggle_28_29_u65B9_u6CD5_u5B9E_u73B0_u52A8_u753B_u5207_u6362_u6548_u679C"><a href="#3-_u8C03_u7528toggle_28_29_u65B9_u6CD5_u5B9E_u73B0_u52A8_u753B_u5207_u6362_u6548_u679C" class="headerlink" title="3.调用toggle()方法实现动画切换效果"></a>3.调用toggle()方法实现动画切换效果</h2><p>实现元素的显示与隐藏需要使用hide()与show()，那么有没有更简便的方法来实现同样的动画效果呢？<br>调用toggle()方法就可以很容易做到，即如果元素处于显示状态，调用该方法则隐藏该元素，反之，则显示该元素，它的调用格式是：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="function"><span class="title">toggle</span><span class="params">(speed,[callback])</span></span></span><br></pre></td></tr></table></figure></p>
<p>其中speed参数为动画效果时的速度值，可以为数字，单位为毫秒，也可是“fast”、“slow”字符，可选项参数callback为方法执行成功后回调的函数名称。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>toggle()方法的动画切换效果<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h4</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"fl"</span>&gt;</span>我喜欢吃的水果<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"fr"</span> <span class="attribute">id</span>=<span class="value">"spnTip"</span>&gt;</span>显示<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">li</span>&gt;</span>甘桔<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">li</span>&gt;</span>梨<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> $spn = $(<span class="string">"#spnTip"</span>);</span><br><span class="line">            $(<span class="string">"h4"</span>).bind(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">"ul"</span>).toggle(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//展开到完全显示时间3s</span></span><br><span class="line">                 $spn.html() == <span class="string">"隐藏"</span> ? $spn.html(<span class="string">"显示"</span>) : $spn.html(<span class="string">"隐藏"</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>效果：<br><img src="/img/jquery/32.png" alt="image"><br>当点击显示时显示列表，文字提示变成隐藏，点击隐藏列表收回。</p>
<h2 id="4-_u4F7F_u7528slideUp_28_29_u548CslideDown_28_29_u65B9_u6CD5_u7684_u6ED1_u52A8_u6548_u679C"><a href="#4-_u4F7F_u7528slideUp_28_29_u548CslideDown_28_29_u65B9_u6CD5_u7684_u6ED1_u52A8_u6548_u679C" class="headerlink" title="4.使用slideUp()和slideDown()方法的滑动效果"></a>4.使用slideUp()和slideDown()方法的滑动效果</h2><p>可以使用slideUp()和slideDown()方法在页面中滑动元素，前者用于向上滑动元素，后者用于向下滑动元素，它们的调用方法分别为：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="function"><span class="title">slideUp</span><span class="params">(speed,[callback])</span></span>和$(selector).<span class="function"><span class="title">slideDown</span><span class="params">(speed,[callback])</span></span></span><br></pre></td></tr></table></figure></p>
<p>其中speed参数为滑动时的速度，单位是毫秒，可选项参数callback为滑动成功后执行的回调函数名。<br>要注意的是：slideDown()仅适用于被隐藏的元素；slideup()则相反。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>使用slideUp()和slideDown()方法的滑动效果<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h4</span>&gt;</span>我喜欢吃的水果<span class="tag">&lt;/<span class="title">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">li</span>&gt;</span>甘桔<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">li</span>&gt;</span>梨<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"hidval"</span> <span class="attribute">type</span>=<span class="value">"hidden"</span> <span class="attribute">value</span>=<span class="value">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">"h4"</span>).bind(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> ($(<span class="string">"#hidval"</span>).val() == <span class="number">0</span>) &#123;</span><br><span class="line">                    $(<span class="string">"ul"</span>).slideUp(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                        $(<span class="string">"#hidval"</span>).val(<span class="number">1</span>);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $(<span class="string">"ul"</span>).slideDown(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                        $(<span class="string">"#hidval"</span>).val(<span class="number">0</span>);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jquery/33.png" alt="image"><br>点击“我喜欢吃的水果”缓缓下拉显示列表，再点时缓缓上升收起列表。</p>
<h2 id="5-_u4F7F_u7528slideToggle_28_29_u65B9_u6CD5_u5B9E_u73B0_u56FE_u7247_u201C_u53D8_u8138_u201D_u6548_u679C"><a href="#5-_u4F7F_u7528slideToggle_28_29_u65B9_u6CD5_u5B9E_u73B0_u56FE_u7247_u201C_u53D8_u8138_u201D_u6548_u679C" class="headerlink" title="5.使用slideToggle()方法实现图片“变脸”效果"></a>5.使用slideToggle()方法实现图片“变脸”效果</h2><p>使用slideToggle()方法可以切换slideUp()和slideDown()，即调用该方法时，如果元素已向上滑动，则元素自动向下滑动，反之，则元素自动向上滑动，格式为：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="function"><span class="title">slideToggle</span><span class="params">(speed,[callback])</span></span></span><br></pre></td></tr></table></figure></p>
<p>其中speed参数为动画效果时的速度值，可以为数字，单位为毫秒，也可是“fast”、“slow”字符，可选项参数callback为方法执行成功后回调的函数名称。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>使用slideToggle()方法切换滑动效果<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h4</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"fl"</span>&gt;</span>我喜欢吃的水果<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"fr"</span> <span class="attribute">id</span>=<span class="value">"spnTip"</span>&gt;</span>向下滑<span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">li</span>&gt;</span>甘桔<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">li</span>&gt;</span>梨<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"hidval"</span> <span class="attribute">type</span>=<span class="value">"hidden"</span> <span class="attribute">value</span>=<span class="value">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> $spn = $(<span class="string">"#spnTip"</span>);</span><br><span class="line">            $(<span class="string">"h4"</span>).bind(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">"ul"</span>).slideToggle(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           $spn.html() == <span class="string">"向下滑"</span> ? $spn.html(<span class="string">"向上滑"</span>) : $spn.html(<span class="string">"向下滑"</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>运行效果与4中相似，点击h4中内容时显示“向下滑”显示下拉菜单，名称改为“向上滑”，再次点击向上收起。</p>
<h2 id="6-_u4F7F_u7528fadeIn_28_29_u4E0EfadeOut_28_29_u65B9_u6CD5_u5B9E_u73B0_u6DE1_u5165_u6DE1_u51FA_u6548_u679C"><a href="#6-_u4F7F_u7528fadeIn_28_29_u4E0EfadeOut_28_29_u65B9_u6CD5_u5B9E_u73B0_u6DE1_u5165_u6DE1_u51FA_u6548_u679C" class="headerlink" title="6.使用fadeIn()与fadeOut()方法实现淡入淡出效果"></a>6.使用fadeIn()与fadeOut()方法实现淡入淡出效果</h2><p>fadeIn()和fadeOut()方法可以实现元素的淡入淡出效果，前者淡入隐藏的元素，后者可以淡出可见的元素，它们的调用格式分别为：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="function"><span class="title">fadeIn</span><span class="params">(speed,[callback])</span></span>和$(selector).<span class="function"><span class="title">fadeOut</span><span class="params">(speed,[callback])</span></span></span><br></pre></td></tr></table></figure></p>
<p>其中参数speed为淡入淡出的速度，callback参数为完成后执行的回调函数名。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h3</span>&gt;</span>使用fadeIn()与fadeOut()方法实现元素淡入淡出的效果<span class="tag">&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h4</span>&gt;</span>我喜欢吃的水果<span class="tag">&lt;/<span class="title">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">li</span>&gt;</span>甘桔<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">li</span>&gt;</span>梨<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"hidval"</span> <span class="attribute">type</span>=<span class="value">"hidden"</span> <span class="attribute">value</span>=<span class="value">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">"h4"</span>).bind(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> ($(<span class="string">"#hidval"</span>).val() == <span class="number">0</span>) &#123;</span><br><span class="line">                    $(<span class="string">"ul"</span>).fadeOut(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                        $(<span class="string">"#hidval"</span>).val(<span class="number">1</span>);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $(<span class="string">"ul"</span>).fadeIn(<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                        $(<span class="string">"#hidval"</span>).val(<span class="number">0</span>);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/jquery/34.png" alt="image"><br>点击h4时淡入淡出。</p>
<h1 id="u6CE8_u610F_u4E8B_u9879_uFF1A"><a href="#u6CE8_u610F_u4E8B_u9879_uFF1A" class="headerlink" title="注意事项："></a>注意事项：</h1><p>1.平台上输入$($)代码时，一些用户的浏览器会造成崩溃，所以您做这个练习时可使用粘贴的方式，不要直接输入。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要内容：<br>说明：本教程使用webstorm和jquery-1.9.1<br>]]>
    
    </summary>
    
      <category term="jQuery" scheme="http://www.bestzhangjin.com/tags/jQuery/"/>
    
      <category term="前端" scheme="http://www.bestzhangjin.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开发]]></title>
    <link href="http://www.bestzhangjin.com/2016/03/24/android/"/>
    <id>http://www.bestzhangjin.com/2016/03/24/android/</id>
    <published>2016-03-24T11:42:20.000Z</published>
    <updated>2016-05-28T02:10:14.684Z</updated>
    <content type="html"><![CDATA[<p>主要内容：<br><a id="more"></a></p>
<h1 id="u7B2C_u4E00_u7AE0__u73AF_u5883_u642D_u5EFA"><a href="#u7B2C_u4E00_u7AE0__u73AF_u5883_u642D_u5EFA" class="headerlink" title="第一章 环境搭建"></a>第一章 环境搭建</h1><p>Windows10+jdk8+android studio<br>android studio下载<a href="http://www.android-studio.org/" target="_blank" rel="external">http://www.android-studio.org/</a></p>
<h1 id="u7B2C_u4E8C_u7AE0_Android_u57FA_u7840_u77E5_u8BC6"><a href="#u7B2C_u4E8C_u7AE0_Android_u57FA_u7840_u77E5_u8BC6" class="headerlink" title="第二章 Android基础知识"></a>第二章 Android基础知识</h1><h2 id="1-_u4ECB_u7ECD"><a href="#1-_u4ECB_u7ECD" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>本阶段包含Android理论知识，是Android应用开发的根基，要想以后有更长足的提高，这部分的知识需要耐心学习实践,在这里你将渐渐熟悉Android的方方面面目录结构：<br><img src="/img/android/1.png" alt="image"><br>Manifests：配置目录AndroidManifest.xml默认内容如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0"encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">manifest</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line"><span class="attribute">package</span>=<span class="value">"com.example.administrator.helloworld"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">application</span></span><br><span class="line"><span class="attribute">android:allowBackup</span>=<span class="value">"true"</span>//是否允许备份应用的数据，默认是<span class="attribute">true</span>,当备份数据的时候，它的数据会被备份下来。如果设为<span class="attribute">false</span>，那么绝对不会备份应用的数据，即使是备份整个系统。</span><br><span class="line"><span class="attribute">android:icon</span>=<span class="value">"@mipmap/ic_launcher"</span>//应用程序图标</span><br><span class="line"><span class="attribute">android:label</span>=<span class="value">"@string/app_name"</span>	//应用程序名字</span><br><span class="line"><span class="attribute">android:theme</span>=<span class="value">"@style/AppTheme"</span>&gt;</span><span class="comment">&lt;!--声明作为程序入口的Activity--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">activity</span></span><br><span class="line"><span class="attribute">android:name</span>=<span class="value">".MainActivity"</span>//<span class="attribute">Activity</span>用来与用户交互的主要工具，是用户打开程序的初始界面<span class="attribute">.</span>此处为引用程序默认启动的<span class="attribute">Activity</span></span><br><span class="line"><span class="attribute">android:label</span>=<span class="value">"@string/app_name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span>//IntentFilter类表示Intent过滤器,大部分情况下,每一个component都会定义一个或多个IntentFilter,用于表明其可处理的Intent(Intent用于启动Activity,Service,以及BroadcastReceiver三种组件,同时还是组件之间通信的重要媒介。)。定义的方法:在<span class="tag">&lt;<span class="title">activity</span>&gt;</span>,<span class="tag">&lt;<span class="title">receiver</span>&gt;</span>,<span class="tag">&lt;<span class="title">service</span>&gt;</span>元素中增加一个或多个<span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span>子元素//android.intent.action.MAIN决定一个应用程序最先启动那个组 件,android.intent.category.LAUNCHER决定应用程序是否显示在程序列表里(说白了就是是否在桌面上显示一个图标)</span><br><span class="line">这两个属性组合情况：</span><br><span class="line">第一种情况：有MAIN,无LAUNCHER，程序列表中无图标</span><br><span class="line">原因：android.intent.category.LAUNCHER决定应用程序是否显示在程序列表里 </span><br><span class="line">第二种情况：无MAIN,有LAUNCHER，程序列表中无图标</span><br><span class="line">原因：android.intent.action.MAIN决定应用程序最先启动的Activity，如果没有Main，则不知启动哪个Activity，故也不会有图标出现</span><br><span class="line">所以这两个属性一般成对出现。</span><br><span class="line">如果一个应用中有两个组件intent-filter都添加了android.intent.action.MAIN和</span><br><span class="line">android.intent.category.LAUNCHER这两个属性， 则这个应用将会显示两个图标， 写在前面的组件先运行。</span><br><span class="line"><span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.MAIN"</span>/&gt;</span>//"android.intent.action.MAIN"这个action的filter都能通过action测试</span><br><span class="line"><span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.LAUNCHER"</span>/&gt;</span>//如果一个intent没有定义category,则所有filter都可以通过category测试</span><br><span class="line"><span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Res：资源文件夹<br>Layout：布局 menu：菜单 mipmap：图片 values：dimens尺寸 strings字符串 styles样式</p>
<h2 id="2-Activity_u7EC4_u4EF6"><a href="#2-Activity_u7EC4_u4EF6" class="headerlink" title="2.Activity组件"></a>2.Activity组件</h2><p>Activity是Android四大基本组件之一，可以通过setContentView方法绑定一个布局用于呈现界面与用户进行交互，是Android开发必不可少的学习内容<br>核心内容：1.认识Activity 2.Activity绑定视图3.启动Activity软件环境：Android Studio<br>(1)认识ActivityActivity就是界面字符串引用规范(string.xml)<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android:label=<span class="string">"@string/app_name"</span>Strings.xml:&lt;resources&gt;</span><br><span class="line">&lt;<span class="type">string</span> <span class="property">name</span>=<span class="string">"app_name"</span>&gt;HelloWorld&lt;/<span class="type">string</span>&gt;</span><br><span class="line">&lt;<span class="type">string</span> <span class="property">name</span>=<span class="string">"hello_world"</span>&gt;Hello world!&lt;/<span class="type">string</span>&gt;</span><br><span class="line">&lt;<span class="type">string</span> <span class="property">name</span>=<span class="string">"action_settings"</span>&gt;Settings&lt;/<span class="type">string</span>&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure></p>
<p>java下的mainactivity：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.activity_main);<span class="comment">//指定一个视图用来呈现视图，去掉则运行时没有界面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>R.java：自动生成</p>
<p>(2)Activity绑定视图<br>修改activity绑定的布局：点击Layout右键单击-&gt;new-&gt;layout resource fille<br><img src="/img/android/2.png" alt="image"><br>生成的mylayout.xml内容如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0"encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line"><span class="attribute">android:orientation</span>=<span class="value">"vertical"</span>//<span class="attribute">vertical:</span>垂直布局，如往里面拉按钮将垂直排布</span><br><span class="line"></span><br><span class="line"><span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line"><span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>java下的mainactivity<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.activity_main);<span class="comment">//指定一个视图用来呈现视图，去掉则运行时没有界面,将setContentView(R.layout.activity_main);改为setContentView(R.layout.mylayout);就完成了</span></span><br></pre></td></tr></table></figure></p>
<p>(3)启动Activity<br>本课讲解如何创建一个 Activity，如何在 Manifest 文件中对Activity进行配置，以及如何使用 startActivity 函数启动一个 Activity。<br>java目录下mainactivity如下：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.mylayout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>res目录的layout下的mylayout.xml：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span> <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>&gt;</span></span><br><span class="line">//此处是一个按钮</span><br><span class="line">    <span class="tag">&lt;<span class="title">Button</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"启动另外一个Ativity"</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/btnStartAnotherAty"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>主程序mainactivity下：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.mylayout);</span><br><span class="line">    findViewById(R.id.btnStartAnotherAty).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>创建一个新的activity<br>注意：在java目录下也可以<br><img src="/img/android/3.png" alt="image"><br>新建的activity让其.xml输出如下<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView <span class="string">android:</span>text=<span class="string">"这是另外一个activity"</span> <span class="string">android:</span>layout_width=<span class="string">"wrap_content"</span></span><br><span class="line"><span class="label">    android:</span>layout_height=<span class="string">"wrap_content"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>Main中点击事件修改如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,AnotherAty.<span class="keyword">class</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如此可以运行：<br>点击按钮-&gt;进入另外一个界面，按返回键回到按钮界面<br>改成如下可以跳转到网页<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"><span class="comment">// startActivity(new Intent(MainActivity.this,AnotherAty.class));</span></span><br><span class="line">     startActivity(<span class="keyword">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(<span class="string">"http://jikexueyuan.com"</span>)));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-_u8BA4_u8BC6_Activity__u7684_u751F_u547D_u5468_u671F"><a href="#2-_u8BA4_u8BC6_Activity__u7684_u751F_u547D_u5468_u671F" class="headerlink" title="2.认识 Activity 的生命周期"></a>2.认识 Activity 的生命周期</h2><p>核心内容：查看帮助文档;Activity生命周期<br>(1)查看帮助文档<br>帮助文档：<br>如下选中Documentation for Android SDK进行下载<br><img src="/img/android/4.png" alt="image"><br>之后有以下文件，打开就可以<br>F:/Android/sdk/docs/develop/index.html<br>之后点击develop-&gt;reference   点击See all API packages. 搜索activity如下，随便点击一个，因为都是继承来自activity的<br><img src="/img/android/5.png" alt="image"><br><img src="/img/android/6.png" alt="image"><br>选中android.app.Activity下拉如下：activity的生命周期图<br><img src="/img/android/7.png" alt="image"><br>如何看开发文档(是一本书)<br>点击develop下的API Guides从上往下看，整个能够看完就会是一个安卓高手<br><img src="/img/android/8.png" alt="image"></p>
<p>(2)认识 Activity 的生命周期<br>在mainactivity中添加如下代码：<br>和帮助文档一样—–7个函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        System.out.print(<span class="string">"onCreate"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        System.out.print(<span class="string">"onResume"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">        System.out.print(<span class="string">"onPause"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStop();</span><br><span class="line">        System.out.print(<span class="string">"onStop"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        System.out.print(<span class="string">"onDestroy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onRestart();</span><br><span class="line">        System.out.print(<span class="string">"onRestart"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        System.out.print(<span class="string">"onStart"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>启动后效果如下：<br><img src="/img/android/9.png" alt="image"><br>Activity打开<br><img src="/img/android/10.png" alt="image"><br>启动模拟器之后执行oncreate onstart onresume 之后进入activity界面<br>按下home键进入桌面（activity界面消失）执行的是onpause onstop<br>点击最右边个键（呈现最近应用列表）：重新呈现activity界面，执行的函数是onrestart onstart onresume进入界面<br>按下后退键，界面消失，执行的是onpause,onstop,ondestory<br>点击最右边个键（呈现最近应用列表）：重新呈现activity界面，执行的函数是oncrate  onstart onresume进入界面,这是一个全新的生命周期<br><img src="/img/android/11.png" alt="image"></p>
<p>(3)在 Activity 跳转过程中的生命周期<br>新建一个activity，mainactivity（A）和anotherAty（B）<br>A代码如下：<br>Activity_main:添加按钮<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"启动B Activity"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btn_B_StartAnotherAty"</span></span><br><span class="line">    android:layout_alignParentTop=<span class="string">"true"</span></span><br><span class="line">    android:layout_alignParentStart=<span class="string">"true"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>Main.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        findViewById(R.id.btnStartAnotherAty).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,AnotherAty.class));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"A onCreate"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        System.out.print(<span class="string">"A onResume"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">        System.out.print(<span class="string">"A onPause"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStop();</span><br><span class="line">        System.out.print(<span class="string">"A onStop"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        System.out.print(<span class="string">"A onDestroy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onRestart();</span><br><span class="line">        System.out.print(<span class="string">"A onRestart"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        System.out.print(<span class="string">"A onStart"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>B.java:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherAty</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_another_aty);</span><br><span class="line">        System.out.print(<span class="string">"B onCreate"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        System.out.print(<span class="string">"B onResume"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">        System.out.print(<span class="string">"B onPause"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStop();</span><br><span class="line">        System.out.print(<span class="string">"B onStop"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        System.out.print(<span class="string">"B onDestroy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onRestart();</span><br><span class="line">        System.out.print(<span class="string">"B onRestart"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        System.out.print(<span class="string">"B onStart"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>运行程序：<br>执行A onCreate , A onStart ,A onResume, A界面显示<br>点击A按钮，依次执行A onPouse,B onCreate,B onstart,B resume,A stop，显示B界面<br>此时用的B是不透明的，完全遮住了A，如果B透明，不完全遮住A呢？<br>在AndroidMainfest.xml下设置B，使他为一个对话框<br>代码如下：（我自己添加的有问题—应该是差什么包）<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">android:</span>theme=<span class="string">"@style/Base.Theme.AppCompat.Dialog"</span></span><br></pre></td></tr></table></figure></p>
<p>极客学院如下：<br><img src="/img/android/12.png" alt="image"><br>此时执行A onPouse, B onCreate,B onstart,B onResume,此时B明A暗<br>在B外的其他空白处点击一下，B关闭，执行B onPause,.A onResume,B onStop,B onDestory.A显示</p>
<h2 id="3-_u5728_Activity__u4E4B_u95F4_u4F20_u9012_u53C2_u6570"><a href="#3-_u5728_Activity__u4E4B_u95F4_u4F20_u9012_u53C2_u6570" class="headerlink" title="3.在 Activity 之间传递参数"></a>3.在 Activity 之间传递参数</h2><p>核心内容：在 Activity 之间传递简单数据;在 Activity 之间传递复杂数据;在 Activity 之间传递自定义值对象<br>(1)传递简单数据<br>设置activity_another_aty.xml如下：<br>设置输出框id=tv<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView <span class="string">android:</span>text=<span class="string">"这是另外一个activity"</span> <span class="string">android:</span>layout_width=<span class="string">"wrap_content"</span></span><br><span class="line"><span class="label">    android:</span>layout_height=<span class="string">"wrap_content"</span> <span class="string">android:</span>id=<span class="string">"@+id/tv"</span>/&gt;</span><br></pre></td></tr></table></figure></p>
<p>Activity_main.xml下加按钮<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"启动另一个Activity"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btn_B_StartAnotherAty"</span></span><br><span class="line">    android:layout_alignParentTop=<span class="string">"true"</span></span><br><span class="line">    android:layout_alignParentStart=<span class="string">"true"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>设置mainactivity.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    findViewById(R.id.btn_B_StartAnotherAty).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            Intent i = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, AnotherAty.class);</span><br><span class="line">            i.putExtra(<span class="string">"data"</span>,<span class="string">"hello,me"</span>);<span class="comment">//传参数</span></span><br><span class="line">            startActivity(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>anotheraty.java中获取：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AnotherAty</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Activity</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">TextView</span> tv;<span class="comment">//访问已经写好的Textview---输出框</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(<span class="type">R</span>.layout.activity_another_aty);</span><br><span class="line"></span><br><span class="line">        <span class="type">Intent</span> i = getIntent();</span><br><span class="line">        tv = (<span class="type">TextView</span>) findViewById(<span class="type">R</span>.id.tv);<span class="comment">//findViewById返回为view类型，需要强转</span></span><br><span class="line">        tv.setText(i.getStringExtra(<span class="string">"data"</span>));        <span class="comment">//为输出框设置字符串(getStringExtra("data")-获取到一个字符串的数据,名字是data)</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>如上运行之后点击按钮就可以跳转到另外一个界面：输出hello，me</p>
<p>(2)传递数据包Bundle<br>对上面的代码进行一定的修改就可以<br>Mainactivity.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    findViewById(R.id.btn_B_StartAnotherAty).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            Intent i = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, AnotherAty.class);</span><br><span class="line">           <span class="comment">// i.putExtra("data","hello,me");//传参数  名字是data 值是hello,me</span></span><br><span class="line">            Bundle b = <span class="keyword">new</span> Bundle();<span class="comment">//数据包</span></span><br><span class="line">            b.putString(<span class="string">"name"</span>,<span class="string">"liming"</span>);</span><br><span class="line">            b.putInt(<span class="string">"age"</span>, <span class="number">2</span>);</span><br><span class="line">            b.putString(<span class="string">"sex"</span>, <span class="string">"man"</span>);</span><br><span class="line">            i.putExtras(b);<span class="comment">//区别于putExtra</span></span><br><span class="line">            startActivity(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>AnotherAty.java<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="literal">void</span> onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super<span class="built_in">.</span>onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R<span class="built_in">.</span>layout<span class="built_in">.</span>activity_another_aty);</span><br><span class="line"></span><br><span class="line">    Intent i = getIntent();</span><br><span class="line">     tv = (TextView) findViewById(R<span class="built_in">.</span>id<span class="built_in">.</span>tv);</span><br><span class="line">   <span class="comment">// tv.setText(i.getStringExtra("data"));        //为输出框设置字符串(getStringExtra("data")-获取到一个字符串的数据,名字是data)</span></span><br><span class="line">    Bundle <span class="built_in">data</span> = i<span class="built_in">.</span>getExtras();</span><br><span class="line">    tv<span class="built_in">.</span>setText(<span class="built_in">String</span><span class="built_in">.</span>format(<span class="string">"name=%s,age=%d,sex=%s,name1=%s"</span>,<span class="built_in">data</span><span class="built_in">.</span>getString(<span class="string">"name"</span>),<span class="built_in">data</span><span class="built_in">.</span>getInt(<span class="string">"age"</span>),<span class="built_in">data</span><span class="built_in">.</span>getString(<span class="string">"sex"</span>,<span class="string">"woman"</span>),<span class="built_in">data</span><span class="built_in">.</span>getString(<span class="string">"name1"</span>,<span class="string">"张"</span>)));</span><br><span class="line">    <span class="comment">//name1再包里面没有输出为这里设置的默认值，sex传入有值，将不再用这里设置的默认值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>效果图<br><img src="/img/android/13.png" alt="image"><br><img src="/img/android/14.png" alt="image"><br>当然，也可以用putextra(String name,Bundle value)传递Bundle<br>Mainactivity.java<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    Intent i = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, AnotherAty.<span class="keyword">class</span>);</span><br><span class="line">   <span class="comment">// i.putExtra("data","hello,me");//传参数  名字是data 值是hello,me</span></span><br><span class="line">    Bundle b = <span class="keyword">new</span> Bundle();<span class="comment">//数据包</span></span><br><span class="line">    b.putString(<span class="string">"name"</span>,<span class="string">"liming"</span>);</span><br><span class="line">    b.putInt(<span class="string">"age"</span>, <span class="number">2</span>);</span><br><span class="line">    b.putString(<span class="string">"sex"</span>, <span class="string">"man"</span>);</span><br><span class="line">   <span class="comment">// i.putExtras(b);//区别于putExtra</span></span><br><span class="line">    i.putExtra(<span class="string">"data"</span>,b);</span><br><span class="line">    startActivity(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>AnotherAty.java<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="literal">void</span> onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super<span class="built_in">.</span>onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R<span class="built_in">.</span>layout<span class="built_in">.</span>activity_another_aty);</span><br><span class="line"></span><br><span class="line">    Intent i = getIntent();</span><br><span class="line">     tv = (TextView) findViewById(R<span class="built_in">.</span>id<span class="built_in">.</span>tv);</span><br><span class="line">   <span class="comment">// tv.setText(i.getStringExtra("data"));        //为输出框设置字符串(getStringExtra("data")-获取到一个字符串的数据,名字是data)</span></span><br><span class="line">  <span class="comment">//  Bundle data = i.getExtras();   //getExtras()传参数时接收函数</span></span><br><span class="line">    Bundle <span class="built_in">data</span> = i<span class="built_in">.</span>getBundleExtra(<span class="string">"data"</span>);<span class="comment">//getExtra()传包时接收函数</span></span><br><span class="line">    tv<span class="built_in">.</span>setText(<span class="built_in">String</span><span class="built_in">.</span>format(<span class="string">"name=%s,age=%d,sex=%s,name1=%s"</span>,<span class="built_in">data</span><span class="built_in">.</span>getString(<span class="string">"name"</span>), <span class="built_in">data</span><span class="built_in">.</span>getInt(<span class="string">"age"</span>),<span class="built_in">data</span><span class="built_in">.</span>getString(<span class="string">"sex"</span>,<span class="string">"woman"</span>),<span class="built_in">data</span><span class="built_in">.</span>getString(<span class="string">"name1"</span>,<span class="string">"张"</span>)));</span><br><span class="line">    <span class="comment">//name1再包里面没有输出为这里设置的默认值，sex传入有值，将不再用这里设置的默认值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行效果同上</p>
<p>(3)传递值对象<br>值对象：自定义的有数据类型的对象<br>如传递一个数据类型user<br>新建一个user.java类：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span>(<span class="params"><span class="keyword">int</span> age, String name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span>(<span class="params">String name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span>(<span class="params"><span class="keyword">int</span> age</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>mainactivity.java<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i.putExtra(<span class="string">"User"</span>,<span class="keyword">new</span> User(<span class="string">"张三丰"</span>,<span class="number">25</span>));<span class="comment">//提示错误！</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/img/android/15.png" alt="image"><br>User需要实现parcelable或者Serializable序列化<br>修改User<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by zhang on 2016/1/11.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">( String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>mainactivity.java传参数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Intent i = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, AnotherAty.<span class="keyword">class</span>);</span><br><span class="line">               <span class="comment">// i.putExtra("data","hello,me");//传参数  名字是data 值是hello,me</span></span><br><span class="line"><span class="comment">//                Bundle b = new Bundle();//数据包</span></span><br><span class="line"><span class="comment">//                b.putString("name","liming");</span></span><br><span class="line"><span class="comment">//                b.putInt("age", 2);</span></span><br><span class="line"><span class="comment">//                b.putString("sex", "man");</span></span><br><span class="line"><span class="comment">//               // i.putExtras(b);//区别于putExtra</span></span><br><span class="line"><span class="comment">//                i.putExtra("data",b);</span></span><br><span class="line">                i.putExtra(<span class="string">"User"</span>,<span class="keyword">new</span> User(<span class="string">"张三丰"</span>,<span class="number">25</span>));</span><br><span class="line">                startActivity(i);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p>
<p>anotheraty.java获取参数：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">protected void <span class="keyword">on</span>Create(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.<span class="keyword">on</span>Create(savedInstanceState);</span><br><span class="line">        <span class="built_in">set</span>ContentView(R.layout.activity_another_aty);</span><br><span class="line"></span><br><span class="line">        Intent i = getIntent();</span><br><span class="line">         tv = (TextView) findViewById(R.id.tv);</span><br><span class="line">       // tv.<span class="built_in">set</span>Text(i.getStringExtra(<span class="string">"data"</span>));        //为输出框设置字符串(getStringExtra(<span class="string">"data"</span>)-获取到一个字符串的数据,名字是data)</span><br><span class="line">      //  Bundle data = i.getExtras();   //getExtras()传参数时接收函数</span><br><span class="line">//        Bundle data = i.getBundleExtra(<span class="string">"data"</span>);//getExtra()传包时接收函数</span><br><span class="line">//        tv.<span class="built_in">set</span>Text(String.format(<span class="string">"name=%s,age=%d,sex=%s,name1=%s"</span>,data.getString(<span class="string">"name"</span>), data.getInt(<span class="string">"age"</span>),data.getString(<span class="string">"sex"</span>,<span class="string">"woman"</span>),data.getString(<span class="string">"name1"</span>,<span class="string">"张"</span>)));</span><br><span class="line">        //name1再包里面没有输出为这里设置的默认值，sex传入有值，将不再用这里设置的默认值</span><br><span class="line"></span><br><span class="line">        //取User</span><br><span class="line">        User <span class="keyword">user</span>= (User)i.getSerializableExtra(<span class="string">"User"</span>);</span><br><span class="line">//注意：传参获取必须名字一样：getSerializableExtra(<span class="string">"User"</span>)不能用小写的<span class="string">"user"</span>,因为传参用的大写i.putExtra(<span class="string">"User"</span>,new User(<span class="string">"张三丰"</span>,<span class="number">25</span>));否则编译通过，不能运行</span><br><span class="line">tv.<span class="built_in">set</span>Text(String.format(<span class="string">"user.info(name=%s,age=%d)"</span>,<span class="keyword">user</span>.getName(), <span class="keyword">user</span>.getAge()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>运行点击按钮时显示：user.info(name=张三丰,age=25)</p>
<p>但是与parcelable相比，Serializable效率低<br>Parcelable是安卓的，速度快，但是要实现两个方法<br>describeContents()<br>writeToParcel(Parcel dest, int flags)需要手动写数据 执行过程中会自动执行到这个函数<br>再创建一个泛型<br>Parcelable具体实现如下：<br>User.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Parcel;</span><br><span class="line"><span class="keyword">import</span> android.os.Parcelable;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import java.io.Serializable;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by zhang on 2016/1/11.</span><br><span class="line"> */</span></span><br><span class="line"><span class="comment">//public class User implements Serializable&#123;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Parcelable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">( String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        dest.writeString(getName());<span class="comment">//这里怎么写的Creator中怎么读 多个string时可以用Bundle</span></span><br><span class="line">        dest.writeInt(getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个泛型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;User&gt; CREATOR = <span class="keyword">new</span> Creator&lt;User&gt;() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(source.readString(),source.readByte());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="keyword">public</span> User[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>mainactivity.java<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Intent i = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, AnotherAty.<span class="keyword">class</span>);</span><br><span class="line">               <span class="comment">// i.putExtra("data","hello,me");//传参数  名字是data 值是hello,me</span></span><br><span class="line"><span class="comment">//                Bundle b = new Bundle();//数据包</span></span><br><span class="line"><span class="comment">//                b.putString("name","liming");</span></span><br><span class="line"><span class="comment">//                b.putInt("age", 2);</span></span><br><span class="line"><span class="comment">//                b.putString("sex", "man");</span></span><br><span class="line"><span class="comment">//               // i.putExtras(b);//区别于putExtra</span></span><br><span class="line"><span class="comment">//                i.putExtra("data",b);</span></span><br><span class="line">                i.putExtra(<span class="string">"User"</span>,<span class="keyword">new</span> User(<span class="string">"张三丰"</span>,<span class="number">25</span>));</span><br><span class="line">                startActivity(i);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p>
<p>anotheraty.java<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">protected void <span class="keyword">on</span>Create(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.<span class="keyword">on</span>Create(savedInstanceState);</span><br><span class="line">        <span class="built_in">set</span>ContentView(R.layout.activity_another_aty);</span><br><span class="line"></span><br><span class="line">        Intent i = getIntent();</span><br><span class="line">         tv = (TextView) findViewById(R.id.tv);</span><br><span class="line">       // tv.<span class="built_in">set</span>Text(i.getStringExtra(<span class="string">"data"</span>));        //为输出框设置字符串(getStringExtra(<span class="string">"data"</span>)-获取到一个字符串的数据,名字是data)</span><br><span class="line">      //  Bundle data = i.getExtras();   //getExtras()传参数时接收函数</span><br><span class="line">//        Bundle data = i.getBundleExtra(<span class="string">"data"</span>);//getExtra()传包时接收函数</span><br><span class="line">//        tv.<span class="built_in">set</span>Text(String.format(<span class="string">"name=%s,age=%d,sex=%s,name1=%s"</span>,data.getString(<span class="string">"name"</span>), data.getInt(<span class="string">"age"</span>),data.getString(<span class="string">"sex"</span>,<span class="string">"woman"</span>),data.getString(<span class="string">"name1"</span>,<span class="string">"张"</span>)));</span><br><span class="line">        //name1再包里面没有输出为这里设置的默认值，sex传入有值，将不再用这里设置的默认值</span><br><span class="line"></span><br><span class="line">        //取User</span><br><span class="line">//        User <span class="keyword">user</span>= (User)i.getSerializableExtra(<span class="string">"User"</span>);//用什么方法实现的就用什么方法获取</span><br><span class="line">        //注意：传参获取必须名字一样：getSerializableExtra(<span class="string">"User"</span>)不能用小写的<span class="string">"user"</span>,因为传参用的大写i.putExtra(<span class="string">"User"</span>,new User(<span class="string">"张三丰"</span>,<span class="number">25</span>));否则编译通过，不能运行</span><br><span class="line">       User <span class="keyword">user</span>= i.getParcelableExtra(<span class="string">"User"</span>);//用什么方法实现的就用什么方法获取</span><br><span class="line">        tv.<span class="built_in">set</span>Text(String.format(<span class="string">"user.info(name=%s,age=%d)"</span>,<span class="keyword">user</span>.getName(), <span class="keyword">user</span>.getAge()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>运行效果与上面一样</p>
<p>(4)获取 Activity 的返回参数<br>Activity_another_aty设置垂直排列并设置一个输入框和按钮，并在对应java中进行设置<br>Activity_main中添加一个输出框textview,对应main.Java中进行定义<br>Activity_Main.xml:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span> android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:orientation=<span class="string">"vertical"</span></span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span> android:paddingLeft=<span class="string">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    android:paddingRight=<span class="string">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    android:paddingTop=<span class="string">"@dimen/activity_vertical_margin"</span></span><br><span class="line">    android:paddingBottom=<span class="string">"@dimen/activity_vertical_margin"</span> tools:context=<span class="string">".MainActivity"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">        android:<span class="type">text</span>=<span class="string">"启动另一个Activity"</span></span><br><span class="line">        android:<span class="property">id</span>=<span class="string">"@+id/btn_B_StartAnotherAty"</span></span><br><span class="line">        android:layout_alignParentTop=<span class="string">"true"</span></span><br><span class="line">        android:layout_alignParentStart=<span class="string">"true"</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">        android:<span class="type">text</span>=<span class="string">"New Text"</span></span><br><span class="line">        android:<span class="property">id</span>=<span class="string">"@+id/textView"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p>
<p>Activity_another_aty.xml:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout <span class="string">xmlns:</span>android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line"><span class="label">    xmlns:</span>tools=<span class="string">"http://schemas.android.com/tools"</span> <span class="string">android:</span>layout_width=<span class="string">"match_parent"</span></span><br><span class="line"><span class="label">    android:</span>layout_height=<span class="string">"match_parent"</span> <span class="string">android:</span>paddingLeft=<span class="string">"@dimen/activity_horizontal_margin"</span></span><br><span class="line"><span class="label">    android:</span>paddingRight=<span class="string">"@dimen/activity_horizontal_margin"</span></span><br><span class="line"><span class="label">    android:</span>paddingTop=<span class="string">"@dimen/activity_vertical_margin"</span></span><br><span class="line"><span class="label">    android:</span>paddingBottom=<span class="string">"@dimen/activity_vertical_margin"</span></span><br><span class="line"><span class="label"></span><br><span class="line">    android:</span>orientation=<span class="string">"vertical"</span></span><br><span class="line"><span class="label">    tools:</span>context=<span class="string">"com.example.zhang.helloworld.AnotherAty"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView <span class="string">android:</span>text=<span class="string">"这是另外一个activity"</span> <span class="string">android:</span>layout_width=<span class="string">"wrap_content"</span></span><br><span class="line"><span class="label">        android:</span>layout_height=<span class="string">"wrap_content"</span> <span class="string">android:</span>id=<span class="string">"@+id/tv"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;EditText</span><br><span class="line"><span class="label">        android:</span>layout_width=<span class="string">"match_parent"</span></span><br><span class="line"><span class="label">        android:</span>layout_height=<span class="string">"wrap_content"</span></span><br><span class="line"><span class="label">        android:</span>id=<span class="string">"@+id/editText"</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line"><span class="label">        android:</span>layout_width=<span class="string">"wrap_content"</span></span><br><span class="line"><span class="label">        android:</span>layout_height=<span class="string">"wrap_content"</span></span><br><span class="line"><span class="label">        android:</span>text=<span class="string">"Send Back"</span></span><br><span class="line"><span class="label">        android:</span>id=<span class="string">"@+id/button"</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p>
<p>Main.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        textView = (TextView) findViewById(R.id.textView);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btn_B_StartAnotherAty).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Intent i = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, AnotherAty.class);</span><br><span class="line">               <span class="comment">// i.putExtra("data","hello,me");//传参数  名字是data 值是hello,me</span></span><br><span class="line"><span class="comment">//                Bundle b = new Bundle();//数据包</span></span><br><span class="line"><span class="comment">//                b.putString("name","liming");</span></span><br><span class="line"><span class="comment">//                b.putInt("age", 2);</span></span><br><span class="line"><span class="comment">//                b.putString("sex", "man");</span></span><br><span class="line"><span class="comment">//               // i.putExtras(b);//区别于putExtra</span></span><br><span class="line"><span class="comment">//                i.putExtra("data",b);</span></span><br><span class="line">                i.putExtra(<span class="string">"User"</span>, <span class="keyword">new</span> User(<span class="string">"张三丰"</span>, <span class="number">25</span>));</span><br><span class="line"><span class="comment">//                startActivity(i);//因为要接收传回的参数，所以不能再用这个函数</span></span><br><span class="line">                startActivityForResult(i,<span class="number">0</span>);<span class="comment">//0---请求的代码：请求的代码传过去再传回来，可以用于代表此次请求的意义是什么</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写函数</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="comment">//此函数可以获取到请求码，也可以获取到结果码</span></span><br><span class="line">    <span class="comment">//data对应的是传进来的setResult(1,i);中的i</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">        textView.setText(<span class="string">"另一个activity返回的是"</span>+data.getStringExtra(<span class="string">"data"</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>another_aty.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.zhang.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.Menu;</span><br><span class="line"><span class="keyword">import</span> android.view.MenuItem;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherAty</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  TextView tv;</span><br><span class="line">    <span class="keyword">private</span> EditText editText;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_another_aty);</span><br><span class="line"></span><br><span class="line">        Intent i = getIntent();</span><br><span class="line">        tv = (TextView) findViewById(R.id.tv);</span><br><span class="line">        editText= (EditText) findViewById(R.id.editText);<span class="comment">//初始化</span></span><br><span class="line">        <span class="comment">// tv.setText(i.getStringExtra("data"));        //为输出框设置字符串(getStringExtra("data")-获取到一个字符串的数据,名字是data)</span></span><br><span class="line">        <span class="comment">//  Bundle data = i.getExtras();   //getExtras()传参数时接收函数</span></span><br><span class="line"><span class="comment">//        Bundle data = i.getBundleExtra("data");//getExtra()传包时接收函数</span></span><br><span class="line"><span class="comment">//        tv.setText(String.format("name=%s,age=%d,sex=%s,name1=%s",data.getString("name"), data.getInt("age"),data.getString("sex","woman"),data.getString("name1","张")));</span></span><br><span class="line">        <span class="comment">//name1再包里面没有输出为这里设置的默认值，sex传入有值，将不再用这里设置的默认值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//取User</span></span><br><span class="line"><span class="comment">//        User user= (User)i.getSerializableExtra("User");//用什么方法实现的就用什么方法获取</span></span><br><span class="line">        <span class="comment">//注意：传参获取必须名字一样：getSerializableExtra("User")不能用小写的"user",因为传参用的大写i.putExtra("User",new User("张三丰",25));否则编译通过，不能运行</span></span><br><span class="line">        User user= i.getParcelableExtra(<span class="string">"User"</span>);<span class="comment">//用什么方法实现的就用什么方法获取</span></span><br><span class="line">        tv.setText(String.format(<span class="string">"user.info(name=%s,age=%d)"</span>,user.getName(), user.getAge()));</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.button).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Intent i=<span class="keyword">new</span> Intent();</span><br><span class="line">                i.putExtra(<span class="string">"data"</span>,editText.getText().toString());</span><br><span class="line">                setResult(<span class="number">1</span>, i);<span class="comment">//设置返回值setResult(状态码，值)</span></span><br><span class="line">                finish();<span class="comment">//直接把当前的activity给结束掉</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></span><br><span class="line">        getMenuInflater().inflate(R.menu.menu_another_aty, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Handle action bar item clicks here. The action bar will</span></span><br><span class="line">        <span class="comment">// automatically handle clicks on the Home/Up button, so long</span></span><br><span class="line">        <span class="comment">// as you specify a parent activity in AndroidManifest.xml.</span></span><br><span class="line">        <span class="keyword">int</span> id = item.getItemId();</span><br><span class="line">        <span class="comment">//noinspection SimplifiableIfStatement</span></span><br><span class="line">        <span class="keyword">if</span> (id == R.id.action_settings) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onOptionsItemSelected</span><span class="params">(item)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行效果：输出返回值<br><img src="/img/android/16.png" alt="image"></p>
<h2 id="4-Android__u4E2D_Activity__u542F_u52A8_u6A21_u5F0F"><a href="#4-Android__u4E2D_Activity__u542F_u52A8_u6A21_u5F0F" class="headerlink" title="4.Android 中 Activity 启动模式"></a>4.Android 中 Activity 启动模式</h2><p>核心内容：Activity Standard 启动模式;Activity SingleTop 启动模式;Activity SingleTask 启动模式;Activity SingleInstance 启动模式<br>(1)标准启动模式<br>标准启动模式就是默认的启动模式<br>Activity_main.xml:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView android:<span class="type">text</span>=<span class="string">"@string/hello_world"</span> android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/tv"</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p>
<p>Mainactivity.java:<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> TextView tv;</span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    tv= (TextView) findViewById(R.id.tv);</span><br><span class="line">    <span class="comment">//TaskID----任务ID    Current activity id：当前activity的实例ID</span></span><br><span class="line">    tv.setText(String.format(<span class="string">"TaskID:%d\n,Current activity id:%s"</span>,getTaskId(),toString()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行效果<br><img src="/img/android/17.png" alt="image"><br>再加一个button之后<br>Activity_main.xml:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span> <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span> <span class="attribute">android:paddingLeft</span>=<span class="value">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">    <span class="attribute">android:paddingRight</span>=<span class="value">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    <span class="attribute">android:paddingTop</span>=<span class="value">"@dimen/activity_vertical_margin"</span></span><br><span class="line">    <span class="attribute">android:paddingBottom</span>=<span class="value">"@dimen/activity_vertical_margin"</span> <span class="attribute">tools:context</span>=<span class="value">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">TextView</span> <span class="attribute">android:text</span>=<span class="value">"@string/hello_world"</span> <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/tv"</span></span><br><span class="line">    /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- android:textAllCaps="false":取消默认的全部大写 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Button</span></span><br><span class="line">        <span class="attribute">android:textAllCaps</span>=<span class="value">"false"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"启动mainactivity"</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/btnStartSelf"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Mainactivity.java:<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> TextView tv;</span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    tv= (TextView) findViewById(R.id.tv);</span><br><span class="line">    <span class="comment">//TaskID----任务ID    Current activity id：当前activity的实例ID</span></span><br><span class="line">    tv.setText(String.format(<span class="string">"TaskID:%d\n,Current activity id:%s"</span>,getTaskId(),toString()));</span><br><span class="line"></span><br><span class="line">    findViewById(R.id.btnStartSelf).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,MainActivity.class));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行效果<br><img src="/img/android/18.png" alt="image"><br>点击按钮后taskid没有变，而当前activity的id改变<br>任务栈：启动的第一个实例放入其中，第2,3…个实例也是放入其中<br>按后退键可以弹出栈点的实例，呈现上一个activity的实例<br>在Androidmanifest.xml中可以进行启动模式配置<br>默认的是stadard<br><img src="/img/android/19.png" alt="image"></p>
<p>(2)SingleTop 模式<br>把上面的Androidmanifest.xml中配置改为SingleTop后运行<br><img src="/img/android/20.png" alt="image"><br>此时点击按钮显示没有任何改变<br>再建一个activity测试<br>注意：同一个文件设置ID不能一样，不同的文件设置ID可以相同<br>程序如下：<br>Activity_main.xml与activity_baty.xml完全一样<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span> <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span> <span class="attribute">android:paddingLeft</span>=<span class="value">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">    <span class="attribute">android:paddingRight</span>=<span class="value">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    <span class="attribute">android:paddingTop</span>=<span class="value">"@dimen/activity_vertical_margin"</span></span><br><span class="line">    <span class="attribute">android:paddingBottom</span>=<span class="value">"@dimen/activity_vertical_margin"</span> <span class="attribute">tools:context</span>=<span class="value">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">TextView</span> <span class="attribute">android:text</span>=<span class="value">"@string/hello_world"</span> <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/tv"</span></span><br><span class="line">    /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- android:textAllCaps="false":取消默认的全部大写 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">Button</span></span><br><span class="line">        <span class="attribute">android:textAllCaps</span>=<span class="value">"false"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"启动mainactivity"</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/btnStartMain"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">Button</span></span><br><span class="line">        <span class="attribute">android:textAllCaps</span>=<span class="value">"false"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"启动BAty"</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/btnStartBty"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Mainactivity.java<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Activity</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">TextView</span> tv;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        tv= (<span class="type">TextView</span>) findViewById(<span class="type">R</span>.id.tv);</span><br><span class="line">        <span class="comment">//TaskID----任务ID    Current activity id：当前activity的实例ID</span></span><br><span class="line">        tv.setText(<span class="type">String</span>.format(<span class="string">"TaskID:%d\n,Current activity id:%s"</span>,getTaskId(),toString()));</span><br><span class="line"></span><br><span class="line">        findViewById(<span class="type">R</span>.id.btnStartMain).setOnClickListener(<span class="keyword">new</span> <span class="type">View</span>.<span class="type">OnClickListener</span>() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            public void onClick(<span class="type">View</span> v) &#123;</span><br><span class="line">                startActivity(<span class="keyword">new</span> <span class="type">Intent</span>(<span class="type">MainActivity</span>.<span class="keyword">this</span>, <span class="type">MainActivity</span>.<span class="keyword">class</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        findViewById(<span class="type">R</span>.id.btnStartBty).setOnClickListener(<span class="keyword">new</span> <span class="type">View</span>.<span class="type">OnClickListener</span>() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            public void onClick(<span class="type">View</span> v) &#123;</span><br><span class="line">                startActivity(<span class="keyword">new</span> <span class="type">Intent</span>(<span class="type">MainActivity</span>.<span class="keyword">this</span>, <span class="type">BAty</span>.<span class="keyword">class</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>BAty.java<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BAty</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Activity</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">TextView</span> tv;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(<span class="type">R</span>.layout.activity_baty);</span><br><span class="line"></span><br><span class="line">        tv= (<span class="type">TextView</span>) findViewById(<span class="type">R</span>.id.tv);</span><br><span class="line">        tv.setText(<span class="type">String</span>.format(<span class="string">"TaskID:%d\n,Current activity id:%s"</span>, getTaskId(), toString()));</span><br><span class="line"></span><br><span class="line">        findViewById(<span class="type">R</span>.id.btnStartMain).setOnClickListener(<span class="keyword">new</span> <span class="type">View</span>.<span class="type">OnClickListener</span>() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            public void onClick(<span class="type">View</span> v) &#123;</span><br><span class="line">                startActivity(<span class="keyword">new</span> <span class="type">Intent</span>(<span class="type">BAty</span>.<span class="keyword">this</span>, <span class="type">MainActivity</span>.<span class="keyword">class</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        findViewById(<span class="type">R</span>.id.btnStartBty).setOnClickListener(<span class="keyword">new</span> <span class="type">View</span>.<span class="type">OnClickListener</span>() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            public void onClick(<span class="type">View</span> v) &#123;</span><br><span class="line">                startActivity(<span class="keyword">new</span> <span class="type">Intent</span>(<span class="type">BAty</span>.<span class="keyword">this</span>, <span class="type">BAty</span>.<span class="keyword">class</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>效果如下<br><img src="/img/android/21.png" alt="image"><br>在主界面（main界面）点击跳转到自己, taskid不变，实例ID不变<br>在主界面（main界面）点击跳转到Bty, taskid不变，实例ID改变<br>在Bty界面点击跳转到main界面，taskid不变，实例ID改变，而且与前次的实例ID不一样<br>在Bty界面点击跳转到自己界面，taskid不变，实例ID改变<br>点击后退可以一直退</p>
<p>(3)SingleTask 与 SingleInstance 模式<br>将androidmainfest.xml设置为singletask<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">android:</span>launchMode=<span class="string">"singleTask"</span> &gt;</span><br></pre></td></tr></table></figure></p>
<p>其他与2.4.2相同，运行如下<br>在主界面（main界面）点击跳转到自己, taskid不变，实例ID不变<br>在主界面（main界面）点击跳转到Bty, taskid不变，实例ID改变<br>在Bty界面点击跳转到main界面，taskid不变，实例ID改变，而且与前次的实例ID一样<br>在Bty界面点击跳转到自己界面，taskid不变，实例ID改变<br>点击后退退到main界面，在main界面点击后退直接退出<br>Main activity永远只有一个</p>
<p>将androidmainfest.xml设置为SingleInstance时main与Bty不是同一个栈<br>在主界面（main界面）点击跳转到自己, taskid不变，实例ID不变<br>在主界面（main界面）点击跳转到Bty, taskid改变，实例ID改变<br>在Bty界面点击跳转到main界面，taskid改变，实例ID改变，而且与前次的实例ID一样taskid也是相同<br>在Bty界面点击跳转到自己界面，taskid不变，实例ID改变<br>在一个界面点击后退后退到的界面如果是栈顶，再点击后退这个栈退出，如果有退到另外一个栈，则显示另外一个栈，点击后退如果是这个栈的栈顶则直接退出！</p>
<h2 id="5-_u5728_Android__u4E2D_Intent__u7684_u6982_u5FF5_u53CA_u5E94_u7528"><a href="#5-_u5728_Android__u4E2D_Intent__u7684_u6982_u5FF5_u53CA_u5E94_u7528" class="headerlink" title="5.在 Android 中 Intent 的概念及应用"></a>5.在 Android 中 Intent 的概念及应用</h2><p>核心内容：隐式 Intent;显式 Intent<br>(1)显式Intent<br>分别新建一个类和一个activity,并将他们绑定，需要在androidmainfest.xml注册才能用！最后进行intent配置。<br>Activity_main.xml<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;RelativeLayout <span class="string">xmlns:</span>android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line"><span class="label">    xmlns:</span>tools=<span class="string">"http://schemas.android.com/tools"</span> <span class="string">android:</span>layout_width=<span class="string">"match_parent"</span></span><br><span class="line"><span class="label">    android:</span>layout_height=<span class="string">"match_parent"</span> <span class="string">android:</span>paddingLeft=<span class="string">"@dimen/activity_horizontal_margin"</span></span><br><span class="line"><span class="label">    android:</span>paddingRight=<span class="string">"@dimen/activity_horizontal_margin"</span></span><br><span class="line"><span class="label">    android:</span>paddingTop=<span class="string">"@dimen/activity_vertical_margin"</span></span><br><span class="line"><span class="label">    android:</span>paddingBottom=<span class="string">"@dimen/activity_vertical_margin"</span> <span class="string">tools:</span>context=<span class="string">".MainActivity"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView <span class="string">android:</span>text=<span class="string">"@string/hello_world"</span> <span class="string">android:</span>layout_width=<span class="string">"wrap_content"</span></span><br><span class="line"><span class="label">        android:</span>layout_height=<span class="string">"wrap_content"</span></span><br><span class="line"><span class="label">        android:</span>id=<span class="string">"@+id/textView2"</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line"><span class="label">        android:</span>layout_width=<span class="string">"wrap_content"</span></span><br><span class="line"><span class="label">        android:</span>layout_height=<span class="string">"wrap_content"</span></span><br><span class="line"><span class="label">        android:</span>text=<span class="string">"startMyAty"</span></span><br><span class="line"><span class="label">        android:</span>id=<span class="string">"@+id/btnStartMyAty"</span></span><br><span class="line"><span class="label">        android:</span>layout_below=<span class="string">"@+id/textView2"</span></span><br><span class="line"><span class="label">        android:</span>layout_toEndOf=<span class="string">"@+id/textView2"</span></span><br><span class="line"><span class="label">        android:</span>layout_marginTop=<span class="string">"81dp"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure></p>
<p>MyAty.java<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Activity</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        findViewById(<span class="type">R</span>.id.btnStartMyAty).setOnClickListener(<span class="keyword">new</span> <span class="type">View</span>.<span class="type">OnClickListener</span>() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            public void onClick(<span class="type">View</span> v) &#123;</span><br><span class="line">                startActivity(<span class="keyword">new</span> <span class="type">Intent</span>(<span class="type">MainActivity</span>.<span class="keyword">this</span>,<span class="type">MyAty</span>.<span class="keyword">class</span>));<span class="comment">//这是一个显示的Intent,因为显示的写出了被启动的MyAty.class</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>myAty.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span> <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"New Text"</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/textView"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">Button</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"New Button"</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/button"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>MyAty.java<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.<span class="type">Activity</span>;</span><br><span class="line"><span class="keyword">import</span> android.os.<span class="type">Bundle</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by zhang on 2016/1/11.</span><br><span class="line"> */</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyAty</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Activity</span> &#123;</span></span><br><span class="line">    <span class="comment">//重写oncreate函数</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(<span class="type">R</span>.layout.myaty);<span class="comment">//将这个activity与视图myaty绑定</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>androidmainfest.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">manifest</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">package</span>=<span class="value">"com.example.zhang.learnintent"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">application</span></span><br><span class="line">        <span class="attribute">android:allowBackup</span>=<span class="value">"true"</span></span><br><span class="line">        <span class="attribute">android:icon</span>=<span class="value">"@mipmap/ic_launcher"</span></span><br><span class="line">        <span class="attribute">android:label</span>=<span class="value">"@string/app_name"</span></span><br><span class="line">        <span class="attribute">android:theme</span>=<span class="value">"@style/AppTheme"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">activity</span></span><br><span class="line">            <span class="attribute">android:name</span>=<span class="value">".MainActivity"</span></span><br><span class="line">            <span class="attribute">android:label</span>=<span class="value">"@string/app_name"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 注册MyAty,前面加一点是因为程序运行时会加直接在package="com.example.zhang.learnintent"后面 也可以com.example.zhang.learnintent.MyAty --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">activity</span> <span class="attribute">android:name</span>=<span class="value">".MyAty"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;activity android:name="com.example.zhang.learnintent.MyAty"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>运行效果：点击按钮跳转到另外一个界面</p>
<p>(2)隐式 Intent<br>androidmainfest.xml中指定category，category为DEFAULT时，其行为方式为activity<br>action可以是任意的字符串，启动的时候根据字符串启动就可以啦，在main.java中用这个字符串（不能有中文）就可以<br>改动androidmainfest.xml和main.java，其他不变<br>androidmainfest.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span> <span class="attribute">android:name</span>=<span class="value">".MyAty"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.DEFAULT"</span>/&gt;</span><span class="comment">&lt;!-- android.intent.category.DEFAULT此处不能全部用大写 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"acdsndslvdjsldvms.a"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>main.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    startActivity(<span class="keyword">new</span> Intent(<span class="string">"acdsndslvdjsldvms.a"</span>));<span class="comment">//这是一个显示的Intent,因为显示的写出了被启动的MyAty.class</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行效果与上面的一样<br>但是上面用随意的字符串可读性太差，可以用约定成俗的格式com.zhang.LearnIntent.intent.action.MyAty,一看就知道启动哪个activity<br>这太长，还是很难记，一般在被启动的activity（MyAty.java）中添加常量</p>
<p>androidmainfest.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span> <span class="attribute">android:name</span>=<span class="value">".MyAty"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.DEFAULT"</span>/&gt;</span><span class="comment">&lt;!-- android.intent.category.DEFAULT此处不能全部用大写 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"com.zhang.LearnIntent.intent.action.MyAty"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>MyAty.java<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyAty</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Activity</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    public static <span class="keyword">final</span> <span class="type">String</span> <span class="type">ACTION</span> = <span class="string">"com.zhang.LearnIntent.intent.action.MyAty"</span>;</span><br><span class="line">    <span class="comment">//重写oncreate函数</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(<span class="type">R</span>.layout.myaty);<span class="comment">//将这个activity与视图myaty绑定</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>main.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    startActivity(<span class="keyword">new</span> Intent(MyAty.ACTION));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行效果与上面的一样</p>
<p>不同应用间通过ACTION启动<br>再创建一个新的项目App1用new Module—在同一个界面显示<br>App1中：<br>Main.xml<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"Start MyAty from App1"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnStartMyAty"</span></span><br><span class="line">    android:layout_below=<span class="string">"@+id/textView"</span></span><br><span class="line">    android:layout_alignParentStart=<span class="string">"true"</span></span><br><span class="line">    android:layout_marginTop=<span class="string">"52dp"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>Main.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    findViewById(R.id.btnStartMyAty).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            startActivity(<span class="keyword">new</span> Intent(<span class="string">"com.zhang.LearnIntent.intent.action.MyAty"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过软件App1可以启动跳转到LearnIntent的界面MyAty<br>如果不允许其他应用访问我应用的activity,只允许自己访问，该怎么配置呢？<br>只需要将该应用的activity的androidmainfest.xml进行如下配置，则其他应用不能访问这个activity<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity <span class="string">android:</span>name=<span class="string">".MyAty"</span> <span class="string">android:</span>exported=<span class="string">"false"</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>？？？但是不知道为啥，我的加了这个语句还是可以访问！</p>
<p>(3)Intent 过滤器相关选项<br>多个activity的intent一样会出现什么情况呢？<br>没有去掉MyAty的android:exported=”false”时，会直接显示MyAty1<br>去掉后会如下，让你自己选择<br><img src="/img/android/22.png" alt="image"><br>可以选择just once或者always<br>选择always后下次将默认启动这项，取消需要在设置里面弄<br>将软件LearnIntent拉到info里面，点击CLEAR DEFAULTS将默认设置都清掉，则可以重新选择（我的模拟器不行（清后还是默认的）—应该是安卓版本太低）<br><img src="/img/android/23.png" alt="image"><br>过滤器里面还有一个属性data<br>在MyAty1下加入data项如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span></span><br><span class="line">    <span class="attribute">android:name</span>=<span class="value">".MyAty1"</span></span><br><span class="line">    <span class="attribute">android:label</span>=<span class="value">"@string/title_activity_my_aty1"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"com.zhang.LearnIntent.intent.action.MyAty"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">data</span> <span class="attribute">android:scheme</span>=<span class="value">"app"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在APP1中如何找到指定的activity呢？<br>两个activity：MyAty是通过默认配置，而MyAty1是通过添加schme(指明的协议是”app”)<br>Data属性下还有很多常用的属性，自己下来看<br>App1-main.java中<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    startActivity(<span class="keyword">new</span> Intent(<span class="string">"com.zhang.LearnIntent.intent.action.MyAty"</span>, Uri.parse(<span class="string">"app://hello"</span>)));<span class="comment">// app://后面参数任意，不一定是hello</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如此，启动App1后点击按钮直接到MyAty1</p>
<p>(4) 通过浏览器链接启动本地 Activity<br>先建一个activity,再到再mainfest.xml下配置activity<br>Localaty.xml<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView <span class="string">android:</span>text=<span class="string">"这是浏览器链接的本地的activity"</span> <span class="string">android:</span>layout_width=<span class="string">"wrap_content"</span></span><br><span class="line"><span class="label">    android:</span>layout_height=<span class="string">"wrap_content"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>mainfest.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span></span><br><span class="line">    <span class="attribute">android:name</span>=<span class="value">".LocalAty"</span></span><br><span class="line">    <span class="attribute">android:label</span>=<span class="value">"@string/title_activity_local_aty"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.BROWSABLE"</span>/&gt;</span>  <span class="comment">&lt;!-- 可以被浏览器启动配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.VIEW"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">data</span> <span class="attribute">android:scheme</span>=<span class="value">"app"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>配置完成后，写一个浏览器的页面——用软件WebStorm开发，当然也可以用任何html编辑软件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>App<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 调整文字的大小 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line">        <span class="tag">a</span><span class="rules">&#123;</span><br><span class="line">            <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">50pt</span></span></span>;</span><br><span class="line">        &#125;</span></span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"app://hello"</span>&gt;</span>Launch My APP<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>直接在电脑浏览器上无法访问到app,因为不能处理APP协议<br><img src="/img/android/24.png" alt="image"></p>
<p>在手机上打开：手机用本地地址：10.0.2.2<br>注意要加端口，地址全名：http：//10.0.2.2:63343/App/index.html<br>如下所示<br><img src="/img/android/25.png" alt="image"><br>如此实现了浏览器打开APP的activity,但是如何接收到参数呢？<br>通过（Android.net下的）Uri.可以获取信息<br><img src="/img/android/26.png" alt="image"><br>Localaty.java<br><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="component">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super<span class="string">.onCreate(savedInstanceState)</span>;</span><br><span class="line">    setContentView(R<span class="string">.layout.activity_local_aty)</span>;</span><br><span class="line"></span><br><span class="line">    Uri uri = getIntent()<span class="string">.getData()</span>;</span><br><span class="line">    System<span class="string">.out.println(uri)</span>;// System<span class="string">.out.print(uri)会由于缓存原因没有输出，所以用println</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>安装APP，打开网页点击打开activity,输出信息：<br><img src="/img/android/27.png" alt="image"></p>
<h2 id="6-Android__u4E2D_Context__u7684_u7406_u89E3_u53CA_u4F7F_u7528"><a href="#6-Android__u4E2D_Context__u7684_u7406_u89E3_u53CA_u4F7F_u7528" class="headerlink" title="6.Android 中 Context 的理解及使用"></a>6.Android 中 Context 的理解及使用</h2><p>Context 是 Android 中一个非常重要的概念，用于访问全局信息，几乎所有的基础组件都继承自 Context，理解 Context 对于学习 Android 四大基本组件非常有帮助。<br>核心内容：理解 Context;理解 Application<br>(1) Context 的作用<br>Context:用于访问全局信息（如用于程序的资源：图片，字符串）的接口，如activity也是继承自Context<br>那么如何通过context进行资源的访问呢？<br><img src="/img/android/28.png" alt="image"><br>TextView里面最少要有一个context.而activity继承自context,所以可以用activity<br>Main.java<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Activity</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">TextView</span> tv;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"><span class="comment">//        setContentView(R.layout.activity_main);</span></span><br><span class="line">        tv = <span class="keyword">new</span> <span class="type">TextView</span>(<span class="type">MainActivity</span>.<span class="keyword">this</span>);<span class="comment">//不是内部类，MainActivity.this可以直接用this</span></span><br><span class="line">        tv.setText(<span class="string">"hello android"</span>);</span><br><span class="line">        setContentView(tv);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>运行输出字符串hello android<br>可以获取任意的字符串资源如<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tv.setText(R.<span class="keyword">string</span>.app_name);//app_name在<span class="keyword">string</span>.xml中，为LearnContext</span><br></pre></td></tr></table></figure></p>
<p>图片资源<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ImageView iv = new ImageView(this)<span class="comment">;</span></span><br><span class="line">iv.setImageResource(R.mipmap.ic_launcher)<span class="comment">;</span></span><br><span class="line">setContentView(iv)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>运行如下：<br><img src="/img/android/29.png" alt="image"></p>
<p>(2)Application 的用途<br>信息共享<br>创建一个类APP继承自Application<br>之后打开androidmainfest.xml配置<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="type">application</span></span><br><span class="line">    android:<span class="property">name</span>=<span class="string">".App"</span></span><br></pre></td></tr></table></figure></p>
<p>如此则自定义了一个安卓的Application, Application才是一个真正的全局上下文对象<br>在main.java中通过getApplicationContext()就可以获取到Application的全局的对象<br>下面实现一个全局共享的数据<br>App.java中写一个字符串，在为他写一个set,get方法，代码如下<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.<span class="type">Application</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by zhang on 2016/1/12.</span><br><span class="line"> */</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Application</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> textdata = <span class="string">"default"</span>;</span><br><span class="line"></span><br><span class="line">    public <span class="type">String</span> getTextdata() &#123;</span><br><span class="line">        <span class="keyword">return</span> textdata;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTextdata(<span class="type">String</span> textdata) &#123;</span><br><span class="line">        <span class="keyword">this</span>.textdata = textdata;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>新建一个main2.java继承自activity<br>重写oncreate函数<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.<span class="type">Activity</span>;</span><br><span class="line"><span class="keyword">import</span> android.os.<span class="type">Bundle</span>;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by zhang on 2016/1/12.</span><br><span class="line"> */</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Main2</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Activity</span> &#123;</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>打开androidmainfest.xml添加上这个activity<br>复制mainactivity的配置让这个activity也是默认启动(category.LAUNCHER)<br>Label一个设置main1,一个main2<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span></span><br><span class="line">    <span class="attribute">android:name</span>=<span class="value">".MainActivity"</span></span><br><span class="line">    <span class="attribute">android:label</span>=<span class="value">"Main1"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">activity</span> <span class="attribute">android:name</span>=<span class="value">".Main2"</span> <span class="attribute">android:label</span>=<span class="value">"Main2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>安装后发现有两个软件，一个main1启动的是main1，另一个main2启动的是main2<br>下面让他们实现数据共享<br>新建linearlayout,如下main1,main2，删掉原来的mainactivity.xml<br><img src="/img/android/30.png" alt="image"><br>两个activity分别绑定两个视图<br>Mainactivity.java<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">setContentView</span>(<span class="tag">R</span><span class="class">.layout</span><span class="class">.main1</span>);</span><br></pre></td></tr></table></figure></p>
<p>main2.java<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">setContentView</span>(<span class="tag">R</span><span class="class">.layout</span><span class="class">.main2</span>);</span><br></pre></td></tr></table></figure></p>
<p>main1.activity中放入输出输入文本框和按钮，main2.activity与main1相同<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"New Text"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/textView"</span></span><br><span class="line">    android:layout_weight=<span class="string">"0.03"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;EditText</span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/editText"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"保存"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnSave"</span></span><br><span class="line">    android:layout_weight=<span class="string">"0.03"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>保存和读取Application数据中的信息<br>Mainactivity.java与main2.java一样<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Main2</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Activity</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">TextView</span> textView;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">EditText</span> editText;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(<span class="type">R</span>.layout.main2);</span><br><span class="line">        textView = (<span class="type">TextView</span>) findViewById(<span class="type">R</span>.id.textView);</span><br><span class="line">        editText = (<span class="type">EditText</span>) findViewById(<span class="type">R</span>.id.editText);</span><br><span class="line">        textView.setText(<span class="string">"共享的数据是："</span> + getApp().getTextdata());</span><br><span class="line"></span><br><span class="line">        findViewById(<span class="type">R</span>.id.btnSave).setOnClickListener(<span class="keyword">new</span> <span class="type">View</span>.<span class="type">OnClickListener</span>() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            public void onClick(<span class="type">View</span> v) &#123;</span><br><span class="line">                ((<span class="type">App</span>) getApplicationContext()).setTextdata(editText.getText().toString());</span><br><span class="line">                textView.setText(<span class="string">"共享的数据是："</span> + editText.getText().toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">App</span> getApp() &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">App</span>) getApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>main1运行：点击输入保存看到共享的数据<br><img src="/img/android/31.png" alt="image"><br>退出main1打开main2如下：成功读取数据，同样，在main2中改的在main1中可以收到<br><img src="/img/android/32.png" alt="image"></p>
<p>(3) Application 生命周期<br>App.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String textdata = <span class="string">"default"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTextdata</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> textdata;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextdata</span><span class="params">(String textdata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.textdata = textdata;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span><span class="comment">//创建</span></span><br><span class="line">    <span class="comment">//比被启动的activity的oncreate先执行--方便做一些初始化操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        System.out.println(<span class="string">"App oncreate()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span><span class="comment">//结束----一般情况不执行，只是模拟情况下执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTerminate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onTerminate();</span><br><span class="line">        System.out.println(<span class="string">"App onTerminate()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span><span class="comment">//低内存时执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLowMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onLowMemory();</span><br><span class="line">        System.out.println(<span class="string">"App onlowmemory()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span><span class="comment">//程序进行内存清理时执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTrimMemory</span><span class="params">(<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onTrimMemory(level);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span><span class="comment">//配置改变时执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onConfigurationChanged(newConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>mainactivity.java<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"mainactivity oncreate()"</span>);</span><br></pre></td></tr></table></figure></p>
<p>Main2.java<br><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"main2 oncreate()"</span>);</span><br></pre></td></tr></table></figure></p>
<p>运行：不管启动哪个activity，app.java的oncreate函数先会执行<br><img src="/img/android/33.png" alt="image"><br>关闭main1后（不然好像不会再次启动app.java的oncreate函数）启动main2<br><img src="/img/android/34.png" alt="image"></p>
<h2 id="7-_u8BA4_u8BC6_Android_Service"><a href="#7-_u8BA4_u8BC6_Android_Service" class="headerlink" title="7.认识 Android Service"></a>7.认识 Android Service</h2><p>课程背景：Service 是 Android 四大基本组件之一，是无界面的应用程序，可以长期在后台运行，在实际工作中非常重要，比如接收推送消息、在锁屏状态下侦听传感器信息。<br>核心内容：启动Service;绑定Service</p>
<p>(1) 使用 Service<br>新建一个项目learnservice<br>Java包下new-&gt;server-&gt;server 产生myserver.java<br>Exported:是否导出（向外界公开）   enabled：是否启用<br>如何启用呢？<br>myserver.java没动<br>Main.xml加入按钮<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"启动服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnStartService"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"停止服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnEndService"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>Main.java<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Activity</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Intent</span> intent;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        intent = <span class="keyword">new</span> <span class="type">Intent</span>(<span class="type">MainActivity</span>.<span class="keyword">this</span>,<span class="type">MyService</span>.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line">        findViewById(<span class="type">R</span>.id.btnStartService).setOnClickListener(<span class="keyword">new</span> <span class="type">View</span>.<span class="type">OnClickListener</span>() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            public void onClick(<span class="type">View</span> v) &#123;</span><br><span class="line">               <span class="comment">// startService(new Intent(MainActivity.this, MyService.class));//启动服务</span></span><br><span class="line">                startService(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        findViewById(<span class="type">R</span>.id.btnEndService).setOnClickListener(<span class="keyword">new</span> <span class="type">View</span>.<span class="type">OnClickListener</span>() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            public void onClick(<span class="type">View</span> v) &#123;</span><br><span class="line">               <span class="comment">// stopService(new Intent(MainActivity.this,MyService.class));//服务的操作在一个实例中只有一个，停止的是上面启动的</span></span><br><span class="line">                stopService(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>启动运行：<br>运行先不操作，按中间键进入桌面，查看setting-&gt;APPS（应用）-&gt;running(所有正在运行的程序) 能够看到正在运行的服务<br>点击按钮开始，再到上面地方看，发现多了一个这个项目的service（一个进程，一个服务）<br>点击停止服务，发现服务没有了</p>
<p>写一个实例：让他不断的在后台输出语句<br>Myservice.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="comment">//外界执行startservice后会执行这个函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个线程，让他不断输出语句</span></span><br><span class="line">    <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.run();</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"服务正在运行..."</span>);</span><br><span class="line">                <span class="comment">//休眠1S</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.start();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onStartCommand</span><span class="params">(intent, flags, startId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行点击启动服务<br>每隔1s后台不断输出 服务正在运行…<br>按左边个键退出程序服务仍然执行</p>
<p>(2) 绑定 Service<br>Main.xml<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"启动服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnStartService"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"停止服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnEndService"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"绑定服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnBindService"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"解除绑定服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnUnbindService"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>Main.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// implements View.OnClickListener------实现接口后可以把</span></span><br><span class="line"><span class="comment">//findViewById(R.id.btnStartService).setOnClickListener(new View.OnClickListener() &#123;</span></span><br><span class="line"><span class="comment">//@Override</span></span><br><span class="line"><span class="comment">//public void onClick(View v) &#123;</span></span><br><span class="line"><span class="comment">//        // startService(new Intent(MainActivity.this, MyService.class));//启动服务</span></span><br><span class="line"><span class="comment">//        startService(intent);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"><span class="comment">//改为 findViewById(R.id.btnBindService).setOnClickListener(this);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span>, <span class="title">ServiceConnection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Intent intent;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,MyService.class);</span><br><span class="line">        findViewById(R.id.btnStartService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnEndService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnBindService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnUnbindService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnStartService:</span><br><span class="line">                startService(intent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnEndService:</span><br><span class="line">                stopService(intent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnBindService:</span><br><span class="line">                bindService(intent,<span class="keyword">this</span>, Context.BIND_AUTO_CREATE);<span class="comment">//bindService(intent；服务连接:听服务状态。让this实现监听service，同时实现下面两个函数；常量);</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnUnbindService:</span><br><span class="line">                unbindService(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="comment">//标识服务连接成功</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Service connected!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>Myservice.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Return the communication channel to the service.</span></span><br><span class="line">       <span class="comment">// throw new UnsupportedOperationException("Not yet implemented");</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Binder();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="comment">//外界执行startservice后会执行这个函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个线程，让他不断输出语句</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.run();</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"服务正在运行..."</span>);</span><br><span class="line">                    <span class="comment">//休眠1S</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onStartCommand</span><span class="params">(intent, flags, startId)</span></span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>运行<br>点击绑定服务：输出Service connected!<br>点击解除绑定则解除绑定<br>注意：点击如下打印机上面那个按钮，System.out.println()才在后台显示输出<br><img src="/img/android/35.png" alt="image"></p>
<p>(3) Service生命周期<br>public int onStartCommand(Intent intent, int flags, int startId)<br>public void onCreate()<br>public void onDestroy()<br>myservice.java如下：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Return the communication channel to the service.</span></span><br><span class="line">       <span class="comment">// throw new UnsupportedOperationException("Not yet implemented");</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Binder();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="comment">//外界执行startservice后会执行这个函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个线程，让他不断输出语句</span></span><br><span class="line"><span class="comment">//        new Thread()&#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void run() &#123;</span></span><br><span class="line"><span class="comment">//                super.run();</span></span><br><span class="line"><span class="comment">//                while(true) &#123;</span></span><br><span class="line"><span class="comment">//                    System.out.println("服务正在运行...");</span></span><br><span class="line"><span class="comment">//                    //休眠1S</span></span><br><span class="line"><span class="comment">//                    try &#123;</span></span><br><span class="line"><span class="comment">//                        sleep(1000);</span></span><br><span class="line"><span class="comment">//                    &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                        e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;.start();</span></span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onStartCommand</span><span class="params">(intent, flags, startId)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        System.out.println(<span class="string">"service oncreate"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        System.out.println(<span class="string">"service ondestroy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行：<br><img src="/img/android/36.png" alt="image"><br>点击启动服务 输出service oncreate<br>点击停止服务 输出service ondestroy<br>再点击绑定服务 输出service oncreate   Service connected!<br>点击解除绑定服务 输出service ondestroy<br>同时点击启动绑定服务后，单独点击解除绑定服务或者停止服务没有反应，必须点击解除绑定和停止两个服务才会退出<br>点击启动服务，点击手机左键退出程序，服务仍然运行<br>点击停止服务才退出<br>点击绑定服务，点击手机左键退出程序，抛出一个异常后服务退出（说明绑定在程序退出后解除绑定）</p>
<p>Myservice修改如下：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个线程，让他不断输出语句</span></span><br><span class="line"><span class="comment">//        new Thread()&#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void run() &#123;</span></span><br><span class="line"><span class="comment">//                super.run();</span></span><br><span class="line"><span class="comment">//                while(true) &#123;</span></span><br><span class="line"><span class="comment">//                    System.out.println("服务正在运行...");</span></span><br><span class="line"><span class="comment">//                    //休眠1S</span></span><br><span class="line"><span class="comment">//                    try &#123;</span></span><br><span class="line"><span class="comment">//                        sleep(1000);</span></span><br><span class="line"><span class="comment">//                    &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                        e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;.start();</span></span><br><span class="line">        System.out.println(<span class="string">"service onStartCommand"</span>);</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onStartCommand</span><span class="params">(intent, flags, startId)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        System.out.println(<span class="string">"service oncreate"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        System.out.println(<span class="string">"service ondestroy"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>运行：<br>启动服务：service oncreate，service onStartCommand。<br>一直点击启动服务，此时oncreate不在执行<br>重复执行启动服务一直输出：service onStartCommand</p>
<p>修改myservice：<br>控制服务的开始于停止<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> serviceRunning = <span class="keyword">false</span>;<span class="comment">//标识</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Return the communication channel to the service.</span></span><br><span class="line">       <span class="comment">// throw new UnsupportedOperationException("Not yet implemented");</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Binder();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="comment">//外界执行startservice后会执行这个函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"service onStartCommand"</span>);</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onStartCommand</span><span class="params">(intent, flags, startId)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        System.out.println(<span class="string">"service oncreate"</span>);</span><br><span class="line">        serviceRunning=<span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//创建一个线程，让他不断输出语句</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.run();</span><br><span class="line">                <span class="keyword">while</span>(serviceRunning) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"服务正在运行..."</span>);</span><br><span class="line">                    <span class="comment">//休眠1S</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        System.out.println(<span class="string">"service ondestroy"</span>);</span><br><span class="line">        serviceRunning=<span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行：<br>启动服务：<br>service oncreate<br>service onStartCommand<br>服务正在运行…<br>服务正在运行…<br>服务正在运行…<br>服务正在运行…</p>
<p>停止服务：<br>service ondestroy</p>
<p>绑定服务：<br>service oncreate<br>服务正在运行…<br>Service connected!<br>服务正在运行…<br>服务正在运行…<br>服务正在运行…<br>服务正在运行…</p>
<p>解除绑定服务：<br>service ondestroy</p>
<h2 id="8-Android__u4E2D_Service__u901A_u4FE1"><a href="#8-Android__u4E2D_Service__u901A_u4FE1" class="headerlink" title="8.Android 中 Service 通信"></a>8.Android 中 Service 通信</h2><p>核心内容：绑定Service并与之通信<br>(1) 启动 Service 并传递数据<br>外界与一个服务实现数据传递<br>Main.xml<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span> android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">   android:orientation=<span class="string">"vertical"</span></span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span> android:paddingLeft=<span class="string">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    android:paddingRight=<span class="string">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    android:paddingTop=<span class="string">"@dimen/activity_vertical_margin"</span></span><br><span class="line">    android:paddingBottom=<span class="string">"@dimen/activity_vertical_margin"</span> tools:context=<span class="string">".MainActivity"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;EditText</span><br><span class="line">        android:layout_width=<span class="string">"fill_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">        android:<span class="type">text</span>=<span class="string">"默认信息"</span></span><br><span class="line">        android:<span class="property">id</span>=<span class="string">"@+id/etData"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">        android:<span class="type">text</span>=<span class="string">"启动服务"</span></span><br><span class="line">        android:<span class="property">id</span>=<span class="string">"@+id/btnStartService"</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">        android:<span class="type">text</span>=<span class="string">"停止服务"</span></span><br><span class="line">        android:<span class="property">id</span>=<span class="string">"@+id/btnStopService"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p>
<p>Main.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EditText editText;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        editText= (EditText) findViewById(R.id.etData);</span><br><span class="line">        findViewById(R.id.btnStartService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnStopService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></span><br><span class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Handle action bar item clicks here. The action bar will</span></span><br><span class="line">        <span class="comment">// automatically handle clicks on the Home/Up button, so long</span></span><br><span class="line">        <span class="comment">// as you specify a parent activity in AndroidManifest.xml.</span></span><br><span class="line">        <span class="keyword">int</span> id = item.getItemId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//noinspection SimplifiableIfStatement</span></span><br><span class="line">        <span class="keyword">if</span> (id == R.id.action_settings) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onOptionsItemSelected</span><span class="params">(item)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnStartService:</span><br><span class="line">                Intent i=<span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyService.class);</span><br><span class="line">                i.putExtra(<span class="string">"data"</span>,editText.getText().toString());<span class="comment">//直接把data放到intent传递给service-----service中onstartcommand中第一个参数就是接收的intent</span></span><br><span class="line">                startService(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnStopService:</span><br><span class="line">                stopService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyService.class));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Service.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> running=<span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> String data=<span class="string">"这是默认信息"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Return the communication channel to the service.</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Not yet implemented"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        data=intent.getStringExtra(<span class="string">"data"</span>);</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onStartCommand</span><span class="params">(intent, flags, startId)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        running=<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.run();</span><br><span class="line">                <span class="keyword">while</span> (running)&#123;</span><br><span class="line">                    System.out.println(data);<span class="comment">/////////////</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        running=<span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行：<br>点击启动服务输出：默认信息<br>改变输入框内信息再点击启动服务：后台输出信息发生变化，和输入框内一样<br>停止服务：输出停止</p>
<p>(2) 绑定 Service 进行通信（上）<br>本课时讲解如何与被绑定的 Service 进行通信<br>Main.xml<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;EditText</span><br><span class="line">    android:layout_width=<span class="string">"fill_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"默认信息"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/etData"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"启动服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnStartService"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"停止服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnStopService"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"绑定服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnBindservice"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"解除绑定服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnUnbindservice"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"同步数据"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnSyncData"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>Main.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span>, <span class="title">ServiceConnection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EditText editText;</span><br><span class="line">    <span class="keyword">private</span> MyService.Binder binder = <span class="keyword">null</span>;<span class="comment">//定义一个Binder对象</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        editText= (EditText) findViewById(R.id.etData);</span><br><span class="line">        findViewById(R.id.btnStartService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnStopService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnBindservice).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnUnbindservice).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnSyncData).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></span><br><span class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Handle action bar item clicks here. The action bar will</span></span><br><span class="line">        <span class="comment">// automatically handle clicks on the Home/Up button, so long</span></span><br><span class="line">        <span class="comment">// as you specify a parent activity in AndroidManifest.xml.</span></span><br><span class="line">        <span class="keyword">int</span> id = item.getItemId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//noinspection SimplifiableIfStatement</span></span><br><span class="line">        <span class="keyword">if</span> (id == R.id.action_settings) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onOptionsItemSelected</span><span class="params">(item)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnStartService:</span><br><span class="line">                Intent i=<span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyService.class);</span><br><span class="line">                i.putExtra(<span class="string">"data"</span>,editText.getText().toString());<span class="comment">//直接把data放到intent传递给service-----service中onstartcommand中第一个参数就是接收的intent</span></span><br><span class="line">                startService(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnStopService:</span><br><span class="line">                stopService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnBindservice:</span><br><span class="line">                bindService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class),<span class="keyword">this</span>, Context.BIND_AUTO_CREATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnUnbindservice:</span><br><span class="line">                unbindService(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnSyncData:</span><br><span class="line">                <span class="keyword">if</span>(binder != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    binder.setData(editText.getText().toString());<span class="comment">//从输入框内传入数据---这种方法比直接方法调用，比Intent那种方法快得多</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="comment">//这里参数IBinder service是myservice中传来</span></span><br><span class="line">    <span class="comment">//访问到的是myservice中 public IBinder onBind(Intent intent)的的返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">        binder= (MyService.Binder) service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>myservice.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> running=<span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> String data=<span class="string">"这是默认信息"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Binder();<span class="comment">//自己建的</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个类继承来自系统的Binder</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Binder</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">Binder</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(String data)</span></span>&#123;</span><br><span class="line">            MyService.<span class="keyword">this</span>.data=data;<span class="comment">//修改data值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        data=intent.getStringExtra(<span class="string">"data"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        running=<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.run();</span><br><span class="line">                <span class="keyword">while</span> (running)&#123;</span><br><span class="line">                    System.out.println(data);<span class="comment">/////////////</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        running=<span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行程序：<br>点击绑定服务：输出：这是默认信息<br>改变输入框内容，点击同步数据：后台输出内容与输入框内容一样</p>
<p>(3) 绑定 Service 进行通信（下）<br>本课时讲解如何侦听被绑定的 Service 的内部状态<br>如服务内部发生改变后发送到界面<br>Callback回调<br>Main.xml<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">    android:layout_width=<span class="string">"fill_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/tvOut"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;EditText</span><br><span class="line">    android:layout_width=<span class="string">"fill_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"默认信息"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/etData"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"启动服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnStartService"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"停止服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnStopService"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"绑定服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnBindservice"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"解除绑定服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnUnbindservice"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"同步数据"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnSyncData"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>Main.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span>, <span class="title">ServiceConnection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView tvOut;</span><br><span class="line">    <span class="keyword">private</span> EditText editText;</span><br><span class="line">    <span class="keyword">private</span> MyService.Binder binder = <span class="keyword">null</span>;<span class="comment">//定义一个Binder对象</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        tvOut= (TextView) findViewById(R.id.tvOut);</span><br><span class="line">        editText= (EditText) findViewById(R.id.etData);</span><br><span class="line">        findViewById(R.id.btnStartService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnStopService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnBindservice).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnUnbindservice).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnSyncData).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></span><br><span class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Handle action bar item clicks here. The action bar will</span></span><br><span class="line">        <span class="comment">// automatically handle clicks on the Home/Up button, so long</span></span><br><span class="line">        <span class="comment">// as you specify a parent activity in AndroidManifest.xml.</span></span><br><span class="line">        <span class="keyword">int</span> id = item.getItemId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//noinspection SimplifiableIfStatement</span></span><br><span class="line">        <span class="keyword">if</span> (id == R.id.action_settings) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onOptionsItemSelected</span><span class="params">(item)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnStartService:</span><br><span class="line">                Intent i=<span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyService.class);</span><br><span class="line">                i.putExtra(<span class="string">"data"</span>,editText.getText().toString());<span class="comment">//直接把data放到intent传递给service-----service中onstartcommand中第一个参数就是接收的intent</span></span><br><span class="line">                startService(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnStopService:</span><br><span class="line">                stopService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnBindservice:</span><br><span class="line">                bindService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class),<span class="keyword">this</span>, Context.BIND_AUTO_CREATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnUnbindservice:</span><br><span class="line">                unbindService(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnSyncData:</span><br><span class="line">                <span class="keyword">if</span>(binder != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    binder.setData(editText.getText().toString());<span class="comment">//从输入框内传入数据---这种方法比直接方法调用，比Intent那种方法快得多</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="comment">//这里参数IBinder service是myservice中传来</span></span><br><span class="line">    <span class="comment">//访问到的是myservice中 public IBinder onBind(Intent intent)的的返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">        binder= (MyService.Binder) service;</span><br><span class="line">        <span class="comment">//访问回调函数</span></span><br><span class="line">        binder.getService().setCallback(<span class="keyword">new</span> MyService.Callback() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onDataChange</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//UI线程是不允许其他辅线程来修改UI线程的资源</span></span><br><span class="line"><span class="comment">//                tvOut.setText(data);//错误-------------因为程序是由myservice中新创建的线程来调用的，直接用一个新创建的线程来执行UI线程的资源是不能成功运行的</span></span><br><span class="line">                <span class="comment">//再下面新创建一个Handler</span></span><br><span class="line">                Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">                Bundle b=<span class="keyword">new</span> Bundle();</span><br><span class="line">                b.putString(<span class="string">"data"</span>,data);</span><br><span class="line">                <span class="comment">//通过msg附加上一个数据</span></span><br><span class="line">                msg.setData(b);</span><br><span class="line">                <span class="keyword">handler</span>.sendMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新创建一个Handler</span></span><br><span class="line">    <span class="comment">//用android.os.Handler类而不是java库中Handler类</span></span><br><span class="line">    <span class="keyword">private</span> android.os.Handler <span class="keyword">handler</span> = <span class="keyword">new</span> android.os.Handler()&#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">            <span class="comment">//获取字符串</span></span><br><span class="line">           tvOut.setText(msg.getData().getString(<span class="string">"data"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>myservice.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> running=<span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> String data=<span class="string">"这是默认信息"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Binder();<span class="comment">//自己建的</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个类继承来自系统的Binder</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Binder</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">Binder</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(String data)</span></span>&#123;</span><br><span class="line">            MyService.<span class="keyword">this</span>.data=data;<span class="comment">//修改data值</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//回调函数事件绑定</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> MyService <span class="title">getService</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> MyService.<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        data=intent.getStringExtra(<span class="string">"data"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        running=<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.run();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (running)&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                    String str=i+<span class="string">":"</span>+data;</span><br><span class="line">                    System.out.println(str);<span class="comment">/////////////</span></span><br><span class="line">                    <span class="keyword">if</span>(callback != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        callback.onDataChange(str);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        running=<span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Callback callback = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallback</span><span class="params">(Callback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.callback = callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Callback <span class="title">getCallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onDataChange</span><span class="params">(String data)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行：点击绑定服务  开始不断累加显示数字—-信息是从myservice中传来的<br><img src="/img/android/37.png" alt="image"></p>
<h2 id="9-Android__u4E2D_AIDL__u7684_u7406_u89E3_u4E0E_u4F7F_u7528"><a href="#9-Android__u4E2D_AIDL__u7684_u7406_u89E3_u4E0E_u4F7F_u7528" class="headerlink" title="9.Android 中 AIDL 的理解与使用"></a>9.Android 中 AIDL 的理解与使用</h2><p>(1) 跨应用启动 Service<br>Appservice.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">    System.out.println(<span class="string">"service started"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    System.out.println(<span class="string">"service ondestroyed"</span>);</span><br></pre></td></tr></table></figure></p>
<p>main.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    startService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>,Appservice.class));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    stopService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, Appservice.class));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行程序，后台输出service started，退出程序，后台输出service ondestroyed<br>在同一个程序中通过startService(new Intent(this,Appservice.class)); stopService(new Intent(this, Appservice.class));启动停止服务简单，那么如何通过其他程序来启动停止这个服务呢？<br>再创建一个名字为AnotherApp的module<br>备注：Android5.0以前可以使用隐式Intent（前面有讲到用他启动另外一个APP的activity）, Android5.0之后只能使用显式Intent<br>AnotherApp.main.xml<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"启动服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnStartAppService"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"停止服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnStopAppService"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>AnotherApp.main.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Intent serviceIntent;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btnStartAppService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnStopAppService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        serviceIntent=<span class="keyword">new</span> Intent();</span><br><span class="line">        <span class="comment">//如下显示Intent</span></span><br><span class="line">        <span class="comment">//通过setComponent显示指明要启动的Intent</span></span><br><span class="line"><span class="comment">//                new ComponentName(被启动的Intent所在包名，被启动的类名)</span></span><br><span class="line">        serviceIntent.setComponent(<span class="keyword">new</span> ComponentName(<span class="string">"com.example.zhang.startservicefromanotherapp"</span>,<span class="string">"com.example.zhang.startservicefromanotherapp.Appservice"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnStartAppService:</span><br><span class="line">                startService(serviceIntent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnStopAppService:</span><br><span class="line">                stopService(serviceIntent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>运行：<br>点击启动服务，在被启动项目下的后台（StartservicefromanotherAPP）（注意：不是AnotherApp）可以看到启动输出：service started</p>
<p>也可以在Appservice内部重写onStartCommand用于接收从其他的应用传过来的数据<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> onStartCommand(<span class="type">Intent</span> <span class="type">intent</span>, <span class="built_in">int</span> flags, <span class="built_in">int</span> startId)&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>(2) 跨应用绑定 Service<br>绑定时需要用到一个bundler，一个程序无法访问另外一个程序中类的定义，那么是否不能通信呢？<br>Android提供了一种机制用于多个程序之间通信：AIDL（Android Interface Definition Language/ Android接口定义语言），下面进行操作<br>创建一个AIDL文件<br>App下java包下New-&gt;AIDL-&gt;AIDL file（IAppServiceInterface），会生成一个.aidl文件，里面会自动生成对应的一个类IAppServiceInterface<br>这时候点击build-&gt;rebuild project重构一下（以便检测到刚刚生成的类），如此在service的public IBinder onBind(Intent intent)函数中可以直接返回这个类<br>Myservice.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Appservice</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Appservice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IAppServiceInterface.Stub()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean, <span class="keyword">float</span> aFloat, <span class="keyword">double</span> aDouble, String aString)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        System.out.println(<span class="string">"service started"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        System.out.println(<span class="string">"service ondestroyed"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>如何通过AnotherApp绑定这个服务呢？<br>AnotherApp.main.xml<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"启动外部服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnStartAppService"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"停止外部服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnStopAppService"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"绑定外部服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnBindAppService"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"解除绑定外部服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnUnbindAppService"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>AnotherApp.main.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span>, <span class="title">ServiceConnection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Intent serviceIntent;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btnStartAppService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnStopAppService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnBindAppService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnUnbindAppService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        serviceIntent=<span class="keyword">new</span> Intent();</span><br><span class="line">        <span class="comment">//如下显示Intent</span></span><br><span class="line">        <span class="comment">//通过setComponent显示指明要启动的Intent</span></span><br><span class="line"><span class="comment">//                new ComponentName(被启动的Intent所在包名，被启动的类名)</span></span><br><span class="line">        serviceIntent.setComponent(<span class="keyword">new</span> ComponentName(<span class="string">"com.example.zhang.startservicefromanotherapp"</span>,<span class="string">"com.example.zhang.startservicefromanotherapp.Appservice"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnStartAppService:</span><br><span class="line">                startService(serviceIntent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnStopAppService:</span><br><span class="line">                stopService(serviceIntent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnBindAppService:</span><br><span class="line">                bindService(serviceIntent, <span class="keyword">this</span>, Context.BIND_AUTO_CREATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnUnbindAppService:</span><br><span class="line">                unbindService(<span class="keyword">this</span>);<span class="comment">//注意，这里区别于上面三个，用this</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bindService(serviceIntent, this, Context.BIND_AUTO_CREATE);中this需要下面两个函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bind service"</span>);</span><br><span class="line">        System.out.println(service);<span class="comment">//看一下传入的IBinder是啥东西</span></span><br><span class="line"><span class="comment">// android.os.BinderProxy@c5151c7</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>先安装上App，再运行AnotherApp<br>点击绑定服务，App后台输出启动服务，AnotherApp后台输出Bind service android.os.BinderProxy@c5151c7</p>
<p>(3) 跨应用绑定 Service 并通信<br>修改aidl,添加接口</p>
<p>同步如何使用呢？<br>需要在另外一个APP下创建一个与原APP包含.aidl文件的相同包名和对应包下放相同的.aidl文件<br>创建过程：右键-&gt;new-&gt;Folder-&gt; AIDL Folder-&gt;finish<br>之后发现多出一个AIDL文件夹，右键-&gt;new-&gt;package(名字与原APP的.aidl文件包名同)<br>把.aidl文件复制到这个包下面就可以<br>现在两个应用有同样的.aidl文件，可以定义同样的定义</p>
<p>IAppServiceInterface.aidl<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">IAppServiceInterface</span> &#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Demonstrates some basic types that you can use as parameters</span><br><span class="line">     * and return values in AIDL.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">basicTypes</span>(<span class="params"><span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, boolean aBoolean, <span class="keyword">float</span> aFloat,</span><br><span class="line">            <span class="keyword">double</span> aDouble, String aString</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setData</span>(<span class="params">String data</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>App.appservice.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Appservice</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置一个默认数据，通过另外一个App更改</span></span><br><span class="line">    <span class="keyword">private</span> String data=<span class="string">"默认数据"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> running=<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Appservice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> IAppServiceInterface.Stub()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">basicTypes</span><span class="params">(<span class="keyword">int</span> anInt, <span class="keyword">long</span> aLong, <span class="keyword">boolean</span> aBoolean, <span class="keyword">float</span> aFloat, <span class="keyword">double</span> aDouble, String aString)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setData</span><span class="params">(String data)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            Appservice.<span class="keyword">this</span>.data=data;<span class="comment">//对数据进行修改</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        System.out.println(<span class="string">"service started"</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.run();</span><br><span class="line">                running=<span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">while</span> (running)&#123;</span><br><span class="line">                    System.out.println(data);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        System.out.println(<span class="string">"service ondestroyed"</span>);</span><br><span class="line">        running=<span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onStartCommand</span><span class="params">(intent, flags, startId)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>App.main.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    startService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>,Appservice.class));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    stopService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, Appservice.class));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Anotherapp.main.xml<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"启动外部服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnStartAppService"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"停止外部服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnStopAppService"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"绑定外部服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnBindAppService"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"解除绑定外部服务"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnUnbindAppService"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;EditText</span><br><span class="line">    android:layout_width=<span class="string">"fill_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"这是另外一个应用的数据"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/etInput"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"同步数据到绑定服务中"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnSync"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>Another.main.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span>, <span class="title">ServiceConnection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Intent serviceIntent;</span><br><span class="line">    <span class="keyword">private</span> EditText etInput;</span><br><span class="line">    <span class="keyword">private</span> IAppServiceInterface binder=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        etInput= (EditText) findViewById(R.id.etInput);</span><br><span class="line">        findViewById(R.id.btnStartAppService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnStopAppService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnBindAppService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnUnbindAppService).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnSync).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        serviceIntent=<span class="keyword">new</span> Intent();</span><br><span class="line">        <span class="comment">//如下显示Intent</span></span><br><span class="line">        <span class="comment">//通过setComponent显示指明要启动的Intent</span></span><br><span class="line"><span class="comment">//                new ComponentName(被启动的Intent所在包名，被启动的类名)</span></span><br><span class="line">        serviceIntent.setComponent(<span class="keyword">new</span> ComponentName(<span class="string">"com.example.zhang.startservicefromanotherapp"</span>,<span class="string">"com.example.zhang.startservicefromanotherapp.Appservice"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnStartAppService:</span><br><span class="line">                startService(serviceIntent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnStopAppService:</span><br><span class="line">                stopService(serviceIntent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnBindAppService:</span><br><span class="line">                bindService(serviceIntent, <span class="keyword">this</span>, Context.BIND_AUTO_CREATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnUnbindAppService:</span><br><span class="line">                unbindService(<span class="keyword">this</span>);<span class="comment">//注意，这里区别于上面三个，用this</span></span><br><span class="line">                binder=<span class="keyword">null</span>;<span class="comment">//解除绑定后要清空</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnSync:</span><br><span class="line">                <span class="keyword">if</span>(binder!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="comment">//远程通信异常</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        binder.setData(etInput.getText().toString());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bindService(serviceIntent, this, Context.BIND_AUTO_CREATE);中this需要下面两个函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bind service"</span>);</span><br><span class="line">        System.out.println(service);<span class="comment">//看一下传入的IBinder是啥东西</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        binder = (IAppServiceInterface) service;//错误 虽然两个应用中类的名字一样，但具体所在的内存地址不一样</span></span><br><span class="line">        binder=IAppServiceInterface.Stub.asInterface(service);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>安装APP后再运行AnotherApp<br>绑定外部服务，APP后台会输出“默认信息”，点击同步后与App中输入框的相同</p>
<h2 id="10-Android__u5E7F_u64AD_u63A5_u6536_u5668_BroadcastReceiver"><a href="#10-Android__u5E7F_u64AD_u63A5_u6536_u5668_BroadcastReceiver" class="headerlink" title="10.Android 广播接收器 BroadcastReceiver"></a>10.Android 广播接收器 BroadcastReceiver</h2><p>BroadcastReceiver 是Android 四大基本组件之一，用于接收广播信息，如：开屏、锁屏、短信等等，在实际工作中用途非常广泛<br>核心内容：动态注册和注销 BroadcastReceiver</p>
<p>(1) 使用 BroadcastReceiver<br>首先创建一个项目，再创建一个BroadcastReceiver：new-&gt;other-&gt; Broadcast Receiver<br>生成一个.java,可以在onReceive（）方法里面写语句<br>Receiver的子标签在fest.xml自动添加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">receiver</span></span><br><span class="line">    <span class="attribute">android:name</span>=<span class="value">".MyReceiver"</span></span><br><span class="line">    <span class="attribute">android:enabled</span>=<span class="value">"true"</span></span><br><span class="line">    <span class="attribute">android:exported</span>=<span class="value">"true"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Main.xml<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"发送消息"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnSendMsg"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>Main.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btnSendMsg).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnSendMsg:</span><br><span class="line">                sendBroadcast(<span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyReceiver.class));<span class="comment">//发送广播消息</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>MyReceiver.java<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">BroadcastReceiver</span> &#123;</span></span><br><span class="line">    public <span class="type">MyReceiver</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="comment">//这里创建了一个广播接收器，如果有其他程序朝接收器这里发送消息，就会接收到</span></span><br><span class="line">    public void onReceive(<span class="type">Context</span> context, <span class="type">Intent</span> intent) &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"接收到了一条消息"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行点击发送按钮，后台输出：接收到了一条消息<br>当然，也可以附带上数据传输<br>Main.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (v.getId())&#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.btnSendMsg:</span><br><span class="line">            Intent i=<span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyReceiver.class);</span><br><span class="line">            i.putExtra(<span class="string">"data"</span>,<span class="string">"good morning!"</span>);</span><br><span class="line">            sendBroadcast(i);<span class="comment">//发送广播消息</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>MyRciver.java<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span>(<span class="params">Context context, Intent intent</span>) </span>&#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"接收到了一条消息:"</span>+intent.getStringExtra(<span class="string">"data"</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行点击发送按钮：<br>后台输出：接收到了一条消息:good morning!</p>
<p>(2) 动态注册和注销 BroadcastReceiver<br>不用始终处于监听状态，用注册和注销 BroadcastReceiver<br>去fest.xml删除Receiver注册，这时候接收不到消息<br>下面直接通过程序来实现注册：<br>添加两个按钮控制注册于注销<br>Main.xml<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"发送消息"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnSendMsg"</span> /&gt;</span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"注册接收器"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnReg"</span> /&gt;</span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"注销接收器"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnUnreg"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>Main.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btnSendMsg).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnReg).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.btnUnreg).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyReceiver receiver=<span class="keyword">null</span>;<span class="comment">//防止多次注册</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnSendMsg:</span><br><span class="line">//                Intent i = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyReceiver.class);<span class="comment">//动态注册不能再用这种格式，用下面的</span></span><br><span class="line">                Intent i=<span class="keyword">new</span> Intent(MyReceiver.ACTION);<span class="comment">//直接传ACTION的方式发送---隐式Intent</span></span><br><span class="line">                i.putExtra(<span class="string">"data"</span>, <span class="string">"good morning!"</span>);</span><br><span class="line">                sendBroadcast(i);<span class="comment">//发送广播消息</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnReg:</span><br><span class="line">                <span class="keyword">if</span>(receiver==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    receiver=<span class="keyword">new</span> MyReceiver();</span><br><span class="line">                    <span class="comment">//registerReceiver(receiver,new IntentFilter(ACTION是一个字符串，有一个约定成俗的固定的格式，-可以在Myreceiver中定义));</span></span><br><span class="line">                    registerReceiver(receiver,<span class="keyword">new</span> IntentFilter(MyReceiver.ACTION));<span class="comment">//zhuc</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnUnreg:</span><br><span class="line">                <span class="keyword">if</span>(receiver != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    unregisterReceiver(receiver);<span class="comment">//注销</span></span><br><span class="line">                    receiver=<span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>Myreciver.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION = <span class="string">"com.example.zhang.learnbroadcastreceiver.intent.action.MyReceiver"</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyReceiver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="comment">//这里创建了一个广播接收器，如果有其他程序朝接收器这里发送消息，就会接收到</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"接收到了一条消息:"</span>+intent.getStringExtra(<span class="string">"data"</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行点击注册之后点击发送消息才有反应，点击注销后发送消息没有反应<br>刚刚上面忘记了删除fest.xml中的自动注册，运行依然正确，应该是动态注册优先级高吧</p>
<p>(3) BroadcastReceiver 的优先级<br>先给MyReceiver添加注册信息<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">receiver</span> <span class="attribute">android:name</span>=<span class="value">".MyReceiver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"com.example.zhang.learnbroadcastreceiver.intent.action.MyReceiver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>再创建一个接收器Myreceiver1<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span>(<span class="params">Context context, Intent intent</span>) </span>&#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"MyReceiver1 接收到消息："</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Fest.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">receiver</span> <span class="attribute">android:name</span>=<span class="value">".MyReceiver"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"com.example.zhang.learnbroadcastreceiver.intent.action.MyReceiver"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">receiver</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">receiver</span></span><br><span class="line">    <span class="attribute">android:name</span>=<span class="value">".MyReceiver1"</span></span><br><span class="line">    <span class="attribute">android:enabled</span>=<span class="value">"true"</span></span><br><span class="line">    <span class="attribute">android:exported</span>=<span class="value">"true"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"com.example.zhang.learnbroadcastreceiver.intent.action.MyReceiver"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>两个接收器用相同的action,理论上两个接收器都能接收到消息<br>运行：发现都接收到了消息，先注册的接收器先接收到消息<br>接收到了一条消息:good morning!<br>MyReceiver1 接收到消息：</p>
<p>也可以手动指定优先级<intent-filter android:priority="数字">数字越大优先级越高，越先接收到消息<br>如下MyReceiver1先接收到消息：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">receiver</span> <span class="attribute">android:name</span>=<span class="value">".MyReceiver"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span> <span class="attribute">android:priority</span>=<span class="value">"9"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"com.example.zhang.learnbroadcastreceiver.intent.action.MyReceiver"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">receiver</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">receiver</span></span><br><span class="line">    <span class="attribute">android:name</span>=<span class="value">".MyReceiver1"</span></span><br><span class="line">    <span class="attribute">android:enabled</span>=<span class="value">"true"</span></span><br><span class="line">    <span class="attribute">android:exported</span>=<span class="value">"true"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span> <span class="attribute">android:priority</span>=<span class="value">"10"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"com.example.zhang.learnbroadcastreceiver.intent.action.MyReceiver"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure></intent-filter></p>
<p>如何让一个优先级高的receiver防止后面的接收器接收到数据呢？<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span>(<span class="params">Context context, Intent intent</span>) </span>&#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"MyReceiver1 接收到消息："</span>);</span><br><span class="line"></span><br><span class="line">    abortBroadcast();<span class="comment">//中断广播，优先级低于这个的将不在接收到广播消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行如下：<br>01-21 03:17:45.761  19775-19775/com.example.zhang.learnbroadcastreceiver I/System.out﹕ MyReceiver1 接收到消息：<br>01-21 03:17:45.919  19775-19775/com.example.zhang.learnbroadcastreceiver E/BroadcastReceiver﹕ BroadcastReceiver trying to return result during a non-ordered broadcast……………….<br>01-21 03:17:46.035  19775-19775/com.example.zhang.learnbroadcastreceiver I/System.out﹕ MyReceiver 接收到了消息</p>
<p>为啥优先级低的也接收到了消息？<br>因为BroadcastReceiver trying to return result during a non-ordered broadcast<br>尝试中断的是一个非顺序的broadcast，直接用sendBroadcast(i);发送的广播消息是不能被中断的，需要改为下面才能被中断：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnSendMsg:</span><br><span class="line">//                Intent i = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyReceiver.class);<span class="comment">//动态注册不能再用这种格式，用下面的</span></span><br><span class="line">                Intent i=<span class="keyword">new</span> Intent(MyReceiver.ACTION);<span class="comment">//直接传ACTION的方式发送---隐式Intent</span></span><br><span class="line">                i.putExtra(<span class="string">"data"</span>, <span class="string">"good morning!"</span>);</span><br><span class="line"><span class="comment">//                sendBroadcast(i);//发送广播消息-------这个函数发送消息不能被中断</span></span><br><span class="line">                sendOrderedBroadcast(i,<span class="keyword">null</span>);<span class="comment">//第一个参数为Intent,第二个为权限--这个函数发送消息能被中断</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnReg:</span><br><span class="line">                <span class="keyword">if</span>(receiver==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    receiver=<span class="keyword">new</span> MyReceiver();</span><br><span class="line">                    <span class="comment">//registerReceiver(receiver,new IntentFilter(ACTION是一个字符串，有一个约定成俗的固定的格式，-可以在Myreceiver中定义));</span></span><br><span class="line">                    registerReceiver(receiver,<span class="keyword">new</span> IntentFilter(MyReceiver.ACTION));<span class="comment">//zhuc</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btnUnreg:</span><br><span class="line">                <span class="keyword">if</span>(receiver != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    unregisterReceiver(receiver);<span class="comment">//注销</span></span><br><span class="line">                    receiver=<span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<p>运行程序优先级低的被中断</p>
<h2 id="11-Android__u65E5_u5FD7_u7CFB_u7EDF"><a href="#11-Android__u65E5_u5FD7_u7CFB_u7EDF" class="headerlink" title="11.Android 日志系统"></a>11.Android 日志系统</h2><p>Android 日志是用来记录程序运行过程的，但是在实际开发中，由于日志信息太多导致不方便查看有效日志而影响了正常的开发调试工作，所以学会对日志进行分类查看非常重要。<br>核心内容：System.out;System.err;Android Log 类;日志分类过滤</p>
<p>(1) 使用日志 API<br>讲解在 Android 系统中如何使用日志 API 进行日志输出，内容包括 System.out、System.err、Log.v、Log.d、Log.i、Log.w、Log.e 的使用。<br>创建一个项目LearnLog<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"普通日志"</span>);<span class="comment">// System.out.println（）属于普通日志</span></span><br><span class="line">System.err.<span class="built_in">println</span>(<span class="string">"错误日志"</span>);</span><br></pre></td></tr></table></figure></p>
<p>运行输出：<br>1349-1349/com.example.zhang.learnlog I/System.out﹕ 普通日志<br>1349-1349/com.example.zhang.learnlog W/System.err﹕ 错误日志<br>I—-Info——-普通消息<br>W—-Warning——–警告信息<br>Log level:消息类型<br>Verbose:最低—–全部显示<br>Info——显示info信息以及比他高的信息<br><img src="/img/android/38.png" alt="image"><br>上面是java提供的android还提供了非常详细的日志信息Log.里面有很多信息<br>//安卓提供从高到低日志信息如下<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Log</span><span class="built_in">.</span>e(<span class="built_in">TAG</span>,<span class="string">"错误信息"</span>);<span class="comment">//error</span></span><br><span class="line"><span class="keyword">Log</span><span class="built_in">.</span>w(<span class="built_in">TAG</span>,<span class="string">"警告信息"</span>);<span class="comment">//warn</span></span><br><span class="line"><span class="keyword">Log</span><span class="built_in">.</span>i(<span class="built_in">TAG</span>,<span class="string">"普通信息"</span>);<span class="comment">//info</span></span><br><span class="line"><span class="keyword">Log</span><span class="built_in">.</span>d(<span class="built_in">TAG</span>,<span class="string">"调试信息"</span>);<span class="comment">//debug</span></span><br><span class="line"><span class="keyword">Log</span><span class="built_in">.</span>v(<span class="built_in">TAG</span>,<span class="string">"无用信息"</span>);<span class="comment">//verbose 比如：一个程序员可以输出唠叨信息---这段程序好难写啊</span></span><br></pre></td></tr></table></figure></p>
<p>(2) 日志分类<br>如何对日志进行分类呈现，便于开发调试。<br><img src="/img/android/39.png" alt="image"><br>No Filters—————-显示全部应用程序的日志信息<br>Show only selected application————只是显示当前应用的日志信息</p>
<p>Edit Filters Configuration———-编辑路径：可以自定义标签<br>如只是输出MainActivity标签的信息：<br><img src="/img/android/40.png" alt="image"><br>则显示信息都是MainActivity标签的<br>Tag-标签     Message—–内容  pid——程序进程id</p>
<p>(3) 使用 DDMS 查看日志<br>DDMS 以及独立的 DDMS 查看日志<br>DDMS———-设备监听器<br><img src="/img/android/41.png" alt="image"><br>点击可以启动一个应用<br><img src="/img/android/42.png" alt="image"><br>选择一个设备，如下面一个模拟器<br>可以看到日志信息<br><img src="/img/android/43.png" alt="image"><br>可以点击上面绿色的加号<br><img src="/img/android/44.png" alt="image"><br>DDMS可以独立于开发环境启动<br>点击E:\Android\SDK\tools\ddms.bat就可以启动<br>DDMS可以用于调试<br>如下：<br>可以模拟拨打电话、发短信到模拟手机<br>其他还有好多功能自己尝试<br><img src="/img/android/45.png" alt="image"></p>
<h2 id="11-Android__u6743_u9650_u7CFB_u7EDF"><a href="#11-Android__u6743_u9650_u7CFB_u7EDF" class="headerlink" title="11.Android 权限系统"></a>11.Android 权限系统</h2><p>在 Android 中有非常完善的权限控制机制，开发者需要懂得如何使用，普通用户需要懂得如何分辨，结合起来才能够有效的阻止 Android 平台病毒的传播。<br>核心内容：定义权限;在代码中做权限检查;为基本组件添加权限检查<br>(1) 请求权限实例<br>创建项目LearnWebview<br>Main.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//WebView-----网页</span><br><span class="line"><span class="tag">&lt;<span class="title">WebView</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:id</span>=<span class="value">"@+id/wv"</span>&gt;</span><span class="tag">&lt;/<span class="title">WebView</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Main.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> WebView wv;</span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">    wv= (WebView) findViewById(R.id.wv);</span><br><span class="line">    <span class="comment">//用wv加载一个主页</span></span><br><span class="line">    wv.loadUrl(<span class="string">"http://www.bestzhangjin.com"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行：<br>会提醒我们无法访问网页，并且有很多的错误，这是因为loadUrl(“<a href="http://www.bestzhangjin.com">http://www.bestzhangjin.com</a>“) 加载一个网页需要一个权限<br>就是互联网的访问权限<br>需要在fest.xml中进行声明<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission <span class="string">android:</span>name=<span class="string">"android.permission.INTERNET"</span><span class="regexp">/&gt;/</span>/声明访问互联网权限</span><br><span class="line"></span><br><span class="line">&lt;application</span><br></pre></td></tr></table></figure></p>
<p>这时候重新运行可以访问到主页<br><img src="/img/android/46.png" alt="image"><br>用loadUrl(“<a href="http://bestzhangjin.com&quot;)时没有www.会自动跳转到http://www.bestzhangjin.com" target="_blank" rel="external">http://bestzhangjin.com&quot;)时没有www.会自动跳转到http://www.bestzhangjin.com</a> </p>
<p>在APPInfo中可以查看到权限</p>
<p>(2) 为代码添加权限检查<br>新建一个类Hello.java<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hello</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> final String PERMISSION_SAY_HELLO=<span class="string">"com.example.zhang.learnwebview.permission.sayHello"</span>;</span><br><span class="line">    <span class="comment">//用下面的方法检测程序是否有执行权限</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sayHello</span>(<span class="params">Context context</span>)</span>&#123;<span class="comment">//利用Context才能够访问到一下全局的属性</span></span><br><span class="line">        <span class="keyword">int</span> checkResult=context.checkCallingOrSelfPermission(PERMISSION_SAY_HELLO);<span class="comment">//执行程序的代码是否拥有这个权限</span></span><br><span class="line">        <span class="keyword">if</span>(checkResult != PackageManager.PERMISSION_GRANTED)&#123;<span class="comment">//PERMISSION_GRANTED---允许，PERMISSION_DENIED--拒绝</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException(<span class="string">"执行sayhello方法需要有com.example.zhang.learnwebview.permission.sayHello权限！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"你有权限，已经执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>fest.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!---  新注册一个权限，权限的名字为com.example.zhang.learnwebview.permission.sayHello   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">permission</span> <span class="attribute">android:name</span>=<span class="value">"com.example.zhang.learnwebview.permission.sayHello"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Main.java<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello.sayHello(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></p>
<p>运行出现异常：Unfortunately,。。。。。。。。stopped<br>后台输出提示执行sayhello方法需要有com.example.zhang.learnwebview.permission.sayHello权限！</p>
<p>下面填写权限：<br>Fest.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!---  新注册一个权限，权限的名字为com.example.zhang.learnwebview.permission.sayHello   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">permission</span> <span class="attribute">android:name</span>=<span class="value">"com.example.zhang.learnwebview.permission.sayHello"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  获取权限 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"com.example.zhang.learnwebview.permission.sayHello"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>再次运行成功！输出：你有权限，已经执行</p>
<p>(3) 为基本组件添加权限检查<br>Android四大组件都可以使用相同的方式来配置权限<br>这里也activity为例<br>新建一个activity名字MyAty<br>MyAty.xml<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView <span class="string">android:</span>text=<span class="string">"这是一个被启动的activity"</span> <span class="string">android:</span>layout_width=<span class="string">"wrap_content"</span></span><br><span class="line"><span class="label">    android:</span>layout_height=<span class="string">"wrap_content"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>Fest.xml声明权限<br>注意：fest.xml中在顶部和被启动的activity中都要声明<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;permission android:<span class="property">name</span>=<span class="string">"com.example.zhang.learnwebview.permission.MYATY"</span>/&gt;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span></span><br><span class="line">    <span class="attribute">android:name</span>=<span class="value">".MyAty"</span></span><br><span class="line">    <span class="attribute">android:label</span>=<span class="value">"@string/title_activity_my_aty"</span></span><br><span class="line">    <span class="attribute">android:permission</span>=<span class="value">"com.example.zhang.learnwebview.permission.MYATY"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure>
<p>Main.xml<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"fill_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"启动MyAty"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnStartMyAty"</span>/&gt;</span><br></pre></td></tr></table></figure></p>
<p>Main.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">findViewById(R.id.btnStartMyAty).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,MyAty.class ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>可以运行，因为是在一个应用之内<br>用另外一个应用启动这个activity则不行，需要加权限<br>新建一个module<br>OtherApp.main.xml加一个按钮<br>这里采用action方法启动另外一个应用的activity<br>所以先在被启动的应用的fest.xml的activity配置下加上action<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span></span><br><span class="line">    <span class="attribute">android:name</span>=<span class="value">".MyAty"</span></span><br><span class="line">    <span class="attribute">android:label</span>=<span class="value">"@string/title_activity_my_aty"</span></span><br><span class="line">    <span class="attribute">android:permission</span>=<span class="value">"com.example.zhang.learnwebview.permission.MYATY"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"com.example.zhang.learnwebview.intent.action.MyAty"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>OtherApp.main.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">findViewById(R.id.btnStartMyAty).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过action启动其他应用的activity</span></span><br><span class="line">        startActivity(<span class="keyword">new</span> Intent(<span class="string">"com.example.zhang.learnwebview.intent.action.MyAty"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>运行按下按钮显示onfutunately——–退出<br>因为没有权限<br>在OtherApp.fest.xml前面加上使用声明<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:<span class="property">name</span>=<span class="string">"com.example.zhang.learnwebview.permission.MYATY"</span>/&gt;</span><br></pre></td></tr></table></figure></p>
<p>之后运行正常</p>
<h1 id="u7B2C_u4E09_u7AE0__u7528_u6237_u754C_u9762_u4F18_u5316"><a href="#u7B2C_u4E09_u7AE0__u7528_u6237_u754C_u9762_u4F18_u5316" class="headerlink" title="第三章 用户界面优化"></a>第三章 用户界面优化</h1><h2 id="1-Android_Fragment"><a href="#1-Android_Fragment" class="headerlink" title="1.Android Fragment"></a>1.Android Fragment</h2><p>Fragment 是 Android 中在同一个应用内部用于替换 Activity 界面跳转的机制，她高效灵活，是 Android 开发中不可缺少的。<br>核心内容：认识 Fragment；Fragment 生命周期；Fragment 的应用<br>Activity是比较重量级的基本组件，同一个程序内部界面切换不合适</p>
<p>(1) 使用 Fragment<br>创建一个with–Fragment项目<br><img src="/img/android/47.png" alt="image"><br>Main.xml—自动生成<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;fragment <span class="string">xmlns:</span>android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line"><span class="label">    xmlns:</span>tools=<span class="string">"http://schemas.android.com/tools"</span> <span class="string">android:</span>id=<span class="string">"@+id/fragment"</span></span><br><span class="line"><span class="label">    android:</span>name=<span class="string">"com.example.zhang.fragment.MainActivityFragment"</span></span><br><span class="line"><span class="label">    tools:</span>layout=<span class="string">"@layout/fragment_main"</span> <span class="string">android:</span>layout_width=<span class="string">"match_parent"</span></span><br><span class="line"><span class="label">    android:</span>layout_height=<span class="string">"match_parent"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>Fragment_main.xml<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"呈现另一个fragment"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnShowAnotherFragment"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>Fragment_another.xml<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"这是另外一个fragment"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/textView"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="type">text</span>=<span class="string">"后退"</span></span><br><span class="line">    android:<span class="property">id</span>=<span class="string">"@+id/btnBack"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<p>Main.java自动<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></span><br><span class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Handle action bar item clicks here. The action bar will</span></span><br><span class="line">        <span class="comment">// automatically handle clicks on the Home/Up button, so long</span></span><br><span class="line">        <span class="comment">// as you specify a parent activity in AndroidManifest.xml.</span></span><br><span class="line">        <span class="keyword">int</span> id = item.getItemId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//noinspection SimplifiableIfStatement</span></span><br><span class="line">        <span class="keyword">if</span> (id == R.id.action_settings) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onOptionsItemSelected</span><span class="params">(item)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>MainActivityFragment.java<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivityFragment</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Fragment</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    public <span class="type">MainActivityFragment</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    public <span class="type">View</span> onCreateView(<span class="type">LayoutInflater</span> inflater, <span class="type">ViewGroup</span> container,</span><br><span class="line">                             <span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">        <span class="type">View</span> rootView = inflater.inflate(<span class="type">R</span>.layout.fragment_main, container, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//添加事件监听器</span></span><br><span class="line">        rootView.findViewById(<span class="type">R</span>.id.btnShowAnotherFragment).setOnClickListener(<span class="keyword">new</span> <span class="type">View</span>.<span class="type">OnClickListener</span>() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            public void onClick(<span class="type">View</span> v) &#123;</span><br><span class="line">                getFragmentManager().beginTransaction()</span><br><span class="line">                        .addToBackStack(<span class="literal">null</span>)<span class="comment">//后退键------没有这行后退键将直接退出程序</span></span><br><span class="line">                        .replace(<span class="type">R</span>.id.fragment,<span class="keyword">new</span> <span class="type">AnotherFragment</span>()).commit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> rootView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>AnotherFragment.java<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AnotherFragment</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Fragment</span> &#123;</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    public <span class="type">View</span> onCreateView(<span class="type">LayoutInflater</span> inflater, <span class="type">ViewGroup</span> container, <span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">        <span class="comment">/////////////java文件解析对应的.xml</span></span><br><span class="line">        <span class="type">View</span> root=inflater.inflate(<span class="type">R</span>.layout.fragment_another, container, <span class="literal">false</span>);</span><br><span class="line">        root.findViewById(<span class="type">R</span>.id.btnBack).setOnClickListener(<span class="keyword">new</span> <span class="type">View</span>.<span class="type">OnClickListener</span>() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            public void onClick(<span class="type">View</span> v) &#123;</span><br><span class="line">                getFragmentManager().popBackStack();<span class="comment">//实现后退操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行仿真如下，我的是在一个界面内，极客学院的在不同的界面内<br><img src="/img/android/48.png" alt="image"></p>
<p>(2)Fragment 的生命周期<br>Fragment生命周期图如下:<br><img src="/img/android/49.png" alt="image"><br>一般知道三个即可：onCreate(),onCreateView(),onPause()<br>将AnotherFragment.java修改如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCreateView"</span>);</span><br><span class="line">        View rootView = inflater.inflate(R.layout.fragment_another, container, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> rootView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onCreate"</span>);</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onPause"</span>);</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onDestroy"</span>);</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>运行点击按钮显示AnotherFragment，后台输出：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span>-<span class="number">08</span> <span class="number">03</span>:<span class="number">26</span>:<span class="number">48.192</span>    <span class="number">9321</span>-<span class="number">9321</span>/com.zhang.learnfragment I/System.out﹕ onCreate</span><br><span class="line"><span class="number">05</span>-<span class="number">08</span> <span class="number">03</span>:<span class="number">26</span>:<span class="number">48.192</span>    <span class="number">9321</span>-<span class="number">9321</span>/com.zhang.learnfragment I/System.out﹕ onCreateView</span><br></pre></td></tr></table></figure></p>
<p>退出时输出：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span>-<span class="number">08</span> <span class="number">03</span>:<span class="number">32</span>:<span class="number">10.003</span>  <span class="number">11763</span>-<span class="number">11763</span>/com.zhang.learnfragment I/System.out﹕ onPause</span><br><span class="line"><span class="number">05</span>-<span class="number">08</span> <span class="number">03</span>:<span class="number">32</span>:<span class="number">10.018</span>  <span class="number">11763</span>-<span class="number">11763</span>/com.zhang.learnfragment I/System.out﹕ onDestroy</span><br></pre></td></tr></table></figure></p>
<p>下面讨论第二个fragment把第一个fragment覆盖的情况。<br>将MainActivityFragment.java修改如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityFragment</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">app</span>.<span class="title">Fragment</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainActivityFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span><br><span class="line">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"A onCreateView"</span>);</span><br><span class="line">        View rootView = inflater.inflate(R.layout.fragment_main, container, <span class="keyword">false</span>);</span><br><span class="line">        rootView.findViewById(R.id.btnShowAnotherFragment).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                getFragmentManager().beginTransaction().replace(R.id.fragment</span><br><span class="line">                <span class="comment">/*主容器(activity_main.xml里的ID)*/</span>, <span class="keyword">new</span> AnotherFragment()<span class="comment">/*新的fragment*/</span>).commit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> rootView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A onCreate"</span>);</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A onPause"</span>);</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A onDestroy"</span>);</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>运行时：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span>-<span class="number">08</span> <span class="number">03</span>:<span class="number">38</span>:<span class="number">06.686</span>  <span class="number">14543</span>-<span class="number">14543</span>/com.zhang.learnfragment I/System.out﹕ A onCreate</span><br><span class="line"><span class="number">05</span>-<span class="number">08</span> <span class="number">03</span>:<span class="number">38</span>:<span class="number">06.686</span>  <span class="number">14543</span>-<span class="number">14543</span>/com.zhang.learnfragment I/System.out﹕ A onCreateView</span><br></pre></td></tr></table></figure></p>
<p>点击按钮显示下一个fragment,我这里两个fragment都在显示，所以出现了这个情况，A并没有onpause<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span>-<span class="number">08</span> <span class="number">03</span>:<span class="number">39</span>:<span class="number">08.782</span>  <span class="number">14543</span>-<span class="number">14543</span>/com.zhang.learnfragment I/System.out﹕ onCreate</span><br><span class="line"><span class="number">05</span>-<span class="number">08</span> <span class="number">03</span>:<span class="number">39</span>:<span class="number">08.782</span>  <span class="number">14543</span>-<span class="number">14543</span>/com.zhang.learnfragment I/System.out﹕ onCreateView</span><br></pre></td></tr></table></figure></p>
<p>退出<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span>-<span class="number">08</span> <span class="number">03</span>:<span class="number">40</span>:<span class="number">34.260</span>  <span class="number">14543</span>-<span class="number">14543</span>/com.zhang.learnfragment I/System.out﹕ A onPause</span><br><span class="line"><span class="number">05</span>-<span class="number">08</span> <span class="number">03</span>:<span class="number">40</span>:<span class="number">34.260</span>  <span class="number">14543</span>-<span class="number">14543</span>/com.zhang.learnfragment I/System.out﹕ onPause</span><br><span class="line"><span class="number">05</span>-<span class="number">08</span> <span class="number">03</span>:<span class="number">40</span>:<span class="number">34.272</span>  <span class="number">14543</span>-<span class="number">14543</span>/com.zhang.learnfragment I/System.out﹕ A onDestroy</span><br><span class="line"><span class="number">05</span>-<span class="number">08</span> <span class="number">03</span>:<span class="number">40</span>:<span class="number">34.272</span>  <span class="number">14543</span>-<span class="number">14543</span>/com.zhang.learnfragment I/System.out﹕ onDestroy</span><br></pre></td></tr></table></figure></p>
<p>(3)带侧边栏的 Activity<br>新建activity如下：<br><img src="/img/android/50.png" alt="image"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要内容：<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://www.bestzhangjin.com/tags/Android/"/>
    
      <category term="Android" scheme="http://www.bestzhangjin.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[软件工程师常见问题汇总]]></title>
    <link href="http://www.bestzhangjin.com/2016/03/15/question/"/>
    <id>http://www.bestzhangjin.com/2016/03/15/question/</id>
    <published>2016-03-15T13:23:59.000Z</published>
    <updated>2016-05-30T14:05:21.710Z</updated>
    <content type="html"><![CDATA[<p>好记性不如烂笔头，本文收集了我在学习过程中遇到的常见问题<br><a id="more"></a></p>
<h1 id="1-_u7AEF_u53E3_u51B2_u7A81_u95EE_u9898"><a href="#1-_u7AEF_u53E3_u51B2_u7A81_u95EE_u9898" class="headerlink" title="1.端口冲突问题"></a>1.端口冲突问题</h1><p>win+R打开运行，然后输入cmd即可。<br>在dos命令中输入以下命令查询正在被使用的端口号(第二列)以及使用它的程序。<br>命令：netstat -ano<br>看到后面一列是有一个PID，然后把占用端口的PID号记下来。<br>打开任务管理器，选择服务，找到对应PID进程结束进程即可。</p>
<h1 id="2-ubuntu_u4E2D_u6587_u4E71_u7801-_u6CA1_u6709_u4E2D_u6587_u5E93"><a href="#2-ubuntu_u4E2D_u6587_u4E71_u7801-_u6CA1_u6709_u4E2D_u6587_u5E93" class="headerlink" title="2.ubuntu中文乱码-没有中文库"></a>2.ubuntu中文乱码-没有中文库</h1><p>安装中文语言包：<br>apt-get install language-pack-zh-hans<br>不行的话先更新下源:apt-get update</p>
<p>用vim配置语言环境变量：<br>vim /etc/environment<br>在下面添加如下两行<br>LANG=”zh_CN.UTF-8″<br>LANGUAGE=”zh_CN:zh:en_US:en”<br>如果你想用英文环境了，改成这两行就OK<br>LANG=”en_US.UTF-8″<br>LANGUAGE=”en_US:en” </p>
<p>重启Ubuntu Server：<br>reboot </p>
<p>可以用locale查看一下环境变量：<br>locale</p>
<hr>
<p>更新中…………</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>好记性不如烂笔头，本文收集了我在学习过程中遇到的常见问题<br>]]>
    
    </summary>
    
      <category term="常见问题" scheme="http://www.bestzhangjin.com/tags/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
      <category term="软件工程师" scheme="http://www.bestzhangjin.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88/"/>
    
      <category term="常见问题" scheme="http://www.bestzhangjin.com/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Myeclipse应用技巧]]></title>
    <link href="http://www.bestzhangjin.com/2016/03/15/myeclipse_view/"/>
    <id>http://www.bestzhangjin.com/2016/03/15/myeclipse_view/</id>
    <published>2016-03-15T13:00:51.000Z</published>
    <updated>2017-10-11T13:43:27.786Z</updated>
    <content type="html"><![CDATA[<p>主要内容：<br><a id="more"></a></p>
<h1 id="1-Myeclipse_u642D_u5EFA_u5B89_u5353_u73AF_u5883"><a href="#1-Myeclipse_u642D_u5EFA_u5B89_u5353_u73AF_u5883" class="headerlink" title="1.Myeclipse搭建安卓环境"></a>1.Myeclipse搭建安卓环境</h1><p>工具：Myeclipse,ADT,SDK<br>1.安装Myeclipse<br>2.ADT解压，将解压目录下的features与plugins文件夹放到Myeclipse安装目录的dropins目录下面<br>3.复制SDK，制定Myeclipse对应到这个SDK<br>  windows-&gt;perference-&gt;android-&gt;SDK目录</p>
<h1 id="2-myeclipse_u5BFC_u5165_u9879_u76EE"><a href="#2-myeclipse_u5BFC_u5165_u9879_u76EE" class="headerlink" title="2.myeclipse导入项目"></a>2.myeclipse导入项目</h1><p>File-&gt;Import-&gt;General-&gt;Existing Projects into Workpace<br>点击next，选择”Browse…”,浏览工程所在目录，找到工程所在文件夹，确定。<br>此时projects里面会出现工程所在目录对应所有的工程，选择你需要的工程，选择”Finish”，即可！</p>
<h1 id="3-javabean_u4E4B_u81EA_u52A8_u751F_u6210set_u3001get_u65B9_u6CD5"><a href="#3-javabean_u4E4B_u81EA_u52A8_u751F_u6210set_u3001get_u65B9_u6CD5" class="headerlink" title="3.javabean之自动生成set、get方法"></a>3.javabean之自动生成set、get方法</h1><p>java文件工作区右键-&gt;source-&gt;generate getting and setting…</p>
<h1 id="4-myeclipse_u5BFC_u5165_u67B6_u5305"><a href="#4-myeclipse_u5BFC_u5165_u67B6_u5305" class="headerlink" title="4.myeclipse导入架包"></a>4.myeclipse导入架包</h1><p>将架包复制到项目的lib目录下，选中架包右键-&gt;Build Path-&gt;Add To Build Path</p>
<hr>
<p>更新中…………</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要内容：<br>]]>
    
    </summary>
    
      <category term="Myeclipse" scheme="http://www.bestzhangjin.com/tags/Myeclipse/"/>
    
      <category term="应用技巧" scheme="http://www.bestzhangjin.com/tags/%E5%BA%94%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Java" scheme="http://www.bestzhangjin.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Struts 2框架详解]]></title>
    <link href="http://www.bestzhangjin.com/2016/03/14/structs2/"/>
    <id>http://www.bestzhangjin.com/2016/03/14/structs2/</id>
    <published>2016-03-14T02:06:50.000Z</published>
    <updated>2017-10-11T13:44:11.114Z</updated>
    <content type="html"><![CDATA[<p>主要内容：<br><a id="more"></a></p>
<h1 id="u7B2C_u4E00_u7AE0_Struts2_u4ECB_u7ECD"><a href="#u7B2C_u4E00_u7AE0_Struts2_u4ECB_u7ECD" class="headerlink" title="第一章 Struts2介绍"></a>第一章 Struts2介绍</h1><p>著名的SSH三大框架分别为：表现层(Struts)、业务逻辑层(Spring),持久化层(Hibernate)。<br>Struts 2是Struts的下一代产品，是在 struts 1和WebWork的技术基础上进行了合并的全新的Struts 2框架。其全新的Struts 2的体系结构与Struts 1的体系结构差别巨大。Struts 2以WebWork为核心，采用拦截器的机制来处理用户的请求，这样的设计也使得业务逻辑控制器能够与ServletAPI完全脱离开，所以Struts 2可以理解为WebWork的更新产品。虽然从Struts 1到Struts 2有着太大的变化，但是相对于WebWork，Struts 2的变化很小。<br>MVC模型:<br><img src="/img/structs2/1.png" alt="img"></p>
<p>Struts2之MVC模型：<br>控制器：FilterDispatcher,是一个Sevelet过滤器，请求到来时经过FilterDispatcher过滤，FilterDispatcher决定该由哪个Action处理当前请求。<br>模型：Action,功能：调用业务逻辑处理请求，进行数据传递。Action处理完请求会返回一个逻辑视图。<br>视图:除jsp页面外，还可以是Velocity、FreeMarker、Tiles等多种视图资源。视图组件接收到Action返回的逻辑视图会寻找对应物理视图资源并返回给客户端。<br>Struts2前端控制器模式架构图：<br><img src="/img/structs2/8.png" alt="img"><br>1.JSP提交以”.action”结尾的请求<br>2.FilterDispatcher接收请求并调用Action处理该请求<br>3.Action处理完毕返回一个逻辑视图<br>4.FilterDispatcher根据Action返回的逻辑视图创建物理视图<br>5.将物理视图返回给页面</p>
<p>Struts2页面控制器模式架构图：<br><img src="/img/structs2/9.png" alt="img"><br>1.JSP页面通过<s:action>标签直接请求某个具体的Action<br>2.Action处理完毕返回一个逻辑视图<br>3.FilterDispatcher根据Action返回的逻辑视图创建物理视图<br>4.将物理视图放回给客户端</s:action></p>
<p>Struts2的工作原理:<br><img src="/img/structs2/2.png" alt="img"><br>一个请求在Struts2框架中的处理大概分为以下几个步骤<br>1 客户端初始化一个指向Servlet容器（例如Tomcat）的请求<br>2 这个请求经过一系列的过滤器（Filter）（这些过滤器中有一个叫做ActionContextCleanUp的可选过滤器，这个过滤器对于Struts2和其他框架的集成很有帮助，例如：SiteMesh Plugin）<br>3 接着FilterDispatcher被调用，FilterDispatcher询问ActionMapper来决定这个请是否需要调用某个Action<br>4 如果ActionMapper决定需要调用某个Action，FilterDispatcher把请求的处理交给ActionProxy<br>5 ActionProxy通过Configuration Manager询问框架的配置文件，找到需要调用的Action类<br>6 ActionProxy创建一个ActionInvocation的实例。<br>7 ActionInvocation实例使用命名模式来调用，在调用Action的过程前后，涉及到相关拦截器（Intercepter）的调用。<br>8 一旦Action执行完毕，ActionInvocation负责根据struts.xml中的配置找到对应的返回结果。返回结果通常是（但不总是，也可 能是另外的一个Action链）一个需要被表示的JSP或者FreeMarker的模版。在表示的过程中可以使用Struts2 框架中继承的标签。在这个过程中需要涉及到ActionMapper</p>
<h1 id="u7B2C_u4E8C_u7AE0__u642D_u5EFAStructs2_u5E94_u7528"><a href="#u7B2C_u4E8C_u7AE0__u642D_u5EFAStructs2_u5E94_u7528" class="headerlink" title="第二章 搭建Structs2应用"></a>第二章 搭建Structs2应用</h1><h2 id="1-_u51C6_u5907_u5DE5_u4F5C"><a href="#1-_u51C6_u5907_u5DE5_u4F5C" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>所需环境:<br>JDK,Tomcat,Struts2<br>这里只介绍Struts2下载<br>官网下载：<a href="http://struts.apache.org/download" target="_blank" rel="external">http://struts.apache.org/download</a><br>下载文件：struts-2.3.24.1-all.zip</p>
<p>程序开发流程：<br>(1)引入Struts2运行库<br>(2)配置Web.xml文件<br>(3)编写Action类<br>(4)配置struts.xml文件<br>(5)编写视图资源</p>
<h2 id="2-_u56FE_u89E3_u6D41_u7A0B"><a href="#2-_u56FE_u89E3_u6D41_u7A0B" class="headerlink" title="2.图解流程"></a>2.图解流程</h2><p>Http请求流转流程：<br><img src="/img/structs2/10.png" alt="img"><br>配置文件连接点详述：<br><img src="/img/structs2/11.png" alt="img"></p>
<h2 id="3-Struts2_u81EA_u5E26_u7684_u9879_u76EE"><a href="#3-Struts2_u81EA_u5E26_u7684_u9879_u76EE" class="headerlink" title="3.Struts2自带的项目"></a>3.Struts2自带的项目</h2><p>(1) struts-2.3.24.1-all.zip解压目录分析<br><img src="/img/structs2/3.png" alt="img"><br>apps:示例应用<br>docs:帮助文档<br>lib:Struts2框架的核心类库及第三方插件类库<br>src:Struts2框架的全部源代码</p>
<p>(2)搭建步骤<br>A.引入Struts2工程需要的运行库文件<br>B.创建配置web.xml文件<br>C.创建一个Action类<br>D.创建配置struts.xml文件</p>
<p>找到apps下的struts2-blank.war文件发布到Tomcat上。<br>备注:war格式的文件，这个文件格式可能并不常见，这个通常是tomcat程序发布时候的自解压文件。这个文件可以用解压软件打开，也可以放到tomcat的发布目录，服务器启动是时候war文件会自动解压。<br>这里直接点击struts2-blank.war右键打开方式winrar，解压后目录：<br><img src="/img/structs2/4.png" alt="img"><br><img src="/img/structs2/5.png" alt="img"><br><img src="/img/structs2/6.png" alt="img"><br><img src="/img/structs2/7.png" alt="img"><br>jsp：放置工程中jsp文件<br>classes:放置所有编译后的文件及各个配置文件<br>lib:放置工程运行所需类库文件<br>src:放置java源码文件<br>lib中已经有需要的包，web.xml也有。<br>struts2-blank项目直接访问如下：<br><img src="/img/structs2/12.png" alt="img"></p>
<h2 id="4-_u624B_u52A8_u642D_u5EFAStruts2_u7A0B_u5E8F"><a href="#4-_u624B_u52A8_u642D_u5EFAStruts2_u7A0B_u5E8F" class="headerlink" title="4.手动搭建Struts2程序"></a>4.手动搭建Struts2程序</h2><p>编写Action类：<br>(1)要包含与请求参数对应的属性以及setter、getter方法<br>(2)Action类增加一个execute方法，Struts2框架默认会执行，该方法不做业务逻辑处理，而是调用其他业务逻辑来完成这部分工作。<br>(3)Action类返回一个标准的字符串，该字符串是一个逻辑视图名，该视图名对应实际的物理视图。<br>编写如下:<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> UserAction&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">String</span> username;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">String</span> password;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">String</span> getPassword()&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> setPassword(<span class="built_in">String</span> password)&#123;</span><br><span class="line">		<span class="keyword">this</span>.password=password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">String</span> getUsername()&#123;</span><br><span class="line">		<span class="keyword">return</span> username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> setUsername(<span class="built_in">String</span> username)&#123;</span><br><span class="line">		<span class="keyword">this</span>.username=username;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">String</span> execute() &#123;</span><br><span class="line">		<span class="keyword">if</span>(username.equals(<span class="string">"zhang"</span>)&amp;&amp;password.equals(<span class="string">"123456"</span>))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>编译成UserAction.class放在WEB-INF/classes下。</p>
<p>配置WEB-INF/struts.xml<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!<span class="type">DOCTYPE</span> struts <span class="type">PUBLIC</span></span><br><span class="line">	<span class="string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line">	<span class="string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;struts&gt;</span><br><span class="line">    &lt;package name=<span class="string">"default"</span> namespace=<span class="string">"/"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line">        &lt;action name=<span class="string">"login"</span> class=<span class="string">"com.zhang.UserAction"</span>&gt;</span><br><span class="line">                &lt;<span class="literal">result</span> name=<span class="string">"success"</span>&gt;/jsp/success.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">                &lt;<span class="literal">result</span> name=<span class="string">"error"</span>&gt;/jsp/error.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">        &lt;/action&gt;</span><br><span class="line">    &lt;/package&gt;</span><br><span class="line">&lt;/struts&gt;</span><br></pre></td></tr></table></figure></p>
<p>程序发布运行时会自动在WEB-INF/classes下找到加载structs.xml</p>
<p><action...>标签中两个属性name和class,name:用户URL请求的action名，<br>如用户请求如果为：<a href="http://localhost:8080/login.action则name为login，class表示请求实现的类。" target="_blank" rel="external">http://localhost:8080/login.action则name为login，class表示请求实现的类。</a></action...></p>
<p><result...>标签定义逻辑视图与物理视图之间的映射，Action返回”success”则success.jsp处理；返回error则error.jsp处理。</result...></p>
<p>编写视图资源:<br>登录页面<br>index.jsp<br><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="vbscript">&lt;%@ page language=<span class="string">"java"</span> import=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><span class="xml"></span><br><span class="line"></span><span class="vbscript">&lt;%</span><br><span class="line"><span class="built_in">String</span> path = <span class="built_in">request</span>.getContextPath();</span><br><span class="line"><span class="built_in">String</span> basePath = <span class="built_in">request</span>.getScheme()+<span class="string">"://"</span>+<span class="built_in">request</span>.getServerName()+<span class="string">":"</span>+<span class="built_in">request</span>.getServerPort()+path+<span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><span class="xml"></span><br><span class="line"></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"</span></span></span><span class="vbscript">&lt;%=path %&gt;</span><span class="xml"><span class="tag"><span class="value">/new/login.action"</span> <span class="attribute">method</span>=<span class="value">"post"</span>&gt;</span></span><br><span class="line">    	用户名：<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"username"</span>&gt;</span><span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line">    	密码：<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"password"</span>&gt;</span><span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"提交"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>success.jsp<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">   	登陆成功！</span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>fail.jsp<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    登录失败！</span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-_u4F7F_u7528Myeclipse_u5F00_u53D1Structs2_u7A0B_u5E8F"><a href="#3-_u4F7F_u7528Myeclipse_u5F00_u53D1Structs2_u7A0B_u5E8F" class="headerlink" title="3.使用Myeclipse开发Structs2程序"></a>3.使用Myeclipse开发Structs2程序</h2><p>(1)新建Web工程<br>File-&gt;”new”-&gt;”Project”-&gt;”Web Project”或者<br>File-&gt;”new”-&gt;”Project”-&gt;”MyEcipse”-&gt;”java Enterprise Projects”-&gt;”Web Project”</p>
<p>(2)加载struts2类库文件<br>项目名右键-&gt;MyEclipse-&gt;Project Facets[Capabilities]-&gt;Install Apache struts(2.x) Facet  选择版本finish即可。</p>
<p>(3)项目直接运行<br>第二步会自动加载库和生成对应文件<br>项目结构图如下：<br><img src="/img/structs2/13.png" alt="img"><br>直接布到tomcat下如下：<br><img src="/img/structs2/14.png" alt="img"></p>
<p>(4)修改成登录项目<br>项目结构图如下：<br><img src="/img/structs2/15.png" alt="img"></p>
<p>对应文件信息：<br>web.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">web-app</span> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attribute">xmlns</span>=<span class="value">"http://java.sun.com/xml/ns/javaee"</span> <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span> <span class="attribute">version</span>=<span class="value">"3.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">display-name</span>&gt;</span>MyWeb<span class="tag">&lt;/<span class="title">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="title">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>struts.xml<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!<span class="type">DOCTYPE</span> struts <span class="type">PUBLIC</span> <span class="string">"-//Apache Software Foundation//DTD Struts Configuration 2.1//EN"</span> <span class="string">"http://struts.apache.org/dtds/struts-2.1.dtd"</span>&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">	&lt;package name=<span class="string">"default"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line">		&lt;action name=<span class="string">"login"</span> class=<span class="string">"com.zhang.struts2.User"</span>&gt;</span><br><span class="line">		&lt;<span class="literal">result</span> name=<span class="string">"success"</span>&gt;success.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">		&lt;<span class="literal">result</span> name=<span class="string">"fail"</span>&gt;fail.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">		&lt;/action&gt;</span><br><span class="line">	&lt;/package&gt;</span><br><span class="line">&lt;/struts&gt;</span><br></pre></td></tr></table></figure></p>
<p>User.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhang.struts2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">	 <span class="keyword">private</span> String name;</span><br><span class="line">	 <span class="keyword">private</span> String password;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">	 <span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(name.equals(<span class="string">"zhang"</span>)&amp;&amp;<span class="string">"123456"</span>.equals(password))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"fail"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>index.jsp<br><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="vbscript">&lt;%@ page language=<span class="string">"java"</span> import=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><span class="xml"></span><br><span class="line"></span><span class="vbscript">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</span><span class="xml"></span><br><span class="line"></span><span class="vbscript">&lt;%</span><br><span class="line"><span class="built_in">String</span> path = <span class="built_in">request</span>.getContextPath();</span><br><span class="line"><span class="built_in">String</span> basePath = <span class="built_in">request</span>.getScheme()+<span class="string">"://"</span>+<span class="built_in">request</span>.getServerName()+<span class="string">":"</span>+<span class="built_in">request</span>.getServerPort()+path+<span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><span class="xml"></span><br><span class="line"></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">base</span> <span class="attribute">href</span>=<span class="value">"</span></span></span><span class="vbscript">&lt;%=basePath%&gt;</span><span class="xml"><span class="tag"><span class="value">"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">s:form</span> <span class="attribute">action</span>=<span class="value">"login"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">s:textfield</span> <span class="attribute">name</span>=<span class="value">"name"</span> <span class="attribute">label</span>=<span class="value">"用户名"</span>&gt;</span><span class="tag">&lt;/<span class="title">s:textfield</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">s:textfield</span> <span class="attribute">name</span>=<span class="value">"password"</span> <span class="attribute">label</span>=<span class="value">"密码"</span>&gt;</span><span class="tag">&lt;/<span class="title">s:textfield</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">s:submit</span> <span class="attribute">value</span>=<span class="value">"确定"</span>&gt;</span><span class="tag">&lt;/<span class="title">s:submit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">s:form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>success.jsp<br><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="vbscript">&lt;%@ page language=<span class="string">"java"</span> import=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><span class="xml"></span><br><span class="line"></span><span class="vbscript">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</span><span class="xml"></span><br><span class="line"></span><span class="vbscript">&lt;%</span><br><span class="line"><span class="built_in">String</span> path = <span class="built_in">request</span>.getContextPath();</span><br><span class="line"><span class="built_in">String</span> basePath = <span class="built_in">request</span>.getScheme()+<span class="string">"://"</span>+<span class="built_in">request</span>.getServerName()+<span class="string">":"</span>+<span class="built_in">request</span>.getServerPort()+path+<span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><span class="xml"></span><br><span class="line"></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">base</span> <span class="attribute">href</span>=<span class="value">"</span></span></span><span class="vbscript">&lt;%=basePath%&gt;</span><span class="xml"><span class="tag"><span class="value">"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>登录成功<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>登录成功!欢迎您:<span class="tag">&lt;<span class="title">s:property</span> <span class="attribute">value</span>=<span class="value">"name"</span>/&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>fail.jsp<br><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="vbscript">&lt;%@ page language=<span class="string">"java"</span> import=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><span class="xml"></span><br><span class="line"></span><span class="vbscript">&lt;%</span><br><span class="line"><span class="built_in">String</span> path = <span class="built_in">request</span>.getContextPath();</span><br><span class="line"><span class="built_in">String</span> basePath = <span class="built_in">request</span>.getScheme()+<span class="string">"://"</span>+<span class="built_in">request</span>.getServerName()+<span class="string">":"</span>+<span class="built_in">request</span>.getServerPort()+path+<span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><span class="xml"></span><br><span class="line"></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">base</span> <span class="attribute">href</span>=<span class="value">"</span></span></span><span class="vbscript">&lt;%=basePath%&gt;</span><span class="xml"><span class="tag"><span class="value">"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>失败页面<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>登录失败!<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>运行效果:<br><img src="/img/structs2/16.png" alt="img"><br>输入zhang 123456时登录成功，其他登录失败！</p>
<h1 id="u7B2C_u4E09_u7AE0_Struts2_u6838_u5FC3_u57FA_u7840"><a href="#u7B2C_u4E09_u7AE0_Struts2_u6838_u5FC3_u57FA_u7840" class="headerlink" title="第三章 Struts2核心基础"></a>第三章 Struts2核心基础</h1><h2 id="1-Struts2_u6A21_u578B"><a href="#1-Struts2_u6A21_u578B" class="headerlink" title="1.Struts2模型"></a>1.Struts2模型</h2><p>(1)抽象模型<br><img src="/img/structs2/17.png" alt="img"><br>Struts2执行流程:<br>A.Struts2收集到HTTP请求，交由FilterDispatcher处理<br>B.FilterDispatcher对请求解析得到Action名称，从struts.xml配置文件中获得该Action配置信息并调用该Action<br>C.系统获得Action配置信息后，会记录该Action所配置的拦截信息，并在此Action执行的前后调用这些拦截器<br>D.当Action执行结束后会返回一个结果类型，由此结果类型映射到视图界面，整个流程执行完毕。</p>
<p>(2)拦截器<br><img src="/img/structs2/18.png" alt="img"></p>
<h2 id="2-Action_u5E94_u7528_u8BE6_u89E3"><a href="#2-Action_u5E94_u7528_u8BE6_u89E3" class="headerlink" title="2.Action应用详解"></a>2.Action应用详解</h2><p>(1)类的使用<br>通常Action都会继承ActionSupport，因为ActionSupport帮助我们实现了一部分常用功能，简化代码，提高效率。<br>ActionSupport实现的接口：<br>Action:提供SUCCESS,ERROR,NONE,INPUT,LOGIN这5个常量作为返回结果并提供了execute()方法<br>Validateable:提供了validate()方法用于校验表单数据<br>ValidationAware:定义了一些方法用来对Action执行过程中的信息进行处理，方法如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>void addActionError(String anErrorMessage)</td>
<td>增加一个Action级别的错误信息到对应Action</td>
</tr>
<tr>
<td>void addActionMessage(String aMessage)</td>
<td>增加一个Action级别的信息到该Action</td>
</tr>
<tr>
<td>void addFieldError(String fieldName,String errorMessage)</td>
<td>增加一个错误信息到指定字段</td>
</tr>
<tr>
<td>Collection getActionErrors()</td>
<td>获得Action中用于装载Action级别错误信息字符串的集合</td>
</tr>
<tr>
<td>Collection getActionMessages()</td>
<td>获得Action中用于装载Action级别信息字符串的集合</td>
</tr>
<tr>
<td>Map getFieldErrors()</td>
<td>获取与本Action相关联的指定字段错误信息</td>
</tr>
<tr>
<td>boolean hasActionErrors()</td>
<td>检查是否存在Action级别的错误信息</td>
</tr>
<tr>
<td>boolean hasActionMessages()</td>
<td>检查是否存在Action级别的信息</td>
</tr>
<tr>
<td>boolean hasErrors()</td>
<td>检查是否存在Action级别的信息或者字段错误信息</td>
</tr>
<tr>
<td>boolean hasFieldErrors()</td>
<td>检查是否存在与本Action相关联的特定字段错误信息</td>
</tr>
<tr>
<td>void setActionErrors(Collection errorMessages)</td>
<td>设置用于封装Action级别错误信息字符串的集合</td>
</tr>
<tr>
<td>void setActionMessages(Collection messages)</td>
<td>设置装载Action级别信息字符串的集合</td>
</tr>
<tr>
<td>void setFiledErrors(Map errorMap)</td>
<td>设置字段错误信息映射</td>
</tr>
</tbody>
</table>
<p>LocalProvider:Struts2中当前用户语言、地区信息被封装在java.util.Locale类中，通过com.opensymphony.xwork.LocaleProvider接口中的getLocale方法来获取Local中的语言/地区信息。<br>TextProvider:提供了一系列getText()方法获取对应的国际化信息资源，在Struts2中国际化资源都是以key=value表示，方法通过key找到符合的value</p>
<p>(2)Action传值方式<br>A.字段驱动<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> User()&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">String</span> name;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">String</span> password;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> setName(<span class="built_in">String</span> name)&#123;</span><br><span class="line">		<span class="keyword">this</span>.name=name;</span><br><span class="line">	&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如上定义两个字段name和password,这这个字段分别和登录表单的用户名密码表单域对应，登录页面提交的表单数据被映射到对应的Action字段，由此Action得到传入数据。</p>
<p>B.模型驱动<br>User.java<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> User&#123;</span><br><span class="line">	 <span class="keyword">private</span> <span class="built_in">String</span> name;</span><br><span class="line">	 <span class="keyword">private</span> <span class="built_in">String</span> password;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">String</span> getName() &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> setName(<span class="built_in">String</span> name) &#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">String</span> getPassword() &#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> setPassword(<span class="built_in">String</span> password) &#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>UserAction.java<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">ActionSupport</span> &#123;</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">User</span> user;</span><br><span class="line">	 public <span class="type">User</span> getUser() &#123;</span><br><span class="line">		<span class="keyword">return</span> user;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setUser(<span class="type">User</span> user) &#123;</span><br><span class="line">		<span class="keyword">this</span>.user = user;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	public <span class="type">String</span> execute() <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(user.getName().equals(<span class="string">"zhang"</span>)&amp;&amp;<span class="string">"123456"</span>.equals(user.getPassword()))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"fail"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>struts.xml<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!<span class="type">DOCTYPE</span> struts <span class="type">PUBLIC</span> <span class="string">"-//Apache Software Foundation//DTD Struts Configuration 2.1//EN"</span> <span class="string">"http://struts.apache.org/dtds/struts-2.1.dtd"</span>&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">	&lt;package name=<span class="string">"default"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line">		&lt;action name=<span class="string">"login"</span> class=<span class="string">"com.zhang.struts2.UserAction"</span>&gt;</span><br><span class="line">		&lt;<span class="literal">result</span> name=<span class="string">"success"</span>&gt;success.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">		&lt;<span class="literal">result</span> name=<span class="string">"fail"</span>&gt;fail.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">		&lt;/action&gt;</span><br><span class="line">	&lt;/package&gt;</span><br><span class="line">&lt;/struts&gt;</span><br></pre></td></tr></table></figure></p>
<p>index.jsp<br><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="vbscript">&lt;%@ page language=<span class="string">"java"</span> import=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><span class="xml"></span><br><span class="line"></span><span class="vbscript">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</span><span class="xml"></span><br><span class="line"></span><span class="vbscript">&lt;%</span><br><span class="line"><span class="built_in">String</span> path = <span class="built_in">request</span>.getContextPath();</span><br><span class="line"><span class="built_in">String</span> basePath = <span class="built_in">request</span>.getScheme()+<span class="string">"://"</span>+<span class="built_in">request</span>.getServerName()+<span class="string">":"</span>+<span class="built_in">request</span>.getServerPort()+path+<span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><span class="xml"></span><br><span class="line"></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">base</span> <span class="attribute">href</span>=<span class="value">"</span></span></span><span class="vbscript">&lt;%=basePath%&gt;</span><span class="xml"><span class="tag"><span class="value">"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">s:form</span> <span class="attribute">action</span>=<span class="value">"login"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">s:textfield</span> <span class="attribute">name</span>=<span class="value">"user.name"</span> <span class="attribute">label</span>=<span class="value">"用户名"</span>&gt;</span><span class="tag">&lt;/<span class="title">s:textfield</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">s:textfield</span> <span class="attribute">name</span>=<span class="value">"user.password"</span> <span class="attribute">label</span>=<span class="value">"密码"</span>&gt;</span><span class="tag">&lt;/<span class="title">s:textfield</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">s:submit</span> <span class="attribute">value</span>=<span class="value">"确定"</span>&gt;</span><span class="tag">&lt;/<span class="title">s:submit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">s:form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>success.jsp<br><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="vbscript">&lt;%@ page language=<span class="string">"java"</span> import=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"utf-8"</span>%&gt;</span><span class="xml"></span><br><span class="line"></span><span class="vbscript">&lt;%@ taglib prefix=<span class="string">"s"</span> uri=<span class="string">"/struts-tags"</span> %&gt;</span><span class="xml"></span><br><span class="line"></span><span class="vbscript">&lt;%</span><br><span class="line"><span class="built_in">String</span> path = <span class="built_in">request</span>.getContextPath();</span><br><span class="line"><span class="built_in">String</span> basePath = <span class="built_in">request</span>.getScheme()+<span class="string">"://"</span>+<span class="built_in">request</span>.getServerName()+<span class="string">":"</span>+<span class="built_in">request</span>.getServerPort()+path+<span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><span class="xml"></span><br><span class="line"></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">base</span> <span class="attribute">href</span>=<span class="value">"</span></span></span><span class="vbscript">&lt;%=basePath%&gt;</span><span class="xml"><span class="tag"><span class="value">"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>登录成功<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>登录成功!欢迎您:<span class="tag">&lt;<span class="title">s:property</span> <span class="attribute">value</span>=<span class="value">"user.name"</span>/&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>模型驱动传值JSP页面取值时必须”模型对象名.属性名”</p>
<p>(3)访问Servlet API<br>Struts2的Action不依赖于任何Servelet API,好处是可以脱离Web容器测试Action。<br>但是我们要用到request对象或者session对象时则需要Servelet API。<br>Struts2提供了两种方式访问Servelet API：ActionContext和*Aware接口<br>A.ActionContext<br>ActionContext类常用方法与功能</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>ActionContext getContext()</td>
<td>获取系统的ActionContext实例</td>
</tr>
<tr>
<td>Map getSession()</td>
<td>返回一个Map对象，该对象存入HttpSession实例</td>
</tr>
<tr>
<td>void setSession(Map session)</td>
<td>直接传入一个Map实例，将实例中的key、value对应转换成session的属性名和属性值</td>
</tr>
<tr>
<td>Map getApplication()</td>
<td>返回一个Map对象，该对象存入ServletContext实例</td>
</tr>
<tr>
<td>void setApplication(Map application)</td>
<td>直接传入一个Map实例，将实例中的key、value对应转换成application的属性名与属性值</td>
</tr>
<tr>
<td>Map getParameters()</td>
<td>获得所有的请求参数，类似于调用HttpSeveletRequest对象的getParameterMap方法</td>
</tr>
</tbody>
</table>
<p>ServletActionContext常用方法与功能<br>| 方法                         | 功能                                                  |<br>| —————————–| —————————————————–|<br>| HttpServletRequest getRequest()| 获得Web应用的HttpServletRequest对象|<br>| HttpServletResponse getResponse()| 获得Web应用的HttpServletResponse对象|<br>| ServletContext getServletContext()| 获得Web应用的ServletContext对象|</p>
<p>B.*Aware接口</p>
<table>
<thead>
<tr>
<th>实现接口名称</th>
<th>获得Servlet对象的方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>ApplicationWare</td>
<td>void setApplication(Map application)</td>
</tr>
<tr>
<td>CookiesAware</td>
<td>void setCookiesMap(Map cookies)</td>
</tr>
<tr>
<td>RequestAware</td>
<td>void setRequest(Map request)</td>
</tr>
<tr>
<td>ServletRequestAware</td>
<td>void setServletRequest(HttpServletRequest request)</td>
</tr>
<tr>
<td>ServletResponseAware</td>
<td>void setServletResponse(HttpServletResponse response)</td>
</tr>
<tr>
<td>SessionAware</td>
<td>void setSession(Map session)</td>
</tr>
</tbody>
</table>
<p>(4)Action返回字符串结果原则:<br>A.返回结必须是字符串类型<br>B.除非返回结果对应相同的物理视图资源，否则返回结果不可使用同一字符串<br>C.对于继承了ActionSupport类的Action来说，可以用其中的5个常量代替字符串:SUCCESS,ERROR,NONE,INPUT,LOGIN</p>
<p>(5)Action中定义多个方法<br>自定义方法实现功能时，可以随意命名，但是必须返回类型为String<br>eg:<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">String</span> login() &#123;</span><br><span class="line">	<span class="keyword">if</span>(user<span class="built_in">.</span>getName()<span class="built_in">.</span><span class="keyword">equals</span>(<span class="string">"zhang"</span>)<span class="subst">&amp;&amp;</span><span class="string">"123456"</span><span class="built_in">.</span><span class="keyword">equals</span>(user<span class="built_in">.</span>getPassword()))&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"loginSuccess"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"loginFail"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">String</span> regist()&#123;</span><br><span class="line">	<span class="keyword">if</span>(user<span class="built_in">.</span>getName()<span class="built_in">.</span><span class="keyword">equals</span>(<span class="string">""</span>)<span class="subst">&amp;&amp;</span><span class="string">""</span><span class="built_in">.</span><span class="keyword">equals</span>(user<span class="built_in">.</span>getPassword()))&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"registError"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"registSuccess"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-_u7ED3_u679C_u7C7B_u578B_u4E0E_u89C6_u56FE"><a href="#3-_u7ED3_u679C_u7C7B_u578B_u4E0E_u89C6_u56FE" class="headerlink" title="3.结果类型与视图"></a>3.结果类型与视图</h2><p>Struts2框架通过Action返回字符串在struts.xml中将逻辑视图与物理视图建立一个映射关系。<br>(1)result<br>Struts.xml<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name=<span class="string">"Action名称"</span> <span class="string">class"Action类路径"</span> <span class="keyword">method</span>=<span class="string">"方法名"</span>&gt;//这里的方法名为自己在<span class="type">Action</span>中定义的，不写的话默认执行execute方法</span><br><span class="line">	&lt;<span class="literal">result</span> name=<span class="string">"逻辑视图名称"</span> <span class="keyword">type</span>=<span class="string">"结果类型"</span>&gt;//逻辑视图名称--<span class="type">Action</span>返回的字符串 name不写时默认success,<span class="keyword">type</span>默认dispatcher</span><br><span class="line">		&lt;param name=<span class="string">"参数名称"</span>&gt;参数值&lt;/param&gt;</span><br><span class="line">	&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure></p>
<p>struts-default.xml(struts<em>core</em>…包下)部分代码<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">!-- 结果类型的种类--&gt;     </span><br><span class="line">&lt;<span class="literal">result</span>-types&gt;     </span><br><span class="line">&lt;<span class="literal">result</span>-<span class="keyword">type</span> name=<span class="string">"chain"</span> class=<span class="string">"com.opensymphony.xwork2.ActionChainResult"</span>/&gt;     </span><br><span class="line">&lt;<span class="literal">result</span>-<span class="keyword">type</span> name=<span class="string">"dispatcher"</span> class=<span class="string">"org.apache.struts2.dispatcher.ServletDispatcherResult"</span> default=<span class="string">"true"</span>/&gt;     </span><br><span class="line">&lt;<span class="literal">result</span>-<span class="keyword">type</span> name=<span class="string">"freemarker"</span> class=<span class="string">"org.apache.struts2.views.freemarker.FreemarkerResult"</span>/&gt;     </span><br><span class="line">&lt;<span class="literal">result</span>-<span class="keyword">type</span> name=<span class="string">"httpheader"</span> class=<span class="string">"org.apache.struts2.dispatcher.HttpHeaderResult"</span>/&gt;     </span><br><span class="line">&lt;<span class="literal">result</span>-<span class="keyword">type</span> name=<span class="string">"redirect"</span> class=<span class="string">"org.apache.struts2.dispatcher.ServletRedirectResult"</span>/&gt;     </span><br><span class="line">&lt;<span class="literal">result</span>-<span class="keyword">type</span> name=<span class="string">"redirectAction"</span> class=<span class="string">"org.apache.struts2.dispatcher.ServletActionRedirectResult"</span>/&gt;     </span><br><span class="line">&lt;<span class="literal">result</span>-<span class="keyword">type</span> name=<span class="string">"stream"</span> class=<span class="string">"org.apache.struts2.dispatcher.StreamResult"</span>/&gt;     </span><br><span class="line">&lt;<span class="literal">result</span>-<span class="keyword">type</span> name=<span class="string">"velocity"</span> class=<span class="string">"org.apache.struts2.dispatcher.VelocityResult"</span>/&gt;     </span><br><span class="line">&lt;<span class="literal">result</span>-<span class="keyword">type</span> name=<span class="string">"xslt"</span> class=<span class="string">"org.apache.struts2.views.xslt.XSLTResult"</span>/&gt;     </span><br><span class="line">&lt;<span class="literal">result</span>-<span class="keyword">type</span> name=<span class="string">"plainText"</span> class=<span class="string">"org.apache.struts2.dispatcher.PlainTextResult"</span> /&gt;     </span><br><span class="line">&lt;<span class="literal">result</span>-<span class="keyword">type</span> name=<span class="string">"redirect-action"</span> class=<span class="string">"org.apache.struts2.dispatcher.ServletActionRedirectResult"</span>/&gt;     </span><br><span class="line">&lt;<span class="literal">result</span>-<span class="keyword">type</span> name=<span class="string">"plaintext"</span> class=<span class="string">"org.apache.struts2.dispatcher.PlainTextResult"</span> /&gt;     </span><br><span class="line">&lt;/<span class="literal">result</span>-types&gt;</span><br></pre></td></tr></table></figure></p>
<p>返回类型功能：</p>
<table>
<thead>
<tr>
<th>返回类型名称</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>chain</td>
<td>将两个连续执行的Action串联，通过前一个Action的getXXX()方法与后一个Action的setXXX()方法完成Action值的传递</td>
</tr>
<tr>
<td>dispatcher</td>
<td>返回结果对应视图为JSP,没有配置返回结果时此类型被使用</td>
</tr>
<tr>
<td>freemarker</td>
<td>返回结果对应视图为Freemarker视图模板</td>
</tr>
<tr>
<td>httpheader</td>
<td>返回HTTP头信息，控制特殊HTTP行为</td>
</tr>
<tr>
<td>redirect</td>
<td>重定向到另一个JSP页面</td>
</tr>
<tr>
<td>redirectAction</td>
<td>重定向到另一个Action</td>
</tr>
<tr>
<td>stream</td>
<td>向浏览器返回一个数据流，一般用于文件下载</td>
</tr>
<tr>
<td>velocity</td>
<td>返回结果对应视图Velocity视图模板</td>
</tr>
<tr>
<td>xslt</td>
<td>Action执行完毕属性信息进行交换</td>
</tr>
<tr>
<td>plainText</td>
<td>显示某个页面的原始代码的结果类型</td>
</tr>
<tr>
<td>redirect-action</td>
<td>作用同redirectAction</td>
</tr>
</tbody>
</table>
<p>(2)dispatcher(请求转发)<br>dispatcher返回类型可以设置两个参数：<br>location:指定具体物理视图信息(具体的JSP页面)<br>parse(默认true):对结果配置信息中的OGNL表达式运算替换原来OGNL表达式，这样可以在配置结果时使用动态页面和动态URL，如:my.jsp?name=${name}实际替换为my.jsp?name=zhang.没有特殊需要必须将自动解析OGNL表达式功能关闭，因为Struts2的<s:property>标签获得参数时候也会利用OGNL获得对应参数。<br>结果类型dispatcher时注意：<br>请求转发只能将请求转发到同一个Web应用；<br>利用请求转发浏览器地址栏不会变化；<br>利用请求转发调用者与被调用者之间共享相同的request和response对象，属于同一个访问请求和响应。</s:property></p>
<p>(3)redirect(重定向)<br>重定向不仅可以指定到一个Web应用，还能够指定到任何JSP资源；<br>重定向访问结束时地址栏发生变化；<br>重定向的调用者和被调用者使用各自的request和response对象，属于两个独立的访问请求和响应过程。</p>
<p>重定向与请求转发区别：<br>重定向需要两次请求完成的工作请求转发一次请求就可以完成，如此请求转发不会造成数据丢失而重定向会失去第一次请求中的数据。</p>
<p>(4)chain(Action链)<br>Action链是通过chain拦截器实现的，用一个在Action执行完毕返回结果直接跳转到另一个Action的时候，其可以实现两个Action的数据共享。<br>Action链中Action可以共享数据是因为处于Action链中的所有Action都共享一个值栈(临时储存中间数据)，当Action1执行时会将自身的信息压人值栈，当Action2执行时也会，Action2执行过程中需要Action1的信息则会到值栈获取。<br>Action链必须为第二个Action及后面的所有Action都配置chain拦截器才能正常工作。<br>Action链原理图:<br><img src="/img/structs2/19.png" alt="img"></p>
<p>(5)视图简介<br>Struts2支持视图多种多样，除JSP页面外还有Velocity和Freemarker模板视图、XSLT转换、JsperReport等。<br>实例：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name=<span class="string">"test"</span> class=<span class="string">"com.zhang.Test"</span>&gt;</span><br><span class="line">	&lt;<span class="literal">result</span> <span class="keyword">type</span>=<span class="string">"freemarker"</span>&gt;test.ftl&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="4-struts-properties"><a href="#4-struts-properties" class="headerlink" title="4.struts.properties"></a>4.struts.properties</h2><p>struts.properties定义了Struts2程序运行所必须的常量信息，能够修改Struts2框架的一些默认行为方式，该文件包含一系列key-value键值对，每个key就是一个Struts2属性名，key对应value就是一个struts2属性值，如果一个key对应多个属性值时需要用英文逗号分开。<br>所有在struts.xml文件中通过<constant></constant>标签进行配置,也可以在web.xml文件中通过<init-param></init-param>标签进行配置。<br>由于Struts2已经为我们提供了默认配置文件default.properties,可以不需要struts.properties.<br>需要修改默认信息时可以在工程的WEB-INF/classes文件夹下建立一个struts.properties文件，将修改信息配置到文件中，新配置信息会覆盖系统默认配置信息。<br>几个常用常量配置信息如下:</p>
<table>
<thead>
<tr>
<th>配置信息内容</th>
<th>默认值</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>struts.il8n.encoding</td>
<td>UTF-8</td>
<td>指定默认编码集，对于请求参数带有中文情况，可以设置GBK或者GB2312</td>
</tr>
<tr>
<td>struts.il8n.reload</td>
<td>false</td>
<td>是否每次HTTP请求到达时，都重新加载国际化资源文件</td>
</tr>
<tr>
<td>struts.configuration.xml.reload</td>
<td>false</td>
<td>当struts.xml改动后是否重新加载该文件</td>
</tr>
<tr>
<td>struts.devMode</td>
<td>false</td>
<td>指定是否使用Struts2框架作为开发模式，开发模式下会在运行错误时得到更多的错误信息</td>
</tr>
<tr>
<td>Struts.serve.static.browserCache</td>
<td>true</td>
<td>设置浏览器是否缓存静态页面</td>
</tr>
<tr>
<td>struts.action.extension</td>
<td>action</td>
<td>指定后缀为.action形式的请求可以被Struts2处理，可以配置多个请求配置如.do、.struts2等，配置时多个后缀名需要用逗号隔开</td>
</tr>
<tr>
<td>struts.url.http.port</td>
<td>8080</td>
<td>配置服务器运行时的端口号</td>
</tr>
</tbody>
</table>
<h2 id="5-struts-xml"><a href="#5-struts-xml" class="headerlink" title="5.struts.xml"></a>5.struts.xml</h2><p>(1)构成元素<br>Struts2框架根据struts.xml文件配置信息知道要处理哪些程序，struts.xml配置元素功能如下:</p>
<table>
<thead>
<tr>
<th>配置元素</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>include</td>
<td>引入其他xml配置文件</td>
</tr>
<tr>
<td>constant</td>
<td>配置常量信息</td>
</tr>
<tr>
<td>bean</td>
<td>由容器创建并注入的组件</td>
</tr>
<tr>
<td>package</td>
<td>包含一系列Action及拦截器配置信息，并对其进行统一管理</td>
</tr>
<tr>
<td>default-action-ref</td>
<td>配置默认Action</td>
</tr>
<tr>
<td>default-class-ref</td>
<td>配置默认class</td>
</tr>
<tr>
<td>default-interceptor-ref</td>
<td>配置默认拦截器，对包范围内所有Action有效</td>
</tr>
<tr>
<td>global-results</td>
<td>配置全局结果集，对包范围内所有Action有效</td>
</tr>
<tr>
<td>global-exception-mappings</td>
<td>配置全局异常映射，对包范围内所有Action有效</td>
</tr>
<tr>
<td>result-types</td>
<td>配置自定义返回结果类型</td>
</tr>
<tr>
<td>interceptors</td>
<td>包含一系列拦截器配置信息</td>
</tr>
<tr>
<td>action</td>
<td>包含与Action操作相关的一系列配置信息</td>
</tr>
<tr>
<td>exeception-mapping</td>
<td>配置异常映射，Action范围内有效</td>
</tr>
<tr>
<td>interceptor-ref</td>
<td>配置Action应用的拦截器</td>
</tr>
<tr>
<td>result</td>
<td>配置Action的结果映射</td>
</tr>
</tbody>
</table>
<p>(2)<include><br>工程浩大时需要将一个struts.xml按照一定的规则划分为多个配置文件，再由<include>标签引入其他配置文件<br>eg:<br>struts.xml<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">&lt;<span class="built_in">include</span> <span class="built_in">file</span>=<span class="string">"goods.xml"</span><span class="comment">&gt;//商品</span></span><br><span class="line">&lt;<span class="built_in">include</span> <span class="built_in">file</span>=<span class="string">"users.xml"</span><span class="comment">&gt;//用户</span></span><br><span class="line">&lt;<span class="built_in">include</span> <span class="built_in">file</span>=<span class="string">"order.xml"</span><span class="comment">&gt;//订单</span></span><br><span class="line">&lt;/struts&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></include></include></p>
<p>users.xml<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;struts&gt;</span><br><span class="line">	&lt;package name=<span class="string">"zhang"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line">	&lt;action name=<span class="string">"login"</span> class=<span class="string">"com.zhang.struts2.User"</span>&gt;</span><br><span class="line">		&lt;<span class="literal">result</span>&gt;...</span><br><span class="line">	&lt;/action&gt;</span><br><span class="line">	&lt;/package&gt;</span><br><span class="line">&lt;/struts&gt;</span><br></pre></td></tr></table></figure></p>
<p>(3)<constant><br>由于需要修改的常量信息不多，所以比起在struts.properties或者web.xml中配置更推荐在struts.xml中配置<br>eg:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置编码格式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">constant</span> <span class="attribute">name</span>=<span class="value">"struts.il8n.encoding"</span> <span class="attribute">value</span>=<span class="value">"GB2312"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></constant></p>
<p>(4)<package><br>为了增加系统可维护性，包提供了将多个action组织为一个模块的方式，Struts2框架通过package来管理action、result、interceptor、interceptor-stack等配置信息，一个package可以拓展另外一个package。属性如下:</package></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>是否必须</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>是</td>
<td>包名，作为其他包引用本包的标记,包名必须唯一,一个struts.xml不能出现两个同名的包</td>
</tr>
<tr>
<td>extends</td>
<td>否</td>
<td>设置本包继承其他包，继承父包后会包含父包的所有配置如action、result等，父包必须在子包前定义，struts-default.xml包配置了Struts2的所有内置结果类型、内置拦截器等信息，所以经常继承之后就不用声明直接使用那些内置信息了</td>
</tr>
<tr>
<td>namespace</td>
<td>否</td>
<td>设置包的命名空间，实际是在包基础上对Action的进一步划分，可以解决Action重名问题(不同命名空间可以使用相同Action名)</td>
</tr>
<tr>
<td>abstract</td>
<td>否</td>
<td>设置为抽象包,包被设置为抽象包时不能包含Action配置信息，可以被其他包继承</td>
</tr>
</tbody>
</table>
<p>namespace补充:<br><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong>如下有待补充<br>使用命名空间URL将改变<br>运行如下正确:<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">struts.xml:</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">	&lt;package name=<span class="string">"mySpace"</span> namespace=<span class="string">"/"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line">		&lt;action name=<span class="string">"login"</span> class=<span class="string">"com.zhang.struts2.UserAction"</span> <span class="keyword">method</span>=<span class="string">"login"</span>&gt;</span><br><span class="line">		&lt;<span class="literal">result</span> name=<span class="string">"success"</span>&gt;success.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">		&lt;<span class="literal">result</span> name=<span class="string">"fail"</span>&gt;fail.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">		&lt;/action&gt;</span><br><span class="line">	&lt;/package&gt;</span><br><span class="line">&lt;/struts&gt;  </span><br><span class="line"></span><br><span class="line">index.jsp:</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;s:form action=<span class="string">"login"</span> <span class="keyword">method</span>=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;s:textfield name=<span class="string">"user.name"</span> label=<span class="string">"用户名"</span>&gt;&lt;/s:textfield&gt;</span><br><span class="line">    &lt;s:textfield name=<span class="string">"user.password"</span> label=<span class="string">"密码"</span>&gt;&lt;/s:textfield&gt;</span><br><span class="line">    &lt;s:submit value=<span class="string">"确定"</span>&gt;&lt;/s:submit&gt;</span><br><span class="line">    &lt;/s:form&gt;</span><br><span class="line">  &lt;/body&gt;  </span><br><span class="line">或者</span><br><span class="line">   &lt;s:form action=<span class="string">"login"</span> namespace=<span class="string">"/"</span> <span class="keyword">method</span>=<span class="string">"post"</span>&gt;</span><br><span class="line">或者</span><br><span class="line">	&lt;s:form action=<span class="string">"login"</span> namespace=<span class="string">"/space"</span> <span class="keyword">method</span>=<span class="string">"post"</span>&gt;</span><br><span class="line">或者</span><br><span class="line">   &lt;s:form action=<span class="string">"login!login"</span> namespace=<span class="string">"/space"</span> <span class="keyword">method</span>=<span class="string">"post"</span>&gt; //login!login---<span class="type">Action</span>名称！方法名称</span><br></pre></td></tr></table></figure></p>
<p>运行如下错误:<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">struts.xml:</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">	&lt;package name=<span class="string">"mySpace"</span> namespace=<span class="string">"/space"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line">		&lt;action name=<span class="string">"login"</span> class=<span class="string">"com.zhang.struts2.UserAction"</span> <span class="keyword">method</span>=<span class="string">"login"</span>&gt;</span><br><span class="line">		&lt;<span class="literal">result</span> name=<span class="string">"success"</span>&gt;success.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">		&lt;<span class="literal">result</span> name=<span class="string">"fail"</span>&gt;fail.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">		&lt;/action&gt;</span><br><span class="line">	&lt;/package&gt;</span><br><span class="line">&lt;/struts&gt;    </span><br><span class="line"></span><br><span class="line">index.jsp:</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;s:form action=<span class="string">"login"</span> namespace=<span class="string">"/space"</span> <span class="keyword">method</span>=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;s:textfield name=<span class="string">"user.name"</span> label=<span class="string">"用户名"</span>&gt;&lt;/s:textfield&gt;</span><br><span class="line">    &lt;s:textfield name=<span class="string">"user.password"</span> label=<span class="string">"密码"</span>&gt;&lt;/s:textfield&gt;</span><br><span class="line">    &lt;s:submit value=<span class="string">"确定"</span>&gt;&lt;/s:submit&gt;</span><br><span class="line">    &lt;/s:form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br></pre></td></tr></table></figure></p>
<p>(5)<action>与<result></result></action></p>
<p><action>标签</action></p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>是否必须</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>是</td>
<td>请求的Action名称</td>
</tr>
<tr>
<td>class</td>
<td>否</td>
<td>Action处理类对应的具体路径</td>
</tr>
<tr>
<td>method</td>
<td>否</td>
<td>指定Action中的方法名,没有设置是会默认调用execute方法</td>
</tr>
<tr>
<td>converter</td>
<td>否</td>
<td>指定Action使用的类型转换器</td>
</tr>
</tbody>
</table>
<p><result>标签</result></p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>是否必须</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>否</td>
<td>对应Action返回逻辑视图的名称，默认为success</td>
</tr>
<tr>
<td>type</td>
<td>否</td>
<td>返回结果类型，默认为dispatcher</td>
</tr>
</tbody>
</table>
<p>通配符使用：<br>原始代码如下:<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;struts&gt;</span><br><span class="line">	&lt;package name=<span class="string">"mySpace"</span> namespace=<span class="string">"/"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line">		&lt;action name=<span class="string">"login"</span> class=<span class="string">"com.zhang.struts2.UserAction"</span> <span class="keyword">method</span>=<span class="string">"login"</span>&gt;</span><br><span class="line">		&lt;<span class="literal">result</span> name=<span class="string">"st1"</span>&gt;st1.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">		&lt;<span class="literal">result</span> name=<span class="string">"st2"</span>&gt;st2.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">		&lt;<span class="literal">result</span> name=<span class="string">"st3"</span>&gt;st3.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">		...</span><br><span class="line">		&lt;/action&gt;</span><br><span class="line">	&lt;/package&gt;</span><br><span class="line">&lt;/struts&gt;</span><br></pre></td></tr></table></figure></p>
<p>大量的result语句，使用通配符如下：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Test</span>.java</span><br><span class="line">public class <span class="type">Test</span> extends <span class="type">ActionSupport</span>&#123;</span><br><span class="line">	public <span class="type">String</span> st1()&#123;</span><br><span class="line">			<span class="keyword">return</span> st1;</span><br><span class="line">		&#125;</span><br><span class="line">	public <span class="type">String</span> st2()&#123;</span><br><span class="line">			<span class="keyword">return</span> st2;</span><br><span class="line">		&#125;</span><br><span class="line">	public <span class="type">String</span> st3()&#123;</span><br><span class="line">			<span class="keyword">return</span> st3;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struts.xml</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">	&lt;package name=<span class="string">"mySpace"</span> namespace=<span class="string">"/"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line">		&lt;action name=<span class="string">"st*"</span> class=<span class="string">"com.zhang.struts2.Test"</span> <span class="keyword">method</span>=<span class="string">"st&#123;1&#125;"</span>&gt;</span><br><span class="line">		&lt;!--  动态获取返回结果，其中<span class="string">"&#123;1&#125;"</span>取得的是<span class="string">"*"</span>的内容 --&gt;</span><br><span class="line">		&lt;<span class="literal">result</span> name=<span class="string">"st&#123;1&#125;"</span>&gt;st&#123;<span class="number">1</span>&#125;.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">		&lt;/action&gt;</span><br><span class="line">	&lt;/package&gt;</span><br><span class="line">&lt;/struts&gt;</span><br></pre></td></tr></table></figure></p>
<p>缺陷:Action请求名称为”st*”则方法名称和逻辑视图名称必须以st开头!<br>每个人就根据需要选择是否使用!</p>
<p>(6)<exception-mapping>与<global-exception-mappings><br>用来配置发生异常时对应的视图信息！一个是Action范围内的，一个是包范围内的。<br>属性:</global-exception-mappings></exception-mapping></p>
<table>
<thead>
<tr>
<th>属性名称</th>
<th>是否必须</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>否</td>
<td>用来标识该异常配置信息</td>
</tr>
<tr>
<td>result</td>
<td>是</td>
<td>指定发生异常时显示的视图信息</td>
</tr>
<tr>
<td>exception</td>
<td>是</td>
<td>指定异常类型</td>
</tr>
</tbody>
</table>
<p>(7)<default-class-ref><br>配置时没有为某个Action指定class时，系统将自动引用<default-class-ref>标签指定的类<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;struts&gt;</span><br><span class="line">	&lt;package name=<span class="string">"mySpace"</span> namespace=<span class="string">"/"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line">		&lt;!-- 指定默认class为<span class="type">Hello</span> --&gt;</span><br><span class="line">		&lt;default-class-<span class="keyword">ref</span> class=<span class="string">"com.zhang.struts2.Hello"</span>&gt;</span><br><span class="line">		&lt;action name=<span class="string">"st1"</span>&gt;</span><br><span class="line">			&lt;<span class="literal">result</span>&gt;index.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">		&lt;/action&gt;</span><br><span class="line">		&lt;action name=<span class="string">"st2"</span>&gt;</span><br><span class="line">			&lt;<span class="literal">result</span>&gt;index.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">		&lt;/action&gt;</span><br><span class="line">	&lt;/package&gt;</span><br><span class="line">&lt;/struts&gt;</span><br></pre></td></tr></table></figure></default-class-ref></default-class-ref></p>
<p>st1和st2都没有指定class信息，当浏览器输入<a href="http://localhost:8080/MyWeb/st1.action与http://localhost:8080/MyWeb/st2.action执行结果相同。" target="_blank" rel="external">http://localhost:8080/MyWeb/st1.action与http://localhost:8080/MyWeb/st2.action执行结果相同。</a><br>如上手动指定类是必须包含execute方法，指定后默认的将被覆盖。</p>
<p>(8)<default-action-ref><br>为了避免不理想的404页面出现，可以使用<default-action-ref>标签指定一个默认的Action处理。<br>eg:<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;struts&gt;</span><br><span class="line">	&lt;package name=<span class="string">"mySpace"</span> namespace=<span class="string">"/"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line">	&lt;default-action-<span class="keyword">ref</span> name=<span class="string">"actionError"</span>&gt;</span><br><span class="line">		&lt;action name=<span class="string">"actionError"</span>&gt;</span><br><span class="line">			&lt;<span class="literal">result</span>&gt;actionError.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">		&lt;/action&gt;</span><br><span class="line">	&lt;/package&gt;</span><br><span class="line">&lt;/struts&gt;</span><br></pre></td></tr></table></figure></default-action-ref></default-action-ref></p>
<p>如此可以用actionError.jsp</p>
<p>(9)<default-interceptor-ref><br>用来设置整个包范围内全部Action所要应用的默认拦截器信息</default-interceptor-ref></p>
<p>(10)<interceptors><br>向Struts2框架中注册拦截器或者拦截器栈，多用于自定义拦截器或者拦截器的注册。<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;interceptors&gt;</span><br><span class="line">&lt;interceptor name=<span class="string">"拦截器名"</span> class=<span class="string">"拦截器类"</span>/&gt;</span><br><span class="line">	&lt;interceptor-stack name <span class="string">"拦截器栈名"</span>&gt;</span><br><span class="line">		&lt;interceptor-<span class="keyword">ref</span> name=<span class="string">"拦截器名"</span>/&gt;</span><br><span class="line">	&lt;/interceptor-stack&gt;</span><br><span class="line">&lt;/interceptors&gt;</span><br></pre></td></tr></table></figure></interceptors></p>
<p>(11)<interceptor-ref><br>对其所在的Action添加拦截器功能，为某个Action单独添加拦截器后<default-interceptor-ref>拦截器对这个Action不在起作用。</default-interceptor-ref></interceptor-ref></p>
<p>(12)<global-results><br>设置包范围内的全局结果集。多个Action返回相同的逻辑视图情况下可以通过<global-results>标签统一配置这些逻辑视图所对应物理视图。<br>eg:<br>如下Test1和Test2返回为“test”都调到index.jsp<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;struts&gt;</span><br><span class="line">	&lt;package name=<span class="string">"mySpace"</span> namespace=<span class="string">"/"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line">		&lt;global-results&gt;</span><br><span class="line">			&lt;<span class="literal">result</span> name=<span class="string">"test"</span>&gt;/index.jsp&lt;/<span class="literal">result</span>&gt;</span><br><span class="line">		&lt;/global-results&gt;</span><br><span class="line"></span><br><span class="line">		&lt;action name=<span class="string">"test1"</span> class=<span class="string">"com.zhang.struts2.Test1"</span>&gt;</span><br><span class="line">		&lt;/action&gt;</span><br><span class="line"></span><br><span class="line">		&lt;action name=<span class="string">"test2"</span> class=<span class="string">"com.zhang.struts2.Test2"</span>&gt;</span><br><span class="line">		&lt;/action&gt;</span><br><span class="line">	&lt;/package&gt;</span><br><span class="line">&lt;/struts&gt;</span><br></pre></td></tr></table></figure></global-results></global-results></p>
<p>注意:如果test1的Action添加了<result name="test">/test.jsp</result>则跳转test.jsp</p>
<h2 id="6-web-xml"><a href="#6-web-xml" class="headerlink" title="6.web.xml"></a>6.web.xml</h2><p>web.xml是Web应用的核心配置文件，用于配置Servelet、过滤器Filter、监听器Listenter及Welcome-File等，任何Web框架想要与Web集合就必须依靠web.xml进行设置，核心过滤器FilterDispatcher是Struts2框架的基础，充当中央控制器作用，ActionContextCleanUp过滤器是Struts2的一个常用辅助类，主要用于清理当前线程的ActionContext和Dispatcher防止内存泄漏。web.xml通常只需要配置这两个过滤器就行。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">web-app</span> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attribute">xmlns</span>=<span class="value">"http://java.sun.com/xml/ns/javaee"</span> <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span> <span class="attribute">version</span>=<span class="value">"3.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">display-name</span>&gt;</span>MyWeb<span class="tag">&lt;/<span class="title">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span><br><span class="line">  &lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;struts2&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;</span><br><span class="line">  &lt;/filter&gt;</span><br><span class="line">  &lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;struts2&lt;/filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/filter-mapping&gt;</span><br><span class="line">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  配置Struts2的ActionContextCleanUp过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">filter</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>struts2-cleanup<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="title">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ActionContextCleanUp<span class="tag">&lt;/<span class="title">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>struts2-cleanup<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  配置Struts2的核心过滤器FilterDispatcher --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">filter</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="title">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.FilterDispatcher<span class="tag">&lt;/<span class="title">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">filter-mapping</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="title">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="title">filter-name</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>备注:<br>FilterDispatcher是struts2.0.x到2.1.2版本的核心过滤器!  StrutsPrepareAndExecuteFilter是自2.1.3开始就替代了FilterDispatcher的!<br>如果我们自己定义过滤器的话, 是要放在strtus2的过滤器之前的, 如果放在struts2过滤器之后,你自己的过滤器对action的过滤作用就废了,不会有效!除非你是访问jsp/html!  那我现在有需求, 我必须使用Action的环境,而又想在执行action之前拿filter做一些事, 用FilterDispatcher是做不到的! 那么StrutsPrepareAndExecuteFilter可以把他拆分成StrutsPrepareFilter和StrutsExecuteFilter,可以在这两个过滤器之间加上我们自己的过滤器!</p>
<h2 id="7-_u503C_u6808"><a href="#7-_u503C_u6808" class="headerlink" title="7.值栈"></a>7.值栈</h2><p>Struts2的值栈是一个存放对象的堆栈，对象以map的形式储存在这个堆栈中，并且该堆栈中的对象属性的数值可以通过表达式语言获得。<br>值栈储存内容都是对象，储存对象包括临时对象、模型对象、Action对象、命名对象。<br>临时对象:在程序执行过程中由容器自动创建并储存到值栈中，应用结束时该对象被清空<br>模型对象:仅在Action使用模型驱动方式传值的时候，当Action被请求时，modeldriven拦截器会自动从Action中获得模型对象，并将对象放在值栈对应的Action对象上，JSP页面可以到值栈找到模型对象获得数值<br>Action对象：每个Action请求到来时，容器都会先创建一个此Action对象并存入值栈，该对象携带所有与Action执行过程有关的信息<br>命名对象:主要包括Servlet作用范围内相关的对象信息，比如request、session、application等<br>遍历顺序从栈顶开始依次是临时对象、模型对象、Action对象、命名对象。模型对象放Action对象前面因为请求需要模型携带数据时可以先找set()方法，没有则查找模型对象对应的Action对象。</p>
<h2 id="8-OGNL"><a href="#8-OGNL" class="headerlink" title="8.OGNL"></a>8.OGNL</h2><p>OGNL(Object-Graph Navigation Language)图对象导航语言，是表达式语言的一种，我们是通过OGNL来访问值栈中信息的。<br>(1)对list、map操作<br>| list/map | java访问方式     | OGNL访问方式 |<br>| ———| —————-| ————|<br>| 创建list | List list=new ArrayList();list.add(“a”);list.add(“b”);list.add(c);| {“a”,”b”,”c”}|<br>| 访问list | list.get(i);list.size();list.isEmpty();| list[i];list.size;list.isEmpty;|<br>| 创建map  | Map map=new HashMap();map.put(“one”,”name”);map.put(“two”,”passwd”);map.put(“three”,”age”);| #{“one”:”name”,”passwd”;”three”:”age”} |<br>| 访问map  | map.get(“one”);map.size();map.isEmpty();| map[‘one’];map.size;map.isEmpty;|</p>
<p>导航图深度:<br><img src="/img/structs2/20.png" alt="img"><br>A,B,C对象对应导航图深度值分别0,1,2;<br>获得A,B,C对象的name属性分别为[0].name;[1].name;[2].name;</p>
<h1 id="u7B2C_u56DB_u7AE0__u62E6_u622A_u5668"><a href="#u7B2C_u56DB_u7AE0__u62E6_u622A_u5668" class="headerlink" title="第四章 拦截器"></a>第四章 拦截器</h1><h2 id="1-_u62E6_u622A_u5668"><a href="#1-_u62E6_u622A_u5668" class="headerlink" title="1.拦截器"></a>1.拦截器</h2><p>(1)介绍<br>拦截器是动态拦截Action调用的对象，Struts2配置应用拦截器只需要在struts.xml中添加或者删除拦截器配置信息即可。<br>struts2内置（struts-default.xml）拦截器:</p>
<table>
<thead>
<tr>
<th>拦截器</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>alias</td>
<td>对不同请求中的相同参数进行命名转换</td>
</tr>
<tr>
<td>autowiring</td>
<td>框架自动寻找相应的Bean并完成设置工作</td>
</tr>
<tr>
<td>chain</td>
<td>构建Action链，当使用<result type="chain">进行配置时，当前Action可以使用前一个已经执行结束的Action的属性，实现Action链数据传递</result></td>
</tr>
<tr>
<td>checkbox</td>
<td>否则检查checkbox表单控件是否被选中，未被选中时，提交一个默认值(通常false)</td>
</tr>
<tr>
<td>cookie</td>
<td>把带有特定名/值映射关系的cookie注射到Action中</td>
</tr>
<tr>
<td>conversionError</td>
<td>处理类型转换时的错误信息，把ActionContext中的错误信息转换为相应的Action字段的错误信息并保存,需要时可以通过视图显示相关错误信息</td>
</tr>
<tr>
<td>createSession</td>
<td>自动创建一个HttpSession对象，有些拦截器必须要有HttpSession对象才能工作(eg:TokenInterceptor)</td>
</tr>
<tr>
<td>debugging</td>
<td>负责调试，当页面中使用<s:debug>标签时，可以获得值栈、上下文等信息</s:debug></td>
</tr>
<tr>
<td>execAndWait</td>
<td>在后台执行Action,并将等待画面传送给用户</td>
</tr>
<tr>
<td>exception</td>
<td>提供处理异常功能，将异常映射为结果</td>
</tr>
<tr>
<td>fileUpload</td>
<td>负责文件上传</td>
</tr>
<tr>
<td>i18n</td>
<td>把指定Locale信息放入Session</td>
</tr>
<tr>
<td>logger</td>
<td>输出Action名称</td>
</tr>
<tr>
<td>store</td>
<td>储存或者访问实现ValidationAware接口的Action类出现的消息，错误，字段错误等</td>
</tr>
<tr>
<td>model-driven</td>
<td>某个Action实现了ModelDriven接口时，把getModel()方法的结果放入值栈中</td>
</tr>
<tr>
<td>scoped-model-driven</td>
<td>某个Action实现了ScopedModelDriven接口,拦截器获得指定的模型，通过setModel()方法将其传送到Action</td>
</tr>
<tr>
<td>params</td>
<td>解析HTTP请求参数将其传送给Action,设置成Action对应的属性值</td>
</tr>
<tr>
<td>prepare</td>
<td>处理Action执行之前所要执行的操作，Action需要实现Preparable接口，在Action执行之前调用prepare()方法</td>
</tr>
<tr>
<td>scope</td>
<td>将一些公有参数信息储存到Session作用域或者Application作用域，当Action需要时，拦截器检查并从Session或者Application中将其取出</td>
</tr>
<tr>
<td>servletConfig</td>
<td>提供对HttpServletRequest和HttpServletResponse的访问机制</td>
</tr>
<tr>
<td>staticParams</td>
<td>把定义在xml中的<action>标签下<param>标签中的参数传入Action</action></td>
</tr>
<tr>
<td>roles</td>
<td>检查用户是否具有JAAS授权，只有授权用户才可以调用相应的Action</td>
</tr>
<tr>
<td>timer</td>
<td>输出Action的执行时间</td>
</tr>
<tr>
<td>token</td>
<td>检查传入到Action中的Token信息，防止重复提交</td>
</tr>
<tr>
<td>tokenSession</td>
<td>功能和TokenInterceptor相似,只不过将无效的Token信息存放在Session中</td>
</tr>
<tr>
<td>validation</td>
<td>执行定义在xxAction-validation.xml中的校验器，完成数据校验</td>
</tr>
<tr>
<td>workflow</td>
<td>调用Action的validate方法进行校验，校验失败返回input视图</td>
</tr>
<tr>
<td>N/A</td>
<td>从参数列表删除不必要的参数</td>
</tr>
<tr>
<td>profiling</td>
<td>通过参数激活profile</td>
</tr>
</tbody>
</table>
<p>(2)部署拦截器<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">interceptors</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">interceptor</span> <span class="attribute">name</span>=<span class="value">"拦截器名"</span> <span class="attribute">class</span>=<span class="value">"拦截器类"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"参数名"</span>&gt;</span>参数值<span class="tag">&lt;/<span class="title">param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">interceptor</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">interceptor</span> <span class="attribute">name</span>=<span class="value">"拦截器名"</span> <span class="attribute">class</span>=<span class="value">"拦截器类"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"参数名"</span>&gt;</span>参数值<span class="tag">&lt;/<span class="title">param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">interceptor</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="title">interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>(3)添加拦截器<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;action name=<span class="string">"Action名"</span> class=<span class="string">"Action类"</span>&gt;</span><br><span class="line">	&lt;interceptor-<span class="keyword">ref</span> name=<span class="string">"拦截器名"</span>&gt;</span><br><span class="line">		&lt;param name=<span class="string">"参数名"</span>&gt;参数值&lt;/param&gt;</span><br><span class="line">	&lt;/interceptor-<span class="keyword">ref</span>&gt;</span><br><span class="line">	&lt;interceptor-<span class="keyword">ref</span> name=<span class="string">"拦截器名"</span>&gt;</span><br><span class="line">		&lt;param name=<span class="string">"参数名"</span>&gt;参数值&lt;/param&gt;</span><br><span class="line">	&lt;/interceptor-<span class="keyword">ref</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure></p>
<p>(4)实例<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="2-_u62E6_u622A_u5668_u6808"><a href="#2-_u62E6_u622A_u5668_u6808" class="headerlink" title="2.拦截器栈"></a>2.拦截器栈</h2><h2 id="3-_u5E94_u7528"><a href="#3-_u5E94_u7528" class="headerlink" title="3.应用"></a>3.应用</h2><h1 id="u9644_u5F55_uFF1A"><a href="#u9644_u5F55_uFF1A" class="headerlink" title="附录："></a>附录：</h1><h2 id="1-_u914D_u7F6Edtd_u7684_u672C_u5730url_u6821_u9A8C"><a href="#1-_u914D_u7F6Edtd_u7684_u672C_u5730url_u6821_u9A8C" class="headerlink" title="1.配置dtd的本地url校验"></a>1.配置dtd的本地url校验</h2><p>一般struts.xml中有”<a href="http://struts.apache.org/dtds/struts-2.1.dtd&quot;需要联网才能提示，可以添加本地，方法如下：" target="_blank" rel="external">http://struts.apache.org/dtds/struts-2.1.dtd&quot;需要联网才能提示，可以添加本地，方法如下：</a><br>将struts2-core-2.1.8解压到E盘，在myeclipse中-&gt;windows-&gt;preferences-&gt;搜索框输入xml-&gt;XML Catalog  -&gt;User Specified Entries里面自己配置个dtd的本地url校验，这样就不用去联网校验了</p>
<hr>
<p>更新中…………</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要内容：<br>]]>
    
    </summary>
    
      <category term="Struts 2" scheme="http://www.bestzhangjin.com/tags/Struts-2/"/>
    
      <category term="Web框架" scheme="http://www.bestzhangjin.com/tags/Web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Java" scheme="http://www.bestzhangjin.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JSP网站开发]]></title>
    <link href="http://www.bestzhangjin.com/2016/03/12/jsp/"/>
    <id>http://www.bestzhangjin.com/2016/03/12/jsp/</id>
    <published>2016-03-12T10:53:03.000Z</published>
    <updated>2017-10-11T13:41:52.942Z</updated>
    <content type="html"><![CDATA[<p>主要内容：环境搭建，网页布局，JDBC，Servlet<br><a id="more"></a></p>
<h1 id="u7B2C_u4E00_u7AE0__u73AF_u5883_u642D_u5EFA"><a href="#u7B2C_u4E00_u7AE0__u73AF_u5883_u642D_u5EFA" class="headerlink" title="第一章 环境搭建"></a>第一章 环境搭建</h1><h2 id="1-JDK"><a href="#1-JDK" class="headerlink" title="1.JDK"></a>1.JDK</h2><p>JDK(Java Development Kit) 是 Java 语言的软件开发工具包(SDK)。<br>J2SE：(Java SE/SE)，标准版，是我们通常用的一个版本;<br>J2EE:(Java EE/EE)，企业版，使用这种JDK开发J2EE应用程序;<br>J2ME:(Java ME/ME)，主要用于移动设备、嵌入式设备上的java应用程序。<br>JDK用于编译Java程序，JRE用于运行Java程序。</p>
<p>官网下载：<a href="http://www.oracle.com/technetwork/java/javaee/downloads/index.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javaee/downloads/index.html</a><br>安装会连续安装jdk和jre，安装好后配置环境变量：<br>JAVA_HOME： jdk的安装目录(如E:\Java\jdk)<br>Path： %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;（注意原Path末尾有没有;号，没有则先输入）<br>CLASSPATH： .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar（注意最前面有一点）</p>
<p>配置完后cmd下输入java和javac命令没有提示找不到命令则安装配置成功！</p>
<h2 id="2-Myeclipse"><a href="#2-Myeclipse" class="headerlink" title="2.Myeclipse"></a>2.Myeclipse</h2><p>在eclipse 基础上加上自己的插件开发而成的功能强大的企业级集成开发环境，主要用于Java、Java EE以及移动应用的开发。<br>官网下载： <a href="http://www.myeclipsecn.com/" target="_blank" rel="external">http://www.myeclipsecn.com/</a></p>
<p>安装过程自己网上查，特别多！</p>
<h2 id="3-Tomcat"><a href="#3-Tomcat" class="headerlink" title="3.Tomcat"></a>3.Tomcat</h2><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。Tomcat和IIS等Web服务器一样，具有处理HTML页面的功能，另外它还是一个Servlet和JSP容器，独立的Servlet容器是Tomcat的默认模式。不过，Tomcat处理静态HTML的能力不如Apache服务器。常用服务器还有Nginx等。<br>官网下载： <a href="https://tomcat.apache.org/" target="_blank" rel="external">https://tomcat.apache.org/</a></p>
<p>安装前首先需要配置好java的环境。与一般软件安装无异，直接安装就可以。<br>安装好打开tomcat安装目录的bin 文件夹，找到里面的执行文件，运行，然后在浏览器上输入本地地址：http：//localhost:8080  或者  http：//127.0.0.1:8080 看到tomcat默认界面则安装成功！</p>
<h2 id="4-Mysql"><a href="#4-Mysql" class="headerlink" title="4.Mysql"></a>4.Mysql</h2><p>本节详见本博客的mysql篇，有详细介绍！</p>
<h2 id="5-_u5C0F_u7ED3"><a href="#5-_u5C0F_u7ED3" class="headerlink" title="5.小结"></a>5.小结</h2><p>本章环境搭建好了就可以进行开发了，Mysql中注意界面化软件连接时尽量用127.0.0.1而不是localhost.有时候用localhost不识别！</p>
<h1 id="u7B2C_u4E8C_u7AE0__u7F51_u9875_u5E03_u5C40_u4E0E_u4FEE_u9970-HTML+CSS+JavaScript"><a href="#u7B2C_u4E8C_u7AE0__u7F51_u9875_u5E03_u5C40_u4E0E_u4FEE_u9970-HTML+CSS+JavaScript" class="headerlink" title="第二章 网页布局与修饰-HTML+CSS+JavaScript"></a>第二章 网页布局与修饰-HTML+CSS+JavaScript</h1><p>本章不讲，详见本博客的Html+css+javascript网页布局篇！</p>
<h1 id="u7B2C_u4E09_u7AE0_JDBC"><a href="#u7B2C_u4E09_u7AE0_JDBC" class="headerlink" title="第三章 JDBC"></a>第三章 JDBC</h1><h2 id="1-_u4ECB_u7ECD_u4E0E_u6D41_u7A0B"><a href="#1-_u4ECB_u7ECD_u4E0E_u6D41_u7A0B" class="headerlink" title="1.介绍与流程"></a>1.介绍与流程</h2><p>本章不懂的参考对应博客文章mysql<br>JDBC（Java DataBase Connectivity）是Sun公司开发的针对数据库应用程序的API(应用程序编程接口)，其由Java编写跨平台！<br>流程：<br>(1)加载JDBC驱动（首先要导入驱动包）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">Class</span><span class="class">.forName</span>("<span class="tag">com</span><span class="class">.mysql</span><span class="class">.jdbc</span><span class="class">.Driver</span>");</span><br></pre></td></tr></table></figure></p>
<p>(2)创建连接<br><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">String url</span>=<span class="string">"jdbc:mysql://localhost:3306/test"</span>;  <span class="comment">//3306--端口 test:数据库名</span></span><br><span class="line"><span class="constant">String username</span>=<span class="string">"root"</span>;<span class="comment">//数据库用户名</span></span><br><span class="line"><span class="constant">String password</span>=<span class="string">""</span>;<span class="comment">//数据库的密码</span></span><br><span class="line"><span class="constant">Connection conn</span>=DriverManeger.getConnection(url,username,password);</span><br></pre></td></tr></table></figure></p>
<p>(3)获得java.sql.Statement实例<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">Statement</span> s=conn.createStatement();</span><br><span class="line"><span class="title">PreaparedStatement</span> p=conn.prepareStatement(sql);</span><br><span class="line"><span class="title">CallableStatement</span> c=conn.prepareCall(<span class="string">"&#123;CALL demoSp(?,?)&#125;"</span>);</span><br></pre></td></tr></table></figure></p>
<hr>
<p>执行静态SQL语句：Statement<br>执行动态SQL语句：PreparedStatement<br>执行数据库储存过程：CallableStatement<br>(4)执行SQL语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ResultSet rs=s.executeQuery(String sql);//查询并返回一个ResultSet对象</span><br><span class="line">int rows=s.executeUpdate(String sql);//执行<span class="operator"><span class="keyword">INSERT</span>、<span class="keyword">UPDATE</span>、<span class="keyword">DELETE</span>、<span class="keyword">SQL</span> <span class="keyword">DDL</span>(数据定义)语句，返回影响行数</span><br><span class="line"><span class="built_in">boolean</span> flag=s.<span class="keyword">execute</span>(<span class="keyword">String</span> <span class="keyword">sql</span>);</span>//用于执行返回多个结果集、多个更新计数或二者组合的语句</span><br></pre></td></tr></table></figure></p>
<p>(5)处理结果<br>ResultSet方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>next()</td>
<td>移动到ResultSet下一行</td>
</tr>
<tr>
<td>first()</td>
<td>移动到ResultSet第一行</td>
</tr>
<tr>
<td>last()</td>
<td>移动到ResultSet最后一行</td>
</tr>
<tr>
<td>previous()</td>
<td>移动到ResultSet上一行</td>
</tr>
</tbody>
</table>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String name=rs.getString(<span class="string">"name"</span>);<span class="comment">//根据字段名获取</span></span><br><span class="line">String passwd=rs.getString(<span class="number">3</span>);<span class="comment">//根据列数获取 ------ 此方法更加高效</span></span><br><span class="line"><span class="keyword">int</span> id=rs.getInt(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>(6)关闭JDBC对象<br>关闭顺序是声明顺序的反序<br>(1)关闭记录集<br>(2)关闭声明<br>(3)关闭连接对象<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">rs</span><span class="class">.close</span>();</span><br><span class="line"><span class="tag">s</span><span class="class">.close</span>();</span><br><span class="line"><span class="tag">conn</span><span class="class">.close</span>();</span><br></pre></td></tr></table></figure></p>
<h2 id="2-JDBC_u6570_u636E_u7C7B_u578B"><a href="#2-JDBC_u6570_u636E_u7C7B_u578B" class="headerlink" title="2.JDBC数据类型"></a>2.JDBC数据类型</h2><p>本节参考 <a href="http://www.yiibai.com/jdbc/jdbc_data_types.html" target="_blank" rel="external">http://www.yiibai.com/jdbc/jdbc_data_types.html</a></p>
<h2 id="3-JDBC_u4E8B_u52A1_u5904_u7406"><a href="#3-JDBC_u4E8B_u52A1_u5904_u7406" class="headerlink" title="3.JDBC事务处理"></a>3.JDBC事务处理</h2><p>(1)JDBC事务处理-原子操作<br>一般应用是多表联系操作，如银行取款。<br>事务，是指一组原子操作(一组SQL语句执行)的工作单元，要么全部执行，要么全部失败。<br>JDBC事务步骤：<br>A.设置事务提交方式为非自动提交<br>B.将需要添加的代码放try-catch块内<br>C.try块内添加提交操作，提交事务<br>D.catch块内添加回滚事务，表示操作出现异常，撤销事务<br>E.设置事务提交方式为自动提交<br>实例：<br>操作前信息表<br>stu</p>
<table>
<thead>
<tr>
<th>id</th>
<th>stuid</th>
<th>name</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>001</td>
<td>zhang</td>
</tr>
</tbody>
</table>
<p>stuinfo</p>
<table>
<thead>
<tr>
<th>sti_id</th>
<th>city</th>
</tr>
</thead>
<tbody>
<tr>
<td>001</td>
<td>beijin</td>
</tr>
<tr>
<td>002</td>
<td>shanghai</td>
</tr>
</tbody>
</table>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JdbcTransation</span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">		java.sql.Connection conn=<span class="keyword">null</span>;</span><br><span class="line">		PreparedStatement pStatement=<span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">			conn=DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/test"</span>,<span class="string">"root"</span>,<span class="string">""</span>);</span><br><span class="line">			String sql=<span class="string">"INSERT INTO stuinfo(stu_id,city) VALUES(?,?)"</span>;</span><br><span class="line">			String sql2=<span class="string">"DELETE FROM stu WHERE id=1"</span>;</span><br><span class="line"></span><br><span class="line">			conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">			pStatement=conn.prepareStatement(sql);</span><br><span class="line">			pStatement.setString(<span class="number">1</span>,<span class="string">"003"</span>);<span class="comment">//设置学号001</span></span><br><span class="line">			pStatement.setString(<span class="number">2</span>,<span class="string">"shenzhen"</span>);<span class="comment">//家庭地址：北京</span></span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"第一条语句执行..."</span>);</span><br><span class="line">			pStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">			pStatement=conn.prepareStatement(sql2);</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"第二条语句执行..."</span>);</span><br><span class="line">			pStatement.executeUpdate();</span><br><span class="line">			<span class="comment">//pStatement.executeQuery();</span></span><br><span class="line">			conn.commit();	<span class="comment">//提交事务</span></span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"提交事务..."</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn.rollback();<span class="comment">//出现异常则回滚事务</span></span><br><span class="line">				System.<span class="keyword">out</span>.println(<span class="string">"回退事务..."</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">				e1.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn.setAutoCommit(<span class="keyword">true</span>);<span class="comment">//设置自动提交</span></span><br><span class="line">				pStatement.close();</span><br><span class="line">				conn.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>操作后信息表<br>stu</p>
<table>
<thead>
<tr>
<th>id</th>
<th>stuid</th>
<th>name</th>
</tr>
</thead>
<tbody>
<tr>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
</tbody>
</table>
<p>stuinfo</p>
<table>
<thead>
<tr>
<th>sti_id</th>
<th>city</th>
</tr>
</thead>
<tbody>
<tr>
<td>001</td>
<td>beijin</td>
</tr>
<tr>
<td>002</td>
<td>shanghai</td>
</tr>
<tr>
<td>003</td>
<td>shenzhen</td>
</tr>
</tbody>
</table>
<p>运行正确时:<br>第一条语句执行…<br>第二条语句执行…<br>提交事务…</p>
<p>遇到错误时:<br>第一条语句执行…<br>第二条语句执行…<br>回退事务…</p>
<p>(2)JDBC批量处理<br>Statement的execute()等方法一次只能一条sql语句，同时执行多条可以用addBatch()方法将要执行的语句加入，然后执行executeBatch()方法，为保证这一批语句全部失败或者全部成功，应该放之于事务中执行。<br>注意：批处理中执行语句只能是更新语句(insert,delete,update),否则异常。<br>实例:<br>采用PreparedStatement方法<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JdbcTransation</span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">		java.sql.Connection conn=<span class="keyword">null</span>;</span><br><span class="line">		PreparedStatement pStatement=<span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">			conn=DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/test"</span>,<span class="string">"root"</span>,<span class="string">""</span>);</span><br><span class="line">			String sql=<span class="string">"INSERT INTO stuinfo(stu_id,city) VALUES(?,?)"</span>;</span><br><span class="line"></span><br><span class="line">			conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">			pStatement=conn.prepareStatement(sql);</span><br><span class="line">			pStatement.setString(<span class="number">1</span>,<span class="string">"004"</span>);<span class="comment">//设置学号001</span></span><br><span class="line">			pStatement.setString(<span class="number">2</span>,<span class="string">"tianjin"</span>);<span class="comment">//家庭地址：北京</span></span><br><span class="line">			pStatement.addBatch();</span><br><span class="line">			pStatement.setString(<span class="number">1</span>, <span class="string">"005"</span>);</span><br><span class="line">			pStatement.setString(<span class="number">2</span>, <span class="string">"chongqin"</span>);</span><br><span class="line">			pStatement.addBatch();</span><br><span class="line">			pStatement.executeBatch();</span><br><span class="line"></span><br><span class="line">			conn.commit();	<span class="comment">//提交事务</span></span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"提交事务..."</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn.rollback();<span class="comment">//出现异常则回滚事务</span></span><br><span class="line">				System.<span class="keyword">out</span>.println(<span class="string">"回退事务..."</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">				e1.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn.setAutoCommit(<span class="keyword">true</span>);<span class="comment">//设置自动提交</span></span><br><span class="line">				pStatement.close();</span><br><span class="line">				conn.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>采用Statement方法<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JdbcTransation</span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">		java.sql.Connection conn=<span class="keyword">null</span>;</span><br><span class="line">		Statement statement =<span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">			conn=DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/test"</span>,<span class="string">"root"</span>,<span class="string">""</span>);</span><br><span class="line">			statement=conn.createStatement();</span><br><span class="line"></span><br><span class="line">			conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">			statement .addBatch(<span class="string">"INSERT INTO stuinfo(stu_id,city) VALUES('006','wuhan')"</span>);</span><br><span class="line">			statement.addBatch(<span class="string">"INSERT INTO stuinfo(stu_id,city) VALUES('007','changsha')"</span>);</span><br><span class="line">			statement.executeBatch();</span><br><span class="line"></span><br><span class="line">			statement.executeBatch();</span><br><span class="line">			conn.commit();	<span class="comment">//提交事务</span></span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"提交事务..."</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn.rollback();<span class="comment">//出现异常则回滚事务</span></span><br><span class="line">				System.<span class="keyword">out</span>.println(<span class="string">"回退事务..."</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">				e1.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn.setAutoCommit(<span class="keyword">true</span>);<span class="comment">//设置自动提交</span></span><br><span class="line">				statement.close();</span><br><span class="line">				conn.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="4-_u5E94_u7528_u6848_u4F8B"><a href="#4-_u5E94_u7528_u6848_u4F8B" class="headerlink" title="4.应用案例"></a>4.应用案例</h2><p>(1)信息管理<br>A.创建商品表<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root<span class="comment">@localhost test&gt;CREATE TABLE goods(</span></span><br><span class="line">    -&gt; id INT UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">    -&gt; name VARCHAR(20),</span><br><span class="line">    -&gt; price INT,</span><br><span class="line">    -&gt; PRIMARY KEY (id));</span><br><span class="line">Query OK, 0 rows affected (0.33 sec)</span><br><span class="line"></span><br><span class="line">root<span class="comment">@localhost test&gt;DESC goods;</span></span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">|<span class="string"> Field </span>|<span class="string"> Type             </span>|<span class="string"> Null </span>|<span class="string"> Key </span>|<span class="string"> Default </span>|<span class="string"> Extra          </span>|</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">|<span class="string"> id    </span>|<span class="string"> int(10) unsigned </span>|<span class="string"> NO   </span>|<span class="string"> PRI </span>|<span class="string"> NULL    </span>|<span class="string"> auto_increment </span>|</span><br><span class="line">|<span class="string"> name  </span>|<span class="string"> varchar(20)      </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">                </span>|</span><br><span class="line">|<span class="string"> price </span>|<span class="string"> int(11)          </span>|<span class="string"> YES  </span>|<span class="string">     </span>|<span class="string"> NULL    </span>|<span class="string">                </span>|</span><br><span class="line">+-------+------------------+------+-----+---------+----------------+</span><br><span class="line">3 rows in set (0.02 sec)</span><br></pre></td></tr></table></figure></p>
<p>B.创建类添加商品并查询<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> JdbcTransation &#123;</span><br><span class="line">	<span class="keyword">static</span> java.sql.Connection conn=null;</span><br><span class="line">	<span class="keyword">static</span> PreparedStatement pStatement=null;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">conn</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">		Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">		conn=DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/test"</span>,<span class="string">"root"</span>,<span class="string">""</span>);</span><br><span class="line">				&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			pStatement.close();</span><br><span class="line">			conn.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String name,<span class="keyword">int</span> price)</span></span>&#123;</span><br><span class="line">		String sql=<span class="string">"INSERT INTO goods(name,price) VALUES (?,?)"</span>;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				pStatement=(PreparedStatement) conn.prepareStatement(sql);</span><br><span class="line">				pStatement.setString(<span class="number">1</span>, name);</span><br><span class="line">				pStatement.setInt(<span class="number">2</span>, price);</span><br><span class="line">				pStatement.executeUpdate();<span class="comment">//返回1添加成功</span></span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findall</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ResultSet resultSet=pStatement.executeQuery(<span class="string">"SELECT name,price FROM goods"</span>);</span><br><span class="line">			<span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">				String name=resultSet.getString(<span class="string">"name"</span>);</span><br><span class="line">				<span class="keyword">int</span> price=resultSet.getInt(<span class="string">"price"</span>);</span><br><span class="line">				System.out.println(name+<span class="string">":"</span>+price);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		JdbcTransation goods=<span class="keyword">new</span> JdbcTransation();</span><br><span class="line">		goods.conn();</span><br><span class="line">		goods.insert(<span class="string">"book1"</span>,<span class="number">100</span>);</span><br><span class="line">		goods.insert(<span class="string">"book2"</span>,<span class="number">80</span>);</span><br><span class="line">		goods.findall();</span><br><span class="line">		goods.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果:<br>book1:100<br>book2:80</p>
<p>(2)JDBC操作数据库工具类封装<br>整个流程放一起代码重复，利用率低，把相同代码抽取出来封装成一个类。<br>A.封装Connection对象<br>B.封装关闭JDBC资源类<br>C.封装执行数据库操作类</p>
<h2 id="5-_u5C0F_u7ED3-1"><a href="#5-_u5C0F_u7ED3-1" class="headerlink" title="5.小结"></a>5.小结</h2><h1 id="u7B2C_u56DB_u7AE0_Servlet"><a href="#u7B2C_u56DB_u7AE0_Servlet" class="headerlink" title="第四章 Servlet"></a>第四章 Servlet</h1><hr>
<p>更新中…………</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>主要内容：环境搭建，网页布局，JDBC，Servlet<br>]]>
    
    </summary>
    
      <category term="JSP" scheme="http://www.bestzhangjin.com/tags/JSP/"/>
    
      <category term="Java" scheme="http://www.bestzhangjin.com/categories/Java/"/>
    
  </entry>
  
</feed>
